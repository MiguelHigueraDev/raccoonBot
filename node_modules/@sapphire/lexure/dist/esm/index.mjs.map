{"version":3,"sources":["../../src/lib/ArgumentStream.ts","../../src/lib/lexer/streams/parameters/BaseParameter.ts","../../src/lib/lexer/streams/parameters/QuotedParameter.ts","../../src/lib/lexer/streams/parameters/WordParameter.ts","../../src/lib/lexer/streams/raw/TokenStream.ts","../../src/lib/lexer/streams/ParameterStream.ts","../../src/lib/lexer/Lexer.ts","../../src/lib/parser/ParserResult.ts","../../src/lib/parser/strategies/EmptyStrategy.ts","../../src/lib/parser/Parser.ts","../../src/lib/parser/strategies/PrefixedStrategy.ts","../../src/lib/util/util.ts"],"names":["TokenType","Option"],"mappings":"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","sourcesContent":["import { Option, Result } from '@sapphire/result';\nimport type { Parameter } from './lexer/streams/ParameterStream';\nimport type { ParserResult } from './parser/ParserResult';\n\nexport class ArgumentStream {\n\tpublic readonly results: ParserResult;\n\tpublic state: ArgumentStream.State;\n\n\tpublic constructor(results: ParserResult) {\n\t\tthis.results = results;\n\t\tthis.state = { used: new Set(), position: 0 };\n\t}\n\n\t/**\n\t * Whether or not all ordered parameters were used.\n\t */\n\tpublic get finished() {\n\t\treturn this.used === this.length;\n\t}\n\n\t/**\n\t * The amount of ordered parameters.\n\t */\n\tpublic get length() {\n\t\treturn this.results.ordered.length;\n\t}\n\n\t/**\n\t * The remaining amount of ordered parameters.\n\t */\n\tpublic get remaining() {\n\t\treturn this.length - this.used;\n\t}\n\n\t/**\n\t * The amount of ordered parameters that have been used.\n\t */\n\tpublic get used() {\n\t\treturn this.state.used.size;\n\t}\n\n\t/**\n\t * Retrieves the value of the next unused ordered token.\n\t *\n\t * @example\n\t * ```typescript\n\t * // Assume args are '1 2 3':\n\t *\n\t * console.log(args.single());\n\t * // Ok { value: '1' }\n\t *\n\t * console.log(args.single());\n\t * // Ok { value: '2' }\n\t *\n\t * console.log(args.single());\n\t * // Ok { value: '3' }\n\t *\n\t * console.log(args.single());\n\t * // None\n\t * ```\n\t *\n\t * @returns The value, if any.\n\t */\n\tpublic single(): Option<string> {\n\t\tif (this.finished) return Option.none;\n\n\t\twhile (this.state.used.has(this.state.position)) {\n\t\t\t++this.state.position;\n\t\t}\n\n\t\tthis.state.used.add(this.state.position);\n\t\treturn Option.some(this.results.ordered[this.state.position++].value);\n\t}\n\n\t/**\n\t * Retrieves the value of the next unused ordered token, but only if it could be transformed.\n\t *\n\t * @note This does not support asynchronous results, refer to {@link singleMapAsync}.\n\t *\n\t * @example\n\t * ```typescript\n\t * const parse = (value) => {\n\t *   const number = Number(value);\n\t *   return Number.isNaN(number) ? Option.none : Option.some(number);\n\t * };\n\t *\n\t * // Assume args are '1 2 3':\n\t *\n\t * console.log(args.singleMap(parse));\n\t * // Some { value: 1 }\n\t *\n\t * console.log(args.singleMap(parse));\n\t * // Some { value: 2 }\n\t *\n\t * console.log(args.singleMap(parse));\n\t * // Some { value: 3 }\n\t *\n\t * console.log(args.singleMap(parse));\n\t * // None\n\t * ```\n\t *\n\t * @typeparam T The output type.\n\t * @param predicate The predicate that determines the parameter's mapped value, or nothing if failed.\n\t * @param useAnyways Whether to consider the parameter used even if the mapping failed. Defaults to `false`.\n\t * @returns The mapped value, if any.\n\t */\n\tpublic singleMap<T>(predicate: (value: string) => Option<T>, useAnyways = false): Option<T> {\n\t\tif (this.finished) return Option.none;\n\n\t\twhile (this.state.used.has(this.state.position)) {\n\t\t\t++this.state.position;\n\t\t}\n\n\t\tconst result = predicate(this.results.ordered[this.state.position].value);\n\t\tif (result.isSome() || useAnyways) {\n\t\t\tthis.state.used.add(this.state.position);\n\t\t\t++this.state.position;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Retrieves the value of the next unused ordered token, but only if it could be transformed.\n\t *\n\t * @note This is an asynchronous variant of {@link singleMap}.\n\t *\n\t * @typeparam T The output type.\n\t * @param predicate The predicate that determines the parameter's mapped value, or nothing if failed.\n\t * @param useAnyways Whether to consider the parameter used even if the mapping failed. Defaults to `false`.\n\t * @returns The mapped value, if any.\n\t */\n\tpublic async singleMapAsync<T>(predicate: (value: string) => Promise<Option<T>>, useAnyways = false): Promise<Option<T>> {\n\t\tif (this.finished) return Option.none;\n\n\t\twhile (this.state.used.has(this.state.position)) {\n\t\t\t++this.state.position;\n\t\t}\n\n\t\tconst result = await predicate(this.results.ordered[this.state.position].value);\n\t\tif (result.isSome() || useAnyways) {\n\t\t\tthis.state.used.add(this.state.position);\n\t\t\t++this.state.position;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Finds and retrieves the next unused parameter and transforms it.\n\t *\n\t * @note This is a variant of {@link findMap} that returns the errors on failure.\n\t * @note This does not support asynchronous results, refer to {@link singleParseAsync}.\n\t *\n\t * @example\n\t * ```typescript\n\t * const parse = (value) => {\n\t *   const number = Number(value);\n\t *   return Number.isNaN(number)\n\t *     ? Result.err(`Could not parse ${value} to a number`)\n\t *     : Result.ok(number);\n\t * };\n\t *\n\t * // Assume args are '1 2 3':\n\t *\n\t * console.log(args.singleParse(parse));\n\t * // Ok { value: 1 }\n\t *\n\t * console.log(args.singleParse(parse));\n\t * // Ok { value: 2 }\n\t *\n\t * console.log(args.singleParse(parse));\n\t * // Ok { value: 3 }\n\t *\n\t * console.log(args.singleParse(parse));\n\t * // Err { error: null }\n\t * ```\n\t *\n\t * @typeparam T The output type.\n\t * @typeparam E The error type.\n\t * @param predicate The predicate that determines the parameter's transformed value, or nothing if failed.\n\t * @param useAnyways Whether to consider the parameter used even if the transformation failed. Defaults to `false`.\n\t * @returns The transformed value, if any.\n\t */\n\tpublic singleParse<T, E>(predicate: (value: string) => Result<T, E>, useAnyways = false): Result<T, E | null> {\n\t\tif (this.finished) return Result.err(null);\n\n\t\twhile (this.state.used.has(this.state.position)) {\n\t\t\t++this.state.position;\n\t\t}\n\n\t\tconst result = predicate(this.results.ordered[this.state.position].value);\n\t\tif (result.isOk() || useAnyways) {\n\t\t\tthis.state.used.add(this.state.position);\n\t\t\t++this.state.position;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Retrieves the value of the next unused ordered token, but only if it could be transformed.\n\t *\n\t * @note This is an asynchronous variant of {@link singleParse}.\n\t *\n\t * @typeparam T The output type.\n\t * @typeparam E The error type.\n\t * @param predicate The predicate that determines the parameter's mapped value, or nothing if failed.\n\t * @param useAnyways Whether to consider the parameter used even if the mapping failed. Defaults to `false`.\n\t * @returns The mapped value, if any.\n\t */\n\tpublic async singleParseAsync<T, E>(predicate: (value: string) => Promise<Result<T, E>>, useAnyways = false): Promise<Result<T, E | null>> {\n\t\tif (this.finished) return Result.err(null);\n\n\t\twhile (this.state.used.has(this.state.position)) {\n\t\t\t++this.state.position;\n\t\t}\n\n\t\tconst result = await predicate(this.results.ordered[this.state.position].value);\n\t\tif (result.isOk() || useAnyways) {\n\t\t\tthis.state.used.add(this.state.position);\n\t\t\t++this.state.position;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns the value of the first element in the array within `Option.some` where `predicate` returns `true`, and\n\t * `Option.none` otherwise.\n\t *\n\t * @note This does not support asynchronous results, refer to {@link findAsync}.\n\t *\n\t * @example\n\t * ```typescript\n\t * // Suppose args are from 'ba aa cc'.\n\t *\n\t * console.log(args.find((value) => value.startsWith('a')));\n\t * // Some { value: 'aa' }\n\t * ```\n\t *\n\t * @param predicate find calls `predicate` once for each unused ordered parameter, in ascending order, until it\n\t * finds one where `predicate` returns `true`. If such an element is found, find immediately returns a `Option.some`\n\t * with that element value. Otherwise, find returns `Option.none`.\n\t * @param from The position where to start looking for unused parameters, defaults to current position.\n\t * @returns The found parameter's value.\n\t */\n\tpublic find(predicate: (value: string) => boolean, from = this.state.position): Option<string> {\n\t\tfor (let i = from; i < this.length; ++i) {\n\t\t\tif (this.state.used.has(i)) continue;\n\n\t\t\tconst parameter = this.results.ordered[i].value;\n\t\t\tif (predicate(parameter)) {\n\t\t\t\tthis.state.used.add(i);\n\t\t\t\treturn Option.some(parameter);\n\t\t\t}\n\t\t}\n\n\t\treturn Option.none;\n\t}\n\n\t/**\n\t * Returns the value of the first element in the array within `Option.some` where `predicate` returns `true`, and\n\t * `Option.none` otherwise.\n\t *\n\t * @note This is an asynchronous variant of {@link find}.\n\t *\n\t * @example\n\t * ```typescript\n\t * // Suppose args are from 'ba aa cc'.\n\t *\n\t * console.log(args.find((value) => value.startsWith('a')));\n\t * // Some { value: 'aa' }\n\t * ```\n\t *\n\t * @param predicate find calls `predicate` once for each unused ordered parameter, in ascending order, until it\n\t * finds one where `predicate` returns `true`. If such an element is found, find immediately returns a `Option.some`\n\t * with that element value. Otherwise, find returns `Option.none`.\n\t * @param from The position where to start looking for unused parameters, defaults to current position.\n\t * @returns The found parameter's value.\n\t */\n\tpublic async findAsync(predicate: (value: string) => Promise<boolean>, from = this.state.position): Promise<Option<string>> {\n\t\tfor (let i = from; i < this.length; ++i) {\n\t\t\tif (this.state.used.has(i)) continue;\n\n\t\t\tconst parameter = this.results.ordered[i].value;\n\t\t\tif (await predicate(parameter)) {\n\t\t\t\tthis.state.used.add(i);\n\t\t\t\treturn Option.some(parameter);\n\t\t\t}\n\t\t}\n\n\t\treturn Option.none;\n\t}\n\n\t/**\n\t * Returns the value of the first element in the array within `Option.some` where `predicate` returns `Some`, and\n\t * `Option.none` otherwise.\n\t *\n\t * @note This does not support asynchronous results, refer to {@link findMapAsync}.\n\t *\n\t * @example\n\t * ```typescript\n\t * // Suppose args are from 'ba aa cc'.\n\t *\n\t * console.log(args.find((value) => value.startsWith('a')));\n\t * // Some { value: 'aa' }\n\t * ```\n\t *\n\t * @typeparam T The output type.\n\t * @param predicate find calls `predicate` once for each unused ordered parameter, in ascending order, until it\n\t * finds one where `predicate` returns `Some`. If such an element is found, find immediately returns the returned\n\t * value. Otherwise, find returns `Option.none`.\n\t * @param from The position where to start looking for unused parameters, defaults to current position.\n\t * @returns The found parameter's value.\n\t */\n\tpublic findMap<T>(predicate: (value: string) => Option<T>, from = this.state.position): Option<T> {\n\t\tfor (let i = from; i < this.length; ++i) {\n\t\t\tif (this.state.used.has(i)) continue;\n\n\t\t\tconst parameter = this.results.ordered[i].value;\n\t\t\tconst result = predicate(parameter);\n\t\t\tif (result.isSome()) {\n\t\t\t\tthis.state.used.add(i);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\treturn Option.none;\n\t}\n\n\t/**\n\t * Returns the value of the first element in the array within `Option.some` where `predicate` returns `Some`, and\n\t * `Option.none` otherwise.\n\t *\n\t * @note This is an asynchronous variant of {@link findMap}.\n\t *\n\t * @example\n\t * ```typescript\n\t * // Suppose args are from 'ba aa cc'.\n\t *\n\t * console.log(args.find((value) => value.startsWith('a')));\n\t * // Some { value: 'aa' }\n\t * ```\n\t *\n\t * @typeparam T The output type.\n\t * @param predicate find calls `predicate` once for each unused ordered parameter, in ascending order, until it\n\t * finds one where `predicate` returns `Some`. If such an element is found, find immediately returns the returned\n\t * value. Otherwise, find returns `Option.none`.\n\t * @param from The position where to start looking for unused parameters, defaults to current position.\n\t * @returns The found parameter's value.\n\t */\n\tpublic async findMapAsync<T>(predicate: (value: string) => Promise<Option<T>>, from = this.state.position): Promise<Option<T>> {\n\t\tfor (let i = from; i < this.length; ++i) {\n\t\t\tif (this.state.used.has(i)) continue;\n\n\t\t\tconst parameter = this.results.ordered[i].value;\n\t\t\tconst result = await predicate(parameter);\n\t\t\tif (result.isSome()) {\n\t\t\t\tthis.state.used.add(i);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\treturn Option.none;\n\t}\n\n\t/**\n\t * Finds and retrieves the first unused parameter that could be transformed.\n\t *\n\t * @note This is a variant of {@link findMap} that returns the errors on failure.\n\t * @note This does not support asynchronous results, refer to {@link findParseAsync}.\n\t *\n\t * @example\n\t * ```typescript\n\t * const parse = (value) => {\n\t *   const number = Number(value);\n\t *   return Number.isNaN(number)\n\t *     ? Result.err(`Could not parse ${value} to a number`)\n\t *     : Result.ok(number);\n\t * };\n\t *\n\t * // Suppose args are from 'ba 1 cc'.\n\t *\n\t * console.log(args.findParse(parse));\n\t * // Ok { value: 1 }\n\t *\n\t * console.log(args.findParse(parse));\n\t * // Err {\n\t * //   error: [\n\t * //     'Could not parse ba to a number',\n\t * //     'Could not parse cc to a number'\n\t * //   ]\n\t * // }\n\t * ```\n\t *\n\t * @typeparam T The output type.\n\t * @typeparam E The error type.\n\t * @param predicate `findParse` calls `predicate` once for each unused ordered parameter, in ascending order, until\n\t * it finds one where `predicate` returns `Ok`. If such an element is found, `findParse` immediately returns the\n\t * returned value. Otherwise, `findParse` returns `Result.Err` with all the returned errors.\n\t * @param from The position where to start looking for unused parameters, defaults to current position.\n\t * @returns The found parameter's value.\n\t */\n\tpublic findParse<T, E>(predicate: (value: string) => Result<T, E>, from = this.state.position): Result<T, E[]> {\n\t\tconst errors: E[] = [];\n\t\tfor (let i = from; i < this.length; ++i) {\n\t\t\tif (this.state.used.has(i)) continue;\n\n\t\t\tconst parameter = this.results.ordered[i].value;\n\t\t\tconst result = predicate(parameter);\n\t\t\tif (result.isOk()) {\n\t\t\t\tthis.state.used.add(i);\n\t\t\t\treturn result as Result.Ok<T>;\n\t\t\t}\n\n\t\t\terrors.push(result.unwrapErr());\n\t\t}\n\n\t\treturn Result.err(errors);\n\t}\n\n\t/**\n\t * Finds and retrieves the first unused parameter that could be transformed.\n\t *\n\t * @note This is a variant of {@link findMapAsync} that returns the errors on failure.\n\t * @note This is an asynchronous variant of {@link findParse}.\n\t *\n\t * @typeparam T The output type.\n\t * @typeparam E The error type.\n\t * @param predicate `findParse` calls `predicate` once for each unused ordered parameter, in ascending order, until\n\t * it finds one where `predicate` returns `Ok`. If such an element is found, `findParse` immediately returns the\n\t * returned value. Otherwise, `findParse` returns `Result.Err` with all the returned errors.\n\t * @param from The position where to start looking for unused parameters, defaults to current position.\n\t * @returns The found parameter's value.\n\t */\n\tpublic async findParseAsync<T, E>(predicate: (value: string) => Promise<Result<T, E>>, from = this.state.position): Promise<Result<T, E[]>> {\n\t\tconst errors: E[] = [];\n\t\tfor (let i = from; i < this.length; ++i) {\n\t\t\tif (this.state.used.has(i)) continue;\n\n\t\t\tconst parameter = this.results.ordered[i].value;\n\t\t\tconst result = await predicate(parameter);\n\t\t\tif (result.isOk()) {\n\t\t\t\tthis.state.used.add(i);\n\t\t\t\treturn result as Result.Ok<T>;\n\t\t\t}\n\n\t\t\terrors.push(result.unwrapErr());\n\t\t}\n\n\t\treturn Result.err(errors);\n\t}\n\n\t/**\n\t * Retrieves multiple unused parameters.\n\t *\n\t * @example\n\t * ```typescript\n\t * // Assume args are '1 2 3':\n\t *\n\t * console.log(join(args.many().unwrap()));\n\t * // '1 2 3'\n\t * ```\n\t *\n\t * @example\n\t * ```typescript\n\t * // Assume args are '1 2 3':\n\t *\n\t * console.log(join(args.many(2).unwrap()));\n\t * // '1 2'\n\t * ```\n\t *\n\t * @param limit The maximum amount of parameters to retrieve, defaults to `Infinity`.\n\t * @param from The position where to start looking for unused parameters, defaults to current position.\n\t * @returns The unused parameters within the range.\n\t */\n\tpublic many(limit = Infinity, from = this.state.position): Option<Parameter[]> {\n\t\tif (this.finished) return Option.none;\n\n\t\tconst parameters: Parameter[] = [];\n\t\tfor (let i = from; i < this.length; ++i) {\n\t\t\t// If the current parameter was already used, skip:\n\t\t\tif (this.state.used.has(i)) continue;\n\n\t\t\t// Mark current parameter as used, and push it to the resulting array:\n\t\t\tthis.state.used.add(i);\n\t\t\tparameters.push(this.results.ordered[i]);\n\n\t\t\t// If the parameters reached the limit, break the loop:\n\t\t\tif (parameters.length >= limit) break;\n\t\t}\n\n\t\treturn parameters.length ? Option.some(parameters) : Option.none;\n\t}\n\n\tpublic filter(predicate: (value: string) => boolean, from = this.state.position): Option<string[]> {\n\t\tif (this.finished) return Option.none;\n\n\t\tconst parameters: string[] = [];\n\t\tfor (let i = from; i < this.length; ++i) {\n\t\t\tif (this.state.used.has(i)) continue;\n\n\t\t\tconst parameter = this.results.ordered[i].value;\n\t\t\tif (predicate(parameter)) {\n\t\t\t\tthis.state.used.add(i);\n\t\t\t\tparameters.push(parameter);\n\t\t\t}\n\t\t}\n\n\t\treturn Option.some(parameters);\n\t}\n\n\tpublic async filterAsync(predicate: (value: string) => Promise<boolean>, from = this.state.position): Promise<Option<string[]>> {\n\t\tif (this.finished) return Option.none;\n\n\t\tconst parameters: string[] = [];\n\t\tfor (let i = from; i < this.length; ++i) {\n\t\t\tif (this.state.used.has(i)) continue;\n\n\t\t\tconst parameter = this.results.ordered[i].value;\n\t\t\tif (await predicate(parameter)) {\n\t\t\t\tthis.state.used.add(i);\n\t\t\t\tparameters.push(parameter);\n\t\t\t}\n\t\t}\n\n\t\treturn Option.some(parameters);\n\t}\n\n\tpublic filterMap<T>(predicate: (value: string) => Option<T>, from = this.state.position): Option<T[]> {\n\t\tif (this.finished) return Option.none;\n\n\t\tconst parameters: T[] = [];\n\t\tfor (let i = from; i < this.length; ++i) {\n\t\t\tif (this.state.used.has(i)) continue;\n\n\t\t\tconst parameter = this.results.ordered[i].value;\n\t\t\tconst result = predicate(parameter);\n\t\t\tresult.inspect((value) => {\n\t\t\t\tthis.state.used.add(i);\n\t\t\t\tparameters.push(value);\n\t\t\t});\n\t\t}\n\n\t\treturn Option.some(parameters);\n\t}\n\n\tpublic async filterMapAsync<T>(predicate: (value: string) => Promise<Option<T>>, from = this.state.position): Promise<Option<T[]>> {\n\t\tif (this.finished) return Option.none;\n\n\t\tconst parameters: T[] = [];\n\t\tfor (let i = from; i < this.length; ++i) {\n\t\t\tif (this.state.used.has(i)) continue;\n\n\t\t\tconst parameter = this.results.ordered[i].value;\n\t\t\tconst result = await predicate(parameter);\n\t\t\tresult.inspect((value) => {\n\t\t\t\tthis.state.used.add(i);\n\t\t\t\tparameters.push(value);\n\t\t\t});\n\t\t}\n\n\t\treturn Option.some(parameters);\n\t}\n\n\t/**\n\t * Checks whether any of the flags were given.\n\t *\n\t * @example\n\t * ```typescript\n\t * // Assume args are '--f --g':\n\t *\n\t * console.log(args.flag('f'));\n\t * // true\n\t *\n\t * console.log(args.flag('g', 'h'));\n\t * // true\n\t *\n\t * console.log(args.flag('h'));\n\t * // false\n\t * ```\n\t *\n\t * @param keys The names of the flags to check.\n\t * @returns Whether or not any of the flags were given.\n\t */\n\tpublic flag(...keys: readonly string[]): boolean {\n\t\treturn keys.some((key) => this.results.flags.has(key));\n\t}\n\n\t/**\n\t * Gets the last value of any option. When there are multiple names, the last value of the last found name is given.\n\t *\n\t * @example\n\t * ```typescript\n\t * // Assume args are '--a=1 --b=2 --c=3'.\n\t * console.log(args.option('a'));\n\t * // Some { value: '1' }\n\t *\n\t * console.log(args.option('b', 'c'));\n\t * // Some { value: '3' }\n\t *\n\t * console.log(args.option('d'));\n\t * // None {}\n\t * ```\n\t *\n\t * @param keys The names of the options to check.\n\t * @returns The last value of the option, if any.\n\t */\n\tpublic option(...keys: readonly string[]): Option<string> {\n\t\treturn this.options(...keys).map((values) => values.at(-1)!);\n\t}\n\n\t/**\n\t * Gets all values from all options.\n\t *\n\t * @example\n\t * ```typescript\n\t * // Assume args are '--a=1 --a=1 --b=2 --c=3'.\n\t * console.log(args.option('a'));\n\t * // Some { value: ['1', '1'] }\n\t *\n\t * console.log(args.option('b', 'c'));\n\t * // Some { value: ['2', '3'] }\n\t *\n\t * console.log(args.option('d'));\n\t * // None {}\n\t * ```\n\t *\n\t * @param keys The names of the options to check.\n\t * @returns The values from all the options concatenated, if any.\n\t */\n\tpublic options(...keys: readonly string[]): Option<readonly string[]> {\n\t\tconst entries: string[] = [];\n\t\tfor (const key of keys) {\n\t\t\tconst values = this.results.options.get(key);\n\t\t\tif (values) entries.push(...values);\n\t\t}\n\n\t\treturn entries.length ? Option.some(entries) : Option.none;\n\t}\n\n\tpublic save(): ArgumentStream.State {\n\t\treturn {\n\t\t\tused: new Set(this.state.used),\n\t\t\tposition: this.state.position\n\t\t};\n\t}\n\n\tpublic restore(state: ArgumentStream.State) {\n\t\tthis.state = state;\n\t}\n\n\tpublic reset() {\n\t\tthis.restore({ used: new Set(), position: 0 });\n\t}\n}\n\nexport namespace ArgumentStream {\n\texport interface State {\n\t\tused: Set<number>;\n\t\tposition: number;\n\t}\n}\n","export abstract class BaseParameter {\n\tpublic readonly separators: readonly string[];\n\n\tpublic constructor(separators: readonly string[]) {\n\t\tthis.separators = separators;\n\t}\n\n\tpublic get leading(): string {\n\t\treturn this.separators.join('');\n\t}\n\n\tpublic abstract get raw(): string;\n}\n","import type { QuotedToken } from '../raw/TokenStream';\nimport { BaseParameter } from './BaseParameter';\n\nexport class QuotedParameter extends BaseParameter {\n\tpublic readonly value: string;\n\tpublic readonly open: string;\n\tpublic readonly close: string;\n\n\tpublic constructor(separators: readonly string[], part: Omit<QuotedToken, 'type'>) {\n\t\tsuper(separators);\n\t\tthis.value = part.value;\n\t\tthis.open = part.open;\n\t\tthis.close = part.close;\n\t}\n\n\tpublic get raw() {\n\t\treturn `${this.open}${this.value}${this.close}`;\n\t}\n}\n","import type { WordToken } from '../raw/TokenStream';\nimport { BaseParameter } from './BaseParameter';\n\nexport class WordParameter extends BaseParameter {\n\tpublic readonly value: string;\n\n\tpublic constructor(separators: readonly string[], part: Omit<WordToken, 'type'>) {\n\t\tsuper(separators);\n\t\tthis.value = part.value;\n\t}\n\n\tpublic get raw() {\n\t\treturn this.value;\n\t}\n}\n","import type { Lexer } from '../../Lexer';\n\nexport class TokenStream implements Iterable<Token> {\n\tprivate readonly input: string;\n\tprivate readonly quotes: readonly [string, string][];\n\tprivate readonly separator: string;\n\tprivate position = 0;\n\n\tpublic constructor(lexer: Lexer, input: string) {\n\t\tthis.quotes = lexer.quotes;\n\t\tthis.separator = lexer.separator;\n\t\tthis.input = input;\n\t}\n\n\tpublic get finished() {\n\t\treturn this.position >= this.input.length;\n\t}\n\n\tpublic *[Symbol.iterator](): Iterator<Token> {\n\t\twhile (!this.finished) {\n\t\t\tyield this.getPossibleSeparator() ?? this.getPossibleQuotedArgument() ?? this.getParameter();\n\t\t}\n\t}\n\n\tprivate getPossibleSeparator(): SeparatorToken | null {\n\t\tif (this.input.startsWith(this.separator, this.position)) {\n\t\t\tthis.position += this.separator.length;\n\t\t\treturn { type: TokenType.Separator, value: this.separator };\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getPossibleQuotedArgument(): QuotedToken | null {\n\t\tfor (const [open, close] of this.quotes) {\n\t\t\tif (!this.input.startsWith(open, this.position)) continue;\n\n\t\t\tconst end = this.input.indexOf(close, this.position + open.length);\n\t\t\tif (end === -1) continue;\n\n\t\t\tconst value = this.input.slice(this.position + open.length, end);\n\t\t\tthis.position = end + close.length;\n\n\t\t\treturn { type: TokenType.Quoted, value, open, close };\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getParameter(): WordToken {\n\t\tconst index = this.input.indexOf(this.separator, this.position);\n\t\tconst value = index === -1 ? this.input.slice(this.position) : this.input.slice(this.position, index);\n\t\tthis.position += value.length;\n\t\treturn { type: TokenType.Parameter, value };\n\t}\n}\n\nexport enum TokenType {\n\tParameter,\n\tQuoted,\n\tSeparator\n}\n\nexport type Token = WordToken | QuotedToken | SeparatorToken;\n\nexport interface WordToken {\n\treadonly type: TokenType.Parameter;\n\treadonly value: string;\n}\n\nexport interface QuotedToken {\n\treadonly type: TokenType.Quoted;\n\treadonly value: string;\n\treadonly open: string;\n\treadonly close: string;\n}\n\nexport interface SeparatorToken {\n\treadonly type: TokenType.Separator;\n\treadonly value: string;\n}\n","import { QuotedParameter } from './parameters/QuotedParameter';\nimport { WordParameter } from './parameters/WordParameter';\nimport { TokenType, type Token } from './raw/TokenStream';\n\nexport class ParameterStream {\n\tprivate readonly stream: Iterable<Token>;\n\tprivate separators: string[] = [];\n\n\tpublic constructor(stream: Iterable<Token>) {\n\t\tthis.stream = stream;\n\t}\n\n\tpublic *[Symbol.iterator](): Iterator<Parameter, string[]> {\n\t\tfor (const part of this.stream) {\n\t\t\tif (part.type === TokenType.Separator) {\n\t\t\t\tthis.separators.push(part.value);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tyield part.type === TokenType.Quoted ? new QuotedParameter(this.separators, part) : new WordParameter(this.separators, part);\n\t\t\tthis.separators = [];\n\t\t}\n\n\t\treturn this.separators;\n\t}\n}\n\nexport type Parameter = QuotedParameter | WordParameter;\n","import { ParameterStream } from './streams/ParameterStream';\nimport { TokenStream } from './streams/raw/TokenStream';\n\nexport class Lexer {\n\tpublic readonly quotes: readonly [open: string, close: string][];\n\tpublic readonly separator: string;\n\n\tpublic constructor(options: Lexer.Options = {}) {\n\t\tthis.quotes = options.quotes ?? [];\n\t\tthis.separator = options.separator ?? ' ';\n\t}\n\n\tpublic run(input: string) {\n\t\treturn new ParameterStream(this.raw(input));\n\t}\n\n\tpublic raw(input: string) {\n\t\treturn new TokenStream(this, input);\n\t}\n}\n\nexport namespace Lexer {\n\texport interface Options {\n\t\tseparator?: string;\n\t\tquotes?: readonly [open: string, close: string][];\n\t}\n}\n","import type { Parameter } from '../lexer/streams/ParameterStream';\nimport type { Parser } from './Parser';\nimport type { IUnorderedStrategy } from './strategies/IUnorderedStrategy';\n\nexport class ParserResult {\n\tpublic readonly ordered: Parameter[] = [];\n\tpublic readonly flags = new Set<string>();\n\tpublic readonly options = new Map<string, string[]>();\n\tprivate readonly strategy: IUnorderedStrategy;\n\n\tpublic constructor(parser: Parser) {\n\t\tthis.strategy = parser.strategy;\n\t}\n\n\tpublic parse(parameters: Iterable<Parameter>) {\n\t\tfor (const parameter of parameters) {\n\t\t\tthis.parsePossibleFlag(parameter) || this.parsePossibleOptions(parameter) || this.parseOrdered(parameter);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprivate parsePossibleFlag(parameter: Parameter): boolean {\n\t\treturn this.strategy\n\t\t\t.matchFlag(parameter.value)\n\t\t\t.inspect((value) => this.flags.add(value))\n\t\t\t.isSome();\n\t}\n\n\tprivate parsePossibleOptions(parameter: Parameter): boolean {\n\t\treturn this.strategy\n\t\t\t.matchOption(parameter.value)\n\t\t\t.inspect(([key, value]) => {\n\t\t\t\tconst existing = this.options.get(key);\n\t\t\t\tif (existing) existing.push(value);\n\t\t\t\telse this.options.set(key, [value]);\n\t\t\t})\n\t\t\t.isSome();\n\t}\n\n\tprivate parseOrdered(parameter: Parameter): boolean {\n\t\tthis.ordered.push(parameter);\n\t\treturn true;\n\t}\n}\n","import { Option } from '@sapphire/result';\nimport type { IUnorderedStrategy } from './IUnorderedStrategy';\n\nexport class EmptyStrategy implements IUnorderedStrategy {\n\tpublic matchFlag(): Option<string> {\n\t\treturn Option.none;\n\t}\n\n\tpublic matchOption(): Option<readonly [key: string, value: string]> {\n\t\treturn Option.none;\n\t}\n}\n","import type { Parameter } from '../lexer/streams/ParameterStream';\nimport type { IUnorderedStrategy } from './strategies/IUnorderedStrategy';\nimport { ParserResult } from './ParserResult';\nimport { EmptyStrategy } from './strategies/EmptyStrategy';\n\nexport class Parser {\n\tpublic strategy: IUnorderedStrategy;\n\n\tpublic constructor(strategy?: IUnorderedStrategy) {\n\t\tthis.strategy = strategy ?? new EmptyStrategy();\n\t}\n\n\tpublic setUnorderedStrategy(strategy: IUnorderedStrategy) {\n\t\tthis.strategy = strategy;\n\t\treturn this;\n\t}\n\n\tpublic run(input: Iterable<Parameter>): ParserResult {\n\t\treturn new ParserResult(this).parse(input);\n\t}\n}\n","import { Option } from '@sapphire/result';\nimport type { IUnorderedStrategy } from './IUnorderedStrategy';\n\nexport class PrefixedStrategy implements IUnorderedStrategy {\n\tpublic readonly prefixes: readonly string[];\n\tpublic readonly separators: readonly string[];\n\n\tpublic constructor(prefixes: readonly string[], separators: readonly string[]) {\n\t\tthis.prefixes = prefixes;\n\t\tthis.separators = separators;\n\t}\n\n\tpublic matchFlag(input: string): Option<string> {\n\t\tconst prefix = this.prefixes.find((x) => input.startsWith(x));\n\n\t\t// If the prefix is missing, return None:\n\t\tif (!prefix) return Option.none;\n\n\t\t// If the separator is present, return None:\n\t\tif (this.separators.some((x) => input.includes(x, prefix.length))) return Option.none;\n\n\t\treturn Option.some(input.slice(prefix.length));\n\t}\n\n\tpublic matchOption(input: string): Option<readonly [key: string, value: string]> {\n\t\tconst prefix = this.prefixes.find((x) => input.startsWith(x));\n\n\t\t// If the prefix is missing, return None:\n\t\tif (!prefix) return Option.none;\n\n\t\tfor (const separator of this.separators) {\n\t\t\tconst index = input.indexOf(separator, prefix.length + 1);\n\n\t\t\t// If the separator is missing, skip:\n\t\t\tif (index === -1) continue;\n\n\t\t\t// If the separator is present, but has no value, return None:\n\t\t\tif (index + separator.length === input.length) return Option.none;\n\n\t\t\tconst key = input.slice(prefix.length, index);\n\t\t\tconst value = input.slice(index + separator.length);\n\t\t\treturn Option.some([key, value] as const);\n\t\t}\n\n\t\treturn Option.none;\n\t}\n}\n","import type { Parameter } from '../lexer/streams/ParameterStream';\n\n/**\n * Joins the parameters by their `leading` value, using the `value` property.\n * @seealso {@link joinRaw} for the version using `raw` instead of `value`.\n * @param parameters The parameters to join.\n * @returns The result of joining the parameters.\n */\nexport function join(parameters: readonly Parameter[]) {\n\tif (parameters.length === 0) return '';\n\tif (parameters.length === 1) return parameters[0].value;\n\n\tlet output = parameters[0].value;\n\tfor (let i = 1; i < parameters.length; i++) {\n\t\tconst parameter = parameters[i];\n\t\toutput += parameter.leading + parameter.value;\n\t}\n\n\treturn output;\n}\n\n/**\n * Joins the parameters by their `leading` value, using the `raw` property.\n * @seealso {@link join} for the version using `value` instead of `raw`.\n * @param parameters The parameters to join.\n * @returns The result of joining the parameters.\n */\nexport function joinRaw(parameters: readonly Parameter[]) {\n\tif (parameters.length === 0) return '';\n\tif (parameters.length === 1) return parameters[0].raw;\n\n\tlet output = parameters[0].raw;\n\tfor (let i = 1; i < parameters.length; i++) {\n\t\tconst parameter = parameters[i];\n\t\toutput += parameter.leading + parameter.raw;\n\t}\n\n\treturn output;\n}\n"]}