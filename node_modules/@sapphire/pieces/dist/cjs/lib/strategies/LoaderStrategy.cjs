'use strict';

var utilities = require('@sapphire/utilities');
var promises = require('fs/promises');
var path = require('path');
var url = require('url');
var MissingExportsError_cjs = require('../errors/MissingExportsError.cjs');
var RootScan_cjs = require('../internal/RootScan.cjs');
var internal_cjs = require('../internal/internal.cjs');
var Shared_cjs = require('./Shared.cjs');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var _LoaderStrategy = class _LoaderStrategy {
  constructor() {
    __publicField(this, "clientUsesESModules", RootScan_cjs.getRootData().type === "ESM");
    __publicField(this, "supportedExtensions", [".js", ".cjs", ".mjs"]);
    __publicField(this, "filterDtsFiles", false);
    const shouldLoadTsFiles = Reflect.has(process, Symbol.for("ts-node.register.instance")) || // ts-node support
    Reflect.has(globalThis, "Deno") || // Deno support
    !utilities.isNullish(process.env.TS_NODE_DEV) || // ts-node-dev support
    "bun" in process.versions;
    if (shouldLoadTsFiles) {
      this.supportedExtensions.push(".ts", ".cts", ".mts");
      this.filterDtsFiles = true;
    }
  }
  filter(path$1) {
    const extension = path.extname(path$1);
    if (!this.supportedExtensions.includes(extension))
      return null;
    if (this.filterDtsFiles && path$1.endsWith(".d.ts"))
      return null;
    const name = path.basename(path$1, extension);
    if (name === "" || name.startsWith("_"))
      return null;
    return { extension, path: path$1, name };
  }
  async preload(file) {
    const mjs = [".mjs", ".mts"].includes(file.extension) || [".js", ".ts"].includes(file.extension) && this.clientUsesESModules;
    if (mjs) {
      const url$1 = url.pathToFileURL(file.path);
      url$1.searchParams.append("d", Date.now().toString());
      url$1.searchParams.append("name", file.name);
      url$1.searchParams.append("extension", file.extension);
      return internal_cjs.mjsImport(url$1);
    }
    const mod = __require(file.path);
    delete __require.cache[__require.resolve(file.path)];
    return mod;
  }
  async *load(store, file) {
    let yielded = false;
    const result = await this.preload(file);
    if (Shared_cjs.isClass(result) && Shared_cjs.classExtends(result, store.Constructor)) {
      yield result;
      yielded = true;
    }
    for (const value of Object.values(result)) {
      if (Shared_cjs.isClass(value) && Shared_cjs.classExtends(value, store.Constructor)) {
        yield value;
        yielded = true;
      }
    }
    if (!yielded) {
      throw new MissingExportsError_cjs.MissingExportsError(file.path);
    }
  }
  onLoad() {
    return void 0;
  }
  onLoadAll() {
    return void 0;
  }
  onUnload() {
    return void 0;
  }
  onUnloadAll() {
    return void 0;
  }
  onError(error, path) {
    console.error(`Error when loading '${path}':`, error);
  }
  async *walk(store, path$1, logger) {
    logger?.(`[STORE => ${store.name}] [WALK] Loading all pieces from '${path$1}'.`);
    try {
      const dir = await promises.opendir(path$1);
      for await (const item of dir) {
        if (item.isFile())
          yield path.join(dir.path, item.name);
        else if (item.isDirectory())
          yield* this.walk(store, path.join(dir.path, item.name), logger);
      }
    } catch (error) {
      if (error.code !== "ENOENT")
        this.onError(error, path$1);
    }
  }
};
__name(_LoaderStrategy, "LoaderStrategy");
var LoaderStrategy = _LoaderStrategy;

exports.LoaderStrategy = LoaderStrategy;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=LoaderStrategy.cjs.map