{"version":3,"sources":["../../../../src/lib/strategies/Shared.ts"],"names":[],"mappings":";;;;AAOO,SAAS,QAAQ,OAAuC;AAC9D,SAAO,OAAO,UAAU,cAAc,OAAO,MAAM,cAAc;AAClE;AAFgB;AAUT,SAAS,aAAqC,OAAqB,MAAqB;AAC9F,MAAI,OAA4B;AAChC,SAAO,SAAS,MAAM;AACrB,QAAI,SAAS;AAAM,aAAO;AAC1B,WAAO,OAAO,eAAe,IAAI;AAAA,EAClC;AAEA,SAAO;AACR;AARgB","sourcesContent":["import type { AbstractCtor } from '@sapphire/utilities';\n\n/**\n * Determines whether or not a value is a class.\n * @param value The piece to be checked.\n * @private\n */\nexport function isClass(value: unknown): value is AbstractCtor {\n\treturn typeof value === 'function' && typeof value.prototype === 'object';\n}\n\n/**\n * Checks whether or not the value class extends the base class.\n * @param value The constructor to be checked against.\n * @param base The base constructor.\n * @private\n */\nexport function classExtends<T extends AbstractCtor>(value: AbstractCtor, base: T): value is T {\n\tlet ctor: AbstractCtor | null = value;\n\twhile (ctor !== null) {\n\t\tif (ctor === base) return true;\n\t\tctor = Object.getPrototypeOf(ctor);\n\t}\n\n\treturn false;\n}\n"]}