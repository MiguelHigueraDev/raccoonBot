{"version":3,"sources":["../../../../src/lib/structures/Store.ts"],"names":["Store"],"mappings":"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","sourcesContent":["import { Collection } from '@discordjs/collection';\nimport { classExtends, isClass, type AbstractConstructor, type Constructor } from '@sapphire/utilities';\nimport { join } from 'path';\nimport { LoaderError, LoaderErrorType } from '../errors/LoaderError';\nimport { resolvePath, type Path } from '../internal/Path';\nimport { ManuallyRegisteredPiecesSymbol, VirtualPath } from '../internal/constants';\nimport { container, type Container } from '../shared/Container';\nimport type { HydratedModuleData, ILoaderResultEntry, ILoaderStrategy, ModuleData } from '../strategies/ILoaderStrategy';\nimport { LoaderStrategy } from '../strategies/LoaderStrategy';\nimport type { Piece } from './Piece';\nimport { StoreRegistry, type StoreRegistryEntries, type StoreRegistryKey } from './StoreRegistry';\n\n/**\n * The options for the store, this features both hooks (changes the behaviour) and handlers (similar to event listeners).\n */\nexport interface StoreOptions<T extends Piece, StoreName extends StoreRegistryKey = StoreRegistryKey> {\n\t/**\n\t * The name for this store.\n\t */\n\treadonly name: StoreName;\n\n\t/**\n\t * The paths to load pieces from, should be absolute.\n\t * @default []\n\t */\n\treadonly paths?: readonly string[];\n\n\t/**\n\t * The strategy to be used for the loader.\n\t * @default Store.defaultStrategy\n\t */\n\treadonly strategy?: ILoaderStrategy<T>;\n}\n\n/**\n * An interface representing a logger function.\n */\nexport interface StoreLogger {\n\t/**\n\t * @param value The string to print. All strings will be formatted with the format `[STORE => ${name}] [${type}] ${content}`,\n\t * where the content may have identifiers (values or names of methods) surrounded by `'`. For example:\n\t *\n\t * - `[STORE => commands] [LOAD] Skipped piece '/home/user/bot/src/commands/foo.js' as 'LoaderStrategy#filter' returned 'null'.`\n\t * - `[STORE => commands] [INSERT] Unloaded new piece 'foo' due to 'enabled' being 'false'.`\n\t * - `[STORE => commands] [UNLOAD] Unloaded piece 'foo'.`\n\t */\n\t(value: string): void;\n}\n\nconst defaultStrategy = new LoaderStrategy();\n\n/**\n * The store class which contains {@link Piece}s.\n */\nexport class Store<T extends Piece, StoreName extends StoreRegistryKey = StoreRegistryKey> extends Collection<string, T> {\n\tpublic readonly Constructor: AbstractConstructor<T>;\n\tpublic readonly name: StoreName;\n\tpublic readonly paths: Set<string>;\n\tpublic readonly strategy: ILoaderStrategy<T>;\n\n\t/**\n\t * The queue of manually registered pieces to load.\n\t */\n\tprivate readonly [ManuallyRegisteredPiecesSymbol]: StoreManuallyRegisteredPiece<StoreName>[] = [];\n\n\t/**\n\t * Whether or not the store has called `loadAll` at least once.\n\t */\n\t#calledLoadAll = false;\n\n\t/**\n\t * The walk function for the store.\n\t */\n\t#walk: LoaderStrategy<T>['walk'];\n\n\t/**\n\t * @param constructor The piece constructor this store loads.\n\t * @param options The options for the store.\n\t */\n\tpublic constructor(constructor: AbstractConstructor<T>, options: StoreOptions<T, StoreName>) {\n\t\tsuper();\n\t\tthis.Constructor = constructor;\n\t\tthis.name = options.name as StoreRegistryKey;\n\t\tthis.paths = new Set(options.paths ?? []);\n\t\tthis.strategy = options.strategy ?? Store.defaultStrategy;\n\n\t\tthis.#walk =\n\t\t\ttypeof this.strategy.walk === 'function' //\n\t\t\t\t? this.strategy.walk.bind(this.strategy)\n\t\t\t\t: defaultStrategy.walk.bind(defaultStrategy);\n\t}\n\n\t/**\n\t * A reference to the {@link Container} object for ease of use.\n\t * @see container\n\t */\n\tpublic get container(): Container {\n\t\treturn container;\n\t}\n\n\t/**\n\t * Registers a directory into the store.\n\t * @param path The path to be added.\n\t * @example\n\t * ```typescript\n\t * store\n\t *   .registerPath(resolve('commands'))\n\t *   .registerPath(resolve('third-party', 'commands'));\n\t * ```\n\t */\n\tpublic registerPath(path: Path): this {\n\t\tconst root = resolvePath(path);\n\n\t\tthis.paths.add(root);\n\t\tStore.logger?.(`[STORE => ${this.name}] [REGISTER] Registered path '${root}'.`);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a piece into the store's list of manually registered pieces. If {@linkcode Store.loadAll()} was called, the\n\t * piece will be loaded immediately, otherwise it will be queued until {@linkcode Store.loadAll()} is called.\n\t *\n\t * All manually registered pieces will be kept even after they are loaded to ensure they can be loaded again if\n\t * {@linkcode Store.loadAll()} is called again.\n\t *\n\t * @remarks\n\t *\n\t * - Pieces loaded this way will have their {@linkcode Piece.Context.root root} and\n\t *   {@linkcode Piece.Context.path path} set to {@linkcode VirtualPath}, and as such, cannot be reloaded.\n\t * - This method is useful in environments where file system access is limited or unavailable, such as when using\n\t *   {@link https://en.wikipedia.org/wiki/Serverless_computing Serverless Computing}.\n\t * - This method will always throw a {@link TypeError} if `entry.piece` is not a class.\n\t * - This method will always throw a {@linkcode LoaderError} if the piece does not extend the\n\t *   {@linkcode Store#Constructor store's piece constructor}.\n\t * - This operation is atomic, if any of the above errors are thrown, the piece will not be loaded.\n\t *\n\t * @seealso {@linkcode StoreRegistry.loadPiece()}\n\t * @since 3.8.0\n\t * @param entry The entry to load.\n\t * @example\n\t * ```typescript\n\t * import { container } from '@sapphire/pieces';\n\t *\n\t * class PingCommand extends Command {\n\t *   // ...\n\t * }\n\t *\n\t * container.stores.get('commands').loadPiece({\n\t *   name: 'ping',\n\t *   piece: PingCommand\n\t * });\n\t * ```\n\t */\n\tpublic async loadPiece(entry: StoreManuallyRegisteredPiece<StoreName>) {\n\t\tif (!isClass(entry.piece)) {\n\t\t\tthrow new TypeError(`The piece ${entry.name} is not a Class. ${String(entry.piece)}`);\n\t\t}\n\n\t\t// If the piece does not extend the store's Piece class, throw an error:\n\t\tif (!classExtends(entry.piece, this.Constructor as Constructor<T>)) {\n\t\t\tthrow new LoaderError(LoaderErrorType.IncorrectType, `The piece ${entry.name} does not extend ${this.name}`);\n\t\t}\n\n\t\tthis[ManuallyRegisteredPiecesSymbol].push(entry);\n\t\tif (this.#calledLoadAll) {\n\t\t\tconst piece = this.construct(entry.piece as unknown as Constructor<T>, {\n\t\t\t\tname: entry.name,\n\t\t\t\troot: VirtualPath,\n\t\t\t\tpath: VirtualPath,\n\t\t\t\textension: VirtualPath\n\t\t\t});\n\t\t\tawait this.insert(piece);\n\t\t}\n\t}\n\n\t/**\n\t * Loads one or more pieces from a path.\n\t * @param root The root directory the file is from.\n\t * @param path The path of the file to load, relative to the `root`.\n\t * @return All the loaded pieces.\n\t */\n\tpublic async load(root: string, path: string): Promise<T[]> {\n\t\tif (root === VirtualPath) {\n\t\t\tthrow new LoaderError(LoaderErrorType.VirtualPiece, `Cannot load a virtual file.`);\n\t\t}\n\n\t\tconst full = join(root, path);\n\t\tconst data = this.strategy.filter(full);\n\t\tif (data === null) {\n\t\t\tStore.logger?.(`[STORE => ${this.name}] [LOAD] Skipped piece '${full}' as 'LoaderStrategy#filter' returned 'null'.`);\n\t\t\treturn [];\n\t\t}\n\n\t\tconst promises: Promise<T>[] = [];\n\t\tconst finishedData = this.hydrateModuleData(root, data);\n\t\tfor await (const Ctor of this.strategy.load(this, finishedData)) {\n\t\t\tpromises.push(this.insert(this.construct(Ctor, finishedData)));\n\t\t}\n\n\t\treturn Promise.all(promises);\n\t}\n\n\t/**\n\t * Unloads a piece given its instance or its name.\n\t * @param name The name of the file to load.\n\t * @return Returns the piece that was unloaded.\n\t */\n\tpublic async unload(name: string | T): Promise<T> {\n\t\tconst piece = this.resolve(name);\n\n\t\t// Unload piece:\n\t\tthis.strategy.onUnload(this, piece);\n\t\tawait piece.onUnload();\n\t\tStore.logger?.(`[STORE => ${this.name}] [UNLOAD] Unloaded piece '${piece.name}'.`);\n\n\t\t// Remove from cache and return it:\n\t\tthis.delete(piece.name);\n\t\tStore.logger?.(`[STORE => ${this.name}] [UNLOAD] Removed piece '${piece.name}'.`);\n\t\treturn piece;\n\t}\n\n\t/**\n\t * Unloads all pieces from the store.\n\t */\n\tpublic async unloadAll(): Promise<T[]> {\n\t\tconst promises: Promise<T>[] = [];\n\t\tfor (const piece of this.values()) {\n\t\t\tpromises.push(this.unload(piece));\n\t\t}\n\n\t\tconst results = await Promise.all(promises);\n\n\t\tthis.strategy.onUnloadAll(this);\n\t\tStore.logger?.(`[STORE => ${this.name}] [UNLOAD-ALL] Removed all pieces.`);\n\t\treturn results;\n\t}\n\n\t/**\n\t * Loads all pieces from all directories specified by {@link paths}.\n\t */\n\tpublic async loadAll(): Promise<void> {\n\t\tthis.#calledLoadAll = true;\n\n\t\tconst pieces: T[] = [];\n\t\tfor (const entry of this[ManuallyRegisteredPiecesSymbol]) {\n\t\t\tconst piece = this.construct(entry.piece as unknown as Constructor<T>, {\n\t\t\t\tname: entry.name,\n\t\t\t\troot: VirtualPath,\n\t\t\t\tpath: VirtualPath,\n\t\t\t\textension: VirtualPath\n\t\t\t});\n\t\t\tpieces.push(piece);\n\t\t}\n\n\t\tfor (const path of this.paths) {\n\t\t\tfor await (const piece of this.loadPath(path)) {\n\t\t\t\tpieces.push(piece);\n\t\t\t}\n\t\t}\n\n\t\tStore.logger?.(`[STORE => ${this.name}] [LOAD-ALL] Found '${pieces.length}' pieces.`);\n\n\t\t// Clear the store before inserting the new pieces:\n\t\tawait this.unloadAll();\n\t\tStore.logger?.(`[STORE => ${this.name}] [LOAD-ALL] Cleared all pieces.`);\n\n\t\t// Load each piece:\n\t\tfor (const piece of pieces) {\n\t\t\tawait this.insert(piece);\n\t\t}\n\n\t\t// Call onLoadAll:\n\t\tthis.strategy.onLoadAll(this);\n\t\tStore.logger?.(`[STORE => ${this.name}] [LOAD-ALL] Successfully loaded '${this.size}' pieces.`);\n\t}\n\n\t/**\n\t * Resolves a piece by its name or its instance.\n\t * @param name The name of the piece or the instance itself.\n\t * @return The resolved piece.\n\t */\n\tpublic resolve(name: string | T): T {\n\t\tif (typeof name === 'string') {\n\t\t\tconst result = this.get(name);\n\t\t\tif (typeof result === 'undefined') throw new LoaderError(LoaderErrorType.UnloadedPiece, `The piece '${name}' does not exist.`);\n\t\t\treturn result;\n\t\t}\n\n\t\tif (name instanceof this.Constructor) return name;\n\t\tthrow new LoaderError(LoaderErrorType.IncorrectType, `The piece '${name.name}' is not an instance of '${this.Constructor.name}'.`);\n\t}\n\n\t/**\n\t * Inserts a piece into the store.\n\t * @param piece The piece to be inserted into the store.\n\t * @return The inserted piece.\n\t */\n\tpublic async insert(piece: T): Promise<T> {\n\t\tif (!piece.enabled) return piece;\n\n\t\t// Load piece:\n\t\tthis.strategy.onLoad(this, piece);\n\t\tawait piece.onLoad();\n\t\tStore.logger?.(`[STORE => ${this.name}] [INSERT] Loaded new piece '${piece.name}'.`);\n\n\t\t// If the onLoad disabled the piece, call unload and return it:\n\t\tif (!piece.enabled) {\n\t\t\t// Unload piece:\n\t\t\tthis.strategy.onUnload(this, piece);\n\t\t\tawait piece.onUnload();\n\t\t\tStore.logger?.(`[STORE => ${this.name}] [INSERT] Unloaded new piece '${piece.name}' due to 'enabled' being 'false'.`);\n\n\t\t\treturn piece;\n\t\t}\n\n\t\t// Unload existing piece, if any:\n\t\tconst previous = super.get(piece.name);\n\t\tif (previous) {\n\t\t\tawait this.unload(previous);\n\t\t\tStore.logger?.(`[STORE => ${this.name}] [INSERT] Unloaded existing piece '${piece.name}' due to conflicting 'name'.`);\n\t\t}\n\n\t\t// Set the new piece and return it:\n\t\tthis.set(piece.name, piece);\n\t\tStore.logger?.(`[STORE => ${this.name}] [INSERT] Inserted new piece '${piece.name}'.`);\n\t\treturn piece;\n\t}\n\n\t/**\n\t * Constructs a {@link Piece} instance.\n\t * @param Ctor The {@link Piece}'s constructor used to build the instance.\n\t * @param data The module's information\n\t * @return An instance of the constructed piece.\n\t */\n\tpublic construct(Ctor: ILoaderResultEntry<T>, data: HydratedModuleData): T {\n\t\treturn new Ctor({ store: this, root: data.root, path: data.path, name: data.name }, { name: data.name, enabled: true });\n\t}\n\n\t/**\n\t * Adds the final module data properties.\n\t * @param root The root directory to add.\n\t * @param data The module data returned from {@link ILoaderStrategy.filter}.\n\t * @returns The finished module data.\n\t */\n\tprivate hydrateModuleData(root: string, data: ModuleData): HydratedModuleData {\n\t\treturn { root, ...data };\n\t}\n\n\t/**\n\t * Loads a directory into the store.\n\t * @param root The directory to load the pieces from.\n\t * @return An async iterator that yields the pieces to be loaded into the store.\n\t */\n\tprivate async *loadPath(root: string): AsyncIterableIterator<T> {\n\t\tStore.logger?.(`[STORE => ${this.name}] [WALK] Loading all pieces from '${root}'.`);\n\t\tfor await (const child of this.#walk(this, root, Store.logger)) {\n\t\t\tconst data = this.strategy.filter(child);\n\t\t\tif (data === null) {\n\t\t\t\tStore.logger?.(`[STORE => ${this.name}] [LOAD] Skipped piece '${child}' as 'LoaderStrategy#filter' returned 'null'.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst finishedData = this.hydrateModuleData(root, data);\n\t\t\t\tfor await (const Ctor of this.strategy.load(this, finishedData)) {\n\t\t\t\t\tyield this.construct(Ctor, finishedData);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tthis.strategy.onError(error as Error, data.path);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * The default strategy, defaults to {@link LoaderStrategy}, which is constructed on demand when a store is constructed,\n\t * when none was set beforehand.\n\t */\n\tpublic static defaultStrategy: ILoaderStrategy<any> = defaultStrategy;\n\n\t/**\n\t * The default logger, defaults to `null`.\n\t */\n\tpublic static logger: StoreLogger | null = null;\n}\n\n/**\n * An entry for a manually registered piece using {@linkcode Store.loadPiece()}.\n * @since 3.8.0\n */\nexport interface StoreManuallyRegisteredPiece<StoreName extends StoreRegistryKey> {\n\tname: string;\n\tpiece: StoreRegistryEntries[StoreName] extends Store<infer Piece> ? Constructor<Piece> : never;\n}\n\nexport namespace Store {\n\texport const Registry = StoreRegistry;\n\texport type Options<T extends Piece> = StoreOptions<T>;\n\texport type Logger = StoreLogger;\n\texport type RegistryEntries = StoreRegistryEntries;\n}\n"]}