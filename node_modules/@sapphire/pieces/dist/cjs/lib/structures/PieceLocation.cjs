'use strict';

var path = require('path');
var constants_cjs = require('../internal/constants.cjs');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var _PieceLocation = class _PieceLocation {
  /**
   * @param full The full path to the file.
   * @param root The root directory the file was found from.
   */
  constructor(full, root) {
    /**
     * The full path to the file.
     */
    __publicField(this, "full");
    /**
     * The root directory the file was found from.
     */
    __publicField(this, "root");
    this.full = full;
    this.root = root;
  }
  /**
   * Whether the file is virtual or not.
   */
  get virtual() {
    return this.full === constants_cjs.VirtualPath;
  }
  /**
   * The relative path between {@link PieceLocation.root} and {@link PieceLocation.full}.
   * @example
   * ```typescript
   * const location = new PieceLocation(
   * 	'/usr/src/app/commands',
   * 	'/usr/src/app/commands/general/ping.js'
   * );
   *
   * console.log(location.relative);
   * // → 'general/ping.js'
   * ```
   */
  get relative() {
    return this.virtual ? constants_cjs.VirtualPath : path.relative(this.root, this.full);
  }
  /**
   * The names of the directories that separate {@link PieceLocation.root} and {@link PieceLocation.full}.
   * @example
   * ```typescript
   * const location = new PieceLocation(
   * 	'/usr/src/app/commands',
   * 	'/usr/src/app/commands/games/multiplayer/connect-four.js'
   * );
   *
   * console.log(location.directories);
   * // → ['games', 'multiplayer']
   * ```
   */
  get directories() {
    return this.virtual ? [] : this.relative.split(path.sep).slice(0, -1);
  }
  /**
   * The name and extension of the file that was loaded, extracted from {@link PieceLocation.full}.
   * @example
   * ```typescript
   * const location = new PieceLocation(
   * 	'/usr/src/app/commands',
   * 	'/usr/src/app/commands/games/multiplayer/connect-four.js'
   * );
   *
   * console.log(location.name);
   * // → 'connect-four.js'
   * ```
   */
  get name() {
    return this.virtual ? constants_cjs.VirtualPath : path.basename(this.full);
  }
  /**
   * Defines the `JSON.stringify` behavior of this structure.
   */
  toJSON() {
    return {
      directories: this.directories,
      full: this.full,
      name: this.name,
      relative: this.relative,
      root: this.root
    };
  }
};
__name(_PieceLocation, "PieceLocation");
var PieceLocation = _PieceLocation;

exports.PieceLocation = PieceLocation;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=PieceLocation.cjs.map