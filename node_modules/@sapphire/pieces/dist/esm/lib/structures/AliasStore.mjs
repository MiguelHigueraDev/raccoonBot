import { __name, __publicField } from '../../chunk-LIQV5WSN.mjs';
import { Collection } from '@discordjs/collection';
import { Store } from './Store.mjs';

var _AliasStore = class _AliasStore extends Store {
  constructor() {
    super(...arguments);
    /**
     * The aliases referencing to pieces.
     */
    __publicField(this, "aliases", new Collection());
  }
  /**
   * Looks up the name by the store, falling back to an alias lookup.
   * @param key The key to look for.
   */
  get(key) {
    return super.get(key) ?? this.aliases.get(key);
  }
  /**
   * Checks whether a key is in the store, or is an alias
   * @param key The key to check
   */
  has(key) {
    return super.has(key) || this.aliases.has(key);
  }
  /**
   * Unloads a piece given its instance or its name, and removes all the aliases.
   * @param name The name of the file to load.
   * @return Returns the piece that was unloaded.
   */
  unload(name) {
    const piece = this.resolve(name);
    for (const alias of piece.aliases) {
      const aliasPiece = this.aliases.get(alias);
      if (aliasPiece === piece)
        this.aliases.delete(alias);
    }
    return super.unload(piece);
  }
  /**
   * Inserts a piece into the store, and adds all the aliases.
   * @param piece The piece to be inserted into the store.
   * @return The inserted piece.
   */
  async insert(piece) {
    for (const key of piece.aliases) {
      this.aliases.set(key, piece);
    }
    return super.insert(piece);
  }
};
__name(_AliasStore, "AliasStore");
var AliasStore = _AliasStore;

export { AliasStore };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=AliasStore.mjs.map