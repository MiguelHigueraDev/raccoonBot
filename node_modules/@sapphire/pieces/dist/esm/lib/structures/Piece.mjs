import { __name, __publicField } from '../../chunk-LIQV5WSN.mjs';
import { container } from '../shared/Container.mjs';
import { PieceLocation } from './PieceLocation.mjs';

var _Piece = class _Piece {
  constructor(context, options = {}) {
    /**
     * The store that contains the piece.
     */
    __publicField(this, "store");
    /**
     * The location metadata for the piece's file.
     */
    __publicField(this, "location");
    /**
     * The name of the piece.
     */
    __publicField(this, "name");
    /**
     * Whether or not the piece is enabled.
     */
    __publicField(this, "enabled");
    /**
     * The raw options passed to this {@link Piece}
     */
    __publicField(this, "options");
    this.store = context.store;
    this.location = new PieceLocation(context.path, context.root);
    this.name = options.name ?? context.name;
    this.enabled = options.enabled ?? true;
    this.options = options;
  }
  /**
   * A reference to the {@link Container} object for ease of use.
   * @see container
   */
  get container() {
    return container;
  }
  /**
   * Per-piece listener that is called when the piece is loaded into the store.
   * Useful to set-up asynchronous initialization tasks.
   */
  onLoad() {
    return void 0;
  }
  /**
   * Per-piece listener that is called when the piece is unloaded from the store.
   * Useful to set-up clean-up tasks.
   */
  onUnload() {
    return void 0;
  }
  /**
   * Unloads and disables the piece.
   */
  async unload() {
    await this.store.unload(this.name);
    this.enabled = false;
  }
  /**
   * Reloads the piece by loading the same path in the store.
   */
  async reload() {
    await this.store.load(this.location.root, this.location.relative);
  }
  /**
   * Defines the `JSON.stringify` behavior of this piece.
   */
  toJSON() {
    return {
      location: this.location.toJSON(),
      name: this.name,
      enabled: this.enabled,
      options: this.options
    };
  }
};
__name(_Piece, "Piece");
var Piece = _Piece;
((Piece2) => {
  Piece2.Location = PieceLocation;
})(Piece || (Piece = {}));

export { Piece };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=Piece.mjs.map