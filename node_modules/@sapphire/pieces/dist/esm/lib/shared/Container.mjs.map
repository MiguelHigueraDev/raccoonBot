{"version":3,"sources":["../../../../src/lib/shared/Container.ts"],"names":[],"mappings":";;;AAAA,SAAS,qBAAqB;AA6EvB,IAAM,YAAuB;AAAA,EACnC,QAAQ,IAAI,cAAc;AAC3B","sourcesContent":["import { StoreRegistry } from '../structures/StoreRegistry';\n\n/**\n * Represents the type of the properties injected into the container, which is available at {@link container}.\n *\n * Because Sapphire works as a standalone framework (independent of external libraries), there is a need to pass data\n * from one place to another, which would vary depending on the user and their use-cases.\n *\n * Furthermore, plugins may use this structure to add properties referencing to the plugin's objects so they can be\n * accessed by both the user and the plugin at any moment and at any place.\n *\n * Finally, both library developers and bot developers should augment the Container interface from this module using\n * [module augmentation](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation).\n */\nexport interface Container {\n\tstores: StoreRegistry;\n}\n\n/**\n * The injected variables that will be accessible to any place. To add an extra property, simply add a property with a\n * regular assignment, and it will be available in all places simultaneously.\n *\n * @example\n * ```typescript\n * // Add a reference for the version:\n * import { container } from '@sapphire/pieces';\n *\n * container.version = '1.0.0';\n *\n * // Can be placed anywhere in a TypeScript file, for JavaScript projects,\n * // you can create an `augments.d.ts` and place the code there.\n * declare module '@sapphire/pieces' {\n *   interface Container {\n *     version: string;\n *   }\n * }\n *\n * // In any piece, core, plugin, or custom:\n * export class UserCommand extends Command {\n *   public run(message, args) {\n *     // The injected version is available here:\n *     const { version } = this.container;\n *\n *     // ...\n *   }\n * }\n * ```\n *\n * @example\n * ```typescript\n * // In a plugin's context, e.g. API:\n * class Api extends Plugin {\n *   static [postInitialization]() {\n *     const server = new Server(this);\n *     container.server = server;\n *\n *     // ...\n *   }\n * }\n *\n * declare module '@sapphire/pieces' {\n *   interface Container {\n *     server: Server;\n *   }\n * }\n *\n * // In any piece, even those that aren't routes nor middlewares:\n * export class UserRoute extends Route {\n *   public [methods.POST](message, args) {\n *     // The injected server is available here:\n *     const { server } = this.container;\n *\n *     // ...\n *   }\n * }\n * ```\n */\nexport const container: Container = {\n\tstores: new StoreRegistry()\n};\n"]}