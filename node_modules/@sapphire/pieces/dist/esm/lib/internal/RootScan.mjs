import { __name } from '../../chunk-LIQV5WSN.mjs';
import { readFileSync } from 'fs';
import { dirname, join } from 'path';

var data = null;
function dirnameWithPath(cwd, joinablePath) {
  return dirname(join(cwd, joinablePath));
}
__name(dirnameWithPath, "dirnameWithPath");
function getRootData() {
  return data ??= parseRootData();
}
__name(getRootData, "getRootData");
function parseRootData() {
  const cwd = process.cwd();
  let file;
  try {
    file = JSON.parse(readFileSync(join(cwd, "package.json"), "utf8"));
  } catch (error) {
    return { root: cwd, type: "CommonJS" };
  }
  const { main: packageMain, module: packageModule, type: packageType } = file;
  const lowerCasedType = packageType?.toLowerCase();
  if (lowerCasedType === "commonjs") {
    if (packageMain)
      return { root: dirnameWithPath(cwd, packageMain), type: "CommonJS" };
    if (packageModule)
      return { root: dirnameWithPath(cwd, packageModule), type: "CommonJS" };
    return { root: cwd, type: "CommonJS" };
  }
  if (lowerCasedType === "module") {
    if (packageMain)
      return { root: dirnameWithPath(cwd, packageMain), type: "ESM" };
    if (packageModule)
      return { root: dirnameWithPath(cwd, packageModule), type: "ESM" };
    return { root: cwd, type: "ESM" };
  }
  if (packageMain)
    return { root: dirnameWithPath(cwd, packageMain), type: "CommonJS" };
  if (packageModule)
    return { root: dirnameWithPath(cwd, packageModule), type: "ESM" };
  return { root: cwd, type: "CommonJS" };
}
__name(parseRootData, "parseRootData");

export { getRootData, parseRootData };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=RootScan.mjs.map