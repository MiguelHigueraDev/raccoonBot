{"version":3,"sources":["../../../../src/listeners/application-commands/CorePossibleAutocompleteInteraction.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,iBAAiB;AAE1B,SAAS,gBAAgB;AAEzB,SAAS,cAAc;AAEhB,IAAM,gBAAN,MAAM,sBAAqB,SAAwD;AAAA,EAClF,YAAY,SAAiC;AACnD,UAAM,SAAS,EAAE,OAAO,OAAO,gCAAgC,CAAC;AAAA,EACjE;AAAA,EAEA,MAAa,IAAI,aAAsC;AACtD,UAAM,EAAE,OAAO,IAAI,KAAK;AAExB,UAAM,eAAe,OAAO,IAAI,UAAU;AAG1C,UAAM,UAAU,aAAa,IAAI,YAAY,SAAS,KAAK,aAAa,IAAI,YAAY,WAAW;AAEnG,QAAI,SAAS,iBAAiB;AAC7B,UAAI;AACH,cAAM,QAAQ,gBAAgB,WAAW;AACzC,aAAK,UAAU,OAAO,KAAK,OAAO,uCAAuC;AAAA,UACxE;AAAA,UACA,SAAS,EAAE,WAAW,YAAY,WAAW,aAAa,YAAY,YAAY;AAAA,UAClF;AAAA,QACD,CAAC;AAAA,MACF,SAAS,KAAK;AACb,aAAK,UAAU,OAAO,KAAK,OAAO,qCAAqC,KAAK;AAAA,UAC3E;AAAA,UACA,SAAS,EAAE,WAAW,YAAY,WAAW,aAAa,YAAY,YAAY;AAAA,UAClF;AAAA,QACD,CAAC;AAAA,MACF;AACA;AAAA,IACD;AAGA,UAAM,KAAK,UAAU,OAAO,IAAI,sBAAsB,EAAE,IAAI,WAAW;AAAA,EACxE;AACD;AAlC0F;AAAnF,IAAM,eAAN;AAoCP,KAAK,UAAU,OAAO,UAAU;AAAA,EAC/B,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AACR,CAAC","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { AutocompleteInteraction } from 'discord.js';\nimport { Listener } from '../../lib/structures/Listener';\nimport type { AutocompleteCommand } from '../../lib/types/CommandTypes';\nimport { Events } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PossibleAutocompleteInteraction> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.PossibleAutocompleteInteraction });\n\t}\n\n\tpublic async run(interaction: AutocompleteInteraction) {\n\t\tconst { stores } = this.container;\n\n\t\tconst commandStore = stores.get('commands');\n\n\t\t// Try resolving in command\n\t\tconst command = commandStore.get(interaction.commandId) ?? commandStore.get(interaction.commandName);\n\n\t\tif (command?.autocompleteRun) {\n\t\t\ttry {\n\t\t\t\tawait command.autocompleteRun(interaction);\n\t\t\t\tthis.container.client.emit(Events.CommandAutocompleteInteractionSuccess, {\n\t\t\t\t\tcommand: command as AutocompleteCommand,\n\t\t\t\t\tcontext: { commandId: interaction.commandId, commandName: interaction.commandName },\n\t\t\t\t\tinteraction\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tthis.container.client.emit(Events.CommandAutocompleteInteractionError, err, {\n\t\t\t\t\tcommand: command as AutocompleteCommand,\n\t\t\t\t\tcontext: { commandId: interaction.commandId, commandName: interaction.commandName },\n\t\t\t\t\tinteraction\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Unless we ran a command handler, always call interaction handlers with the interaction\n\t\tawait this.container.stores.get('interaction-handlers').run(interaction);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'CorePossibleAutocompleteInteraction',\n\tpiece: CoreListener,\n\tstore: 'listeners'\n});\n"]}