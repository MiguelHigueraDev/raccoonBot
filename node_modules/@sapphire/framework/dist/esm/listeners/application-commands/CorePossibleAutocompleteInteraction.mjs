import { __name } from '../../chunk-G5GHKT7C.mjs';
import { container } from '@sapphire/pieces';
import { Listener } from '../../lib/structures/Listener.mjs';
import { Events } from '../../lib/types/Events.mjs';

var _CoreListener = class _CoreListener extends Listener {
  constructor(context) {
    super(context, { event: Events.PossibleAutocompleteInteraction });
  }
  async run(interaction) {
    const { stores } = this.container;
    const commandStore = stores.get("commands");
    const command = commandStore.get(interaction.commandId) ?? commandStore.get(interaction.commandName);
    if (command?.autocompleteRun) {
      try {
        await command.autocompleteRun(interaction);
        this.container.client.emit(Events.CommandAutocompleteInteractionSuccess, {
          command,
          context: { commandId: interaction.commandId, commandName: interaction.commandName },
          interaction
        });
      } catch (err) {
        this.container.client.emit(Events.CommandAutocompleteInteractionError, err, {
          command,
          context: { commandId: interaction.commandId, commandName: interaction.commandName },
          interaction
        });
      }
      return;
    }
    await this.container.stores.get("interaction-handlers").run(interaction);
  }
};
__name(_CoreListener, "CoreListener");
var CoreListener = _CoreListener;
void container.stores.loadPiece({
  name: "CorePossibleAutocompleteInteraction",
  piece: CoreListener,
  store: "listeners"
});

export { CoreListener };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=CorePossibleAutocompleteInteraction.mjs.map