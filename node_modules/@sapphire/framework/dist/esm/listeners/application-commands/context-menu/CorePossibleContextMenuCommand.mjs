import { __name } from '../../../chunk-G5GHKT7C.mjs';
import { container } from '@sapphire/pieces';
import { Listener } from '../../../lib/structures/Listener.mjs';
import { Events } from '../../../lib/types/Events.mjs';

var _CoreListener = class _CoreListener extends Listener {
  constructor(context) {
    super(context, { event: Events.PossibleContextMenuCommand });
  }
  run(interaction) {
    const { client, stores } = this.container;
    const commandStore = stores.get("commands");
    const command = commandStore.get(interaction.commandId) ?? commandStore.get(interaction.commandName);
    if (!command) {
      client.emit(Events.UnknownContextMenuCommand, {
        interaction,
        context: { commandId: interaction.commandId, commandName: interaction.commandName }
      });
      return;
    }
    if (!command.contextMenuRun) {
      client.emit(Events.CommandDoesNotHaveContextMenuCommandHandler, {
        command,
        interaction,
        context: { commandId: interaction.commandId, commandName: interaction.commandName }
      });
      return;
    }
    client.emit(Events.PreContextMenuCommandRun, {
      command,
      context: { commandId: interaction.commandId, commandName: interaction.commandName },
      interaction
    });
  }
};
__name(_CoreListener, "CoreListener");
var CoreListener = _CoreListener;
void container.stores.loadPiece({
  name: "CorePossibleContextMenuCommand",
  piece: CoreListener,
  store: "listeners"
});

export { CoreListener };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=CorePossibleContextMenuCommand.mjs.map