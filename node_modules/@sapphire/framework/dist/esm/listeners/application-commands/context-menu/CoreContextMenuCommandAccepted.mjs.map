{"version":3,"sources":["../../../../../src/listeners/application-commands/context-menu/CoreContextMenuCommandAccepted.ts"],"names":["result"],"mappings":";;;;;AAAA,SAAS,iBAAiB;AAC1B,SAAS,cAAc;AACvB,SAAS,iBAAiB;AAC1B,SAAS,gBAAgB;AACzB,SAAS,cAAsD;AAExD,IAAM,gBAAN,MAAM,sBAAqB,SAAmD;AAAA,EAC7E,YAAY,SAAiC;AACnD,UAAM,SAAS,EAAE,OAAO,OAAO,2BAA2B,CAAC;AAAA,EAC5D;AAAA,EAEA,MAAa,IAAI,SAA4C;AAC5D,UAAM,EAAE,SAAS,SAAS,YAAY,IAAI;AAE1C,UAAM,SAAS,MAAM,OAAO,UAAU,YAAY;AACjD,WAAK,UAAU,OAAO,KAAK,OAAO,uBAAuB,aAAa,SAAS,EAAE,GAAG,QAAQ,CAAC;AAE7F,YAAM,YAAY,IAAI,UAAU;AAChC,YAAMA,UAAS,MAAM,QAAQ,eAAe,aAAa,OAAO;AAChE,YAAM,EAAE,SAAS,IAAI,UAAU,KAAK;AAEpC,WAAK,UAAU,OAAO,KAAK,OAAO,2BAA2B,EAAE,GAAG,SAAS,QAAAA,SAAQ,SAAS,CAAC;AAE7F,aAAO;AAAA,IACR,CAAC;AAED,WAAO,WAAW,CAAC,UAAU,KAAK,UAAU,OAAO,KAAK,OAAO,yBAAyB,OAAO,EAAE,GAAG,SAAS,UAAU,GAAG,CAAC,CAAC;AAE5H,SAAK,UAAU,OAAO,KAAK,OAAO,0BAA0B,aAAa,SAAS;AAAA,MACjF,GAAG;AAAA,MACH,SAAS,OAAO,KAAK;AAAA,MACrB,UAAU,OAAO,SAAS,EAAE;AAAA,IAC7B,CAAC;AAAA,EACF;AACD;AA5BqF;AAA9E,IAAM,eAAN;AA8BP,KAAK,UAAU,OAAO,UAAU;AAAA,EAC/B,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AACR,CAAC","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { Result } from '@sapphire/result';\nimport { Stopwatch } from '@sapphire/stopwatch';\nimport { Listener } from '../../../lib/structures/Listener';\nimport { Events, type ContextMenuCommandAcceptedPayload } from '../../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.ContextMenuCommandAccepted> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.ContextMenuCommandAccepted });\n\t}\n\n\tpublic async run(payload: ContextMenuCommandAcceptedPayload) {\n\t\tconst { command, context, interaction } = payload;\n\n\t\tconst result = await Result.fromAsync(async () => {\n\t\t\tthis.container.client.emit(Events.ContextMenuCommandRun, interaction, command, { ...payload });\n\n\t\t\tconst stopwatch = new Stopwatch();\n\t\t\tconst result = await command.contextMenuRun(interaction, context);\n\t\t\tconst { duration } = stopwatch.stop();\n\n\t\t\tthis.container.client.emit(Events.ContextMenuCommandSuccess, { ...payload, result, duration });\n\n\t\t\treturn duration;\n\t\t});\n\n\t\tresult.inspectErr((error) => this.container.client.emit(Events.ContextMenuCommandError, error, { ...payload, duration: -1 }));\n\n\t\tthis.container.client.emit(Events.ContextMenuCommandFinish, interaction, command, {\n\t\t\t...payload,\n\t\t\tsuccess: result.isOk(),\n\t\t\tduration: result.unwrapOr(-1)\n\t\t});\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'CoreContextMenuCommandAccepted',\n\tpiece: CoreListener,\n\tstore: 'listeners'\n});\n"]}