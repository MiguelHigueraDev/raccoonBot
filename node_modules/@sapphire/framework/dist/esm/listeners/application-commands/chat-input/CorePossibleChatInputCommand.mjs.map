{"version":3,"sources":["../../../../../src/listeners/application-commands/chat-input/CorePossibleChatInputCommand.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,iBAAiB;AAE1B,SAAS,gBAAgB;AAEzB,SAAS,cAAc;AAEhB,IAAM,gBAAN,MAAM,sBAAqB,SAAiD;AAAA,EAC3E,YAAY,SAAiC;AACnD,UAAM,SAAS,EAAE,OAAO,OAAO,yBAAyB,CAAC;AAAA,EAC1D;AAAA,EAEO,IAAI,aAA0C;AACpD,UAAM,EAAE,QAAQ,OAAO,IAAI,KAAK;AAChC,UAAM,eAAe,OAAO,IAAI,UAAU;AAE1C,UAAM,UAAU,aAAa,IAAI,YAAY,SAAS,KAAK,aAAa,IAAI,YAAY,WAAW;AACnG,QAAI,CAAC,SAAS;AACb,aAAO,KAAK,OAAO,yBAAyB;AAAA,QAC3C;AAAA,QACA,SAAS,EAAE,WAAW,YAAY,WAAW,aAAa,YAAY,YAAY;AAAA,MACnF,CAAC;AACD;AAAA,IACD;AAEA,QAAI,CAAC,QAAQ,cAAc;AAC1B,aAAO,KAAK,OAAO,2CAA2C;AAAA,QAC7D;AAAA,QACA;AAAA,QACA,SAAS,EAAE,WAAW,YAAY,WAAW,aAAa,YAAY,YAAY;AAAA,MACnF,CAAC;AACD;AAAA,IACD;AAEA,WAAO,KAAK,OAAO,wBAAwB;AAAA,MAC1C;AAAA,MACA,SAAS,EAAE,WAAW,YAAY,WAAW,aAAa,YAAY,YAAY;AAAA,MAClF;AAAA,IACD,CAAC;AAAA,EACF;AACD;AAjCmF;AAA5E,IAAM,eAAN;AAmCP,KAAK,UAAU,OAAO,UAAU;AAAA,EAC/B,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AACR,CAAC","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { ChatInputCommandInteraction } from 'discord.js';\nimport { Listener } from '../../../lib/structures/Listener';\nimport type { ChatInputCommand } from '../../../lib/types/CommandTypes';\nimport { Events } from '../../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PossibleChatInputCommand> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.PossibleChatInputCommand });\n\t}\n\n\tpublic run(interaction: ChatInputCommandInteraction) {\n\t\tconst { client, stores } = this.container;\n\t\tconst commandStore = stores.get('commands');\n\n\t\tconst command = commandStore.get(interaction.commandId) ?? commandStore.get(interaction.commandName);\n\t\tif (!command) {\n\t\t\tclient.emit(Events.UnknownChatInputCommand, {\n\t\t\t\tinteraction,\n\t\t\t\tcontext: { commandId: interaction.commandId, commandName: interaction.commandName }\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (!command.chatInputRun) {\n\t\t\tclient.emit(Events.CommandDoesNotHaveChatInputCommandHandler, {\n\t\t\t\tcommand,\n\t\t\t\tinteraction,\n\t\t\t\tcontext: { commandId: interaction.commandId, commandName: interaction.commandName }\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tclient.emit(Events.PreChatInputCommandRun, {\n\t\t\tcommand: command as ChatInputCommand,\n\t\t\tcontext: { commandId: interaction.commandId, commandName: interaction.commandName },\n\t\t\tinteraction\n\t\t});\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'CorePossibleChatInputCommand',\n\tpiece: CoreListener,\n\tstore: 'listeners'\n});\n"]}