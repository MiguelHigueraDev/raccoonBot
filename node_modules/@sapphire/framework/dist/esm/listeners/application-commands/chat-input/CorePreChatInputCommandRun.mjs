import { __name } from '../../../chunk-G5GHKT7C.mjs';
import { container } from '@sapphire/pieces';
import { Listener } from '../../../lib/structures/Listener.mjs';
import { Events } from '../../../lib/types/Events.mjs';

var _CoreListener = class _CoreListener extends Listener {
  constructor(context) {
    super(context, { event: Events.PreChatInputCommandRun });
  }
  async run(payload) {
    const { command, interaction } = payload;
    const globalResult = await this.container.stores.get("preconditions").chatInputRun(interaction, command, payload);
    if (globalResult.isErr()) {
      this.container.client.emit(Events.ChatInputCommandDenied, globalResult.unwrapErr(), payload);
      return;
    }
    const localResult = await command.preconditions.chatInputRun(interaction, command, payload);
    if (localResult.isErr()) {
      this.container.client.emit(Events.ChatInputCommandDenied, localResult.unwrapErr(), payload);
      return;
    }
    this.container.client.emit(Events.ChatInputCommandAccepted, payload);
  }
};
__name(_CoreListener, "CoreListener");
var CoreListener = _CoreListener;
void container.stores.loadPiece({
  name: "CorePreChatInputCommandRun",
  piece: CoreListener,
  store: "listeners"
});

export { CoreListener };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=CorePreChatInputCommandRun.mjs.map