{"version":3,"sources":["../../../../../src/listeners/application-commands/chat-input/CoreChatInputCommandAccepted.ts"],"names":["result"],"mappings":";;;;;AAAA,SAAS,iBAAiB;AAC1B,SAAS,cAAc;AACvB,SAAS,iBAAiB;AAC1B,SAAS,gBAAgB;AACzB,SAAS,cAAoD;AAEtD,IAAM,gBAAN,MAAM,sBAAqB,SAAiD;AAAA,EAC3E,YAAY,SAAiC;AACnD,UAAM,SAAS,EAAE,OAAO,OAAO,yBAAyB,CAAC;AAAA,EAC1D;AAAA,EAEA,MAAa,IAAI,SAA0C;AAC1D,UAAM,EAAE,SAAS,SAAS,YAAY,IAAI;AAE1C,UAAM,SAAS,MAAM,OAAO,UAAU,YAAY;AACjD,WAAK,UAAU,OAAO,KAAK,OAAO,qBAAqB,aAAa,SAAS,EAAE,GAAG,QAAQ,CAAC;AAE3F,YAAM,YAAY,IAAI,UAAU;AAChC,YAAMA,UAAS,MAAM,QAAQ,aAAa,aAAa,OAAO;AAC9D,YAAM,EAAE,SAAS,IAAI,UAAU,KAAK;AAEpC,WAAK,UAAU,OAAO,KAAK,OAAO,yBAAyB,EAAE,GAAG,SAAS,QAAAA,SAAQ,SAAS,CAAC;AAE3F,aAAO;AAAA,IACR,CAAC;AAED,WAAO,WAAW,CAAC,UAAU,KAAK,UAAU,OAAO,KAAK,OAAO,uBAAuB,OAAO,EAAE,GAAG,SAAS,UAAU,GAAG,CAAC,CAAC;AAE1H,SAAK,UAAU,OAAO,KAAK,OAAO,wBAAwB,aAAa,SAAS;AAAA,MAC/E,GAAG;AAAA,MACH,SAAS,OAAO,KAAK;AAAA,MACrB,UAAU,OAAO,SAAS,EAAE;AAAA,IAC7B,CAAC;AAAA,EACF;AACD;AA5BmF;AAA5E,IAAM,eAAN;AA8BP,KAAK,UAAU,OAAO,UAAU;AAAA,EAC/B,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AACR,CAAC","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { Result } from '@sapphire/result';\nimport { Stopwatch } from '@sapphire/stopwatch';\nimport { Listener } from '../../../lib/structures/Listener';\nimport { Events, type ChatInputCommandAcceptedPayload } from '../../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.ChatInputCommandAccepted> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.ChatInputCommandAccepted });\n\t}\n\n\tpublic async run(payload: ChatInputCommandAcceptedPayload) {\n\t\tconst { command, context, interaction } = payload;\n\n\t\tconst result = await Result.fromAsync(async () => {\n\t\t\tthis.container.client.emit(Events.ChatInputCommandRun, interaction, command, { ...payload });\n\n\t\t\tconst stopwatch = new Stopwatch();\n\t\t\tconst result = await command.chatInputRun(interaction, context);\n\t\t\tconst { duration } = stopwatch.stop();\n\n\t\t\tthis.container.client.emit(Events.ChatInputCommandSuccess, { ...payload, result, duration });\n\n\t\t\treturn duration;\n\t\t});\n\n\t\tresult.inspectErr((error) => this.container.client.emit(Events.ChatInputCommandError, error, { ...payload, duration: -1 }));\n\n\t\tthis.container.client.emit(Events.ChatInputCommandFinish, interaction, command, {\n\t\t\t...payload,\n\t\t\tsuccess: result.isOk(),\n\t\t\tduration: result.unwrapOr(-1)\n\t\t});\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'CoreChatInputCommandAccepted',\n\tpiece: CoreListener,\n\tstore: 'listeners'\n});\n"]}