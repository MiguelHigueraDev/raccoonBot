import { __name } from '../../../chunk-G5GHKT7C.mjs';
import { container } from '@sapphire/pieces';
import { Result } from '@sapphire/result';
import { Stopwatch } from '@sapphire/stopwatch';
import { Listener } from '../../../lib/structures/Listener.mjs';
import { Events } from '../../../lib/types/Events.mjs';

var _CoreListener = class _CoreListener extends Listener {
  constructor(context) {
    super(context, { event: Events.ChatInputCommandAccepted });
  }
  async run(payload) {
    const { command, context, interaction } = payload;
    const result = await Result.fromAsync(async () => {
      this.container.client.emit(Events.ChatInputCommandRun, interaction, command, { ...payload });
      const stopwatch = new Stopwatch();
      const result2 = await command.chatInputRun(interaction, context);
      const { duration } = stopwatch.stop();
      this.container.client.emit(Events.ChatInputCommandSuccess, { ...payload, result: result2, duration });
      return duration;
    });
    result.inspectErr((error) => this.container.client.emit(Events.ChatInputCommandError, error, { ...payload, duration: -1 }));
    this.container.client.emit(Events.ChatInputCommandFinish, interaction, command, {
      ...payload,
      success: result.isOk(),
      duration: result.unwrapOr(-1)
    });
  }
};
__name(_CoreListener, "CoreListener");
var CoreListener = _CoreListener;
void container.stores.loadPiece({
  name: "CoreChatInputCommandAccepted",
  piece: CoreListener,
  store: "listeners"
});

export { CoreListener };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=CoreChatInputCommandAccepted.mjs.map