import { __name } from '../../chunk-G5GHKT7C.mjs';
import { isDMChannel } from '@sapphire/discord.js-utilities';
import { PermissionsBitField, PermissionFlagsBits } from 'discord.js';
import { Listener } from '../../lib/structures/Listener.mjs';
import { Events } from '../../lib/types/Events.mjs';

var _CoreListener = class _CoreListener extends Listener {
  constructor(context) {
    super(context, { event: Events.PreMessageParsed });
    this.requiredPermissions = new PermissionsBitField([PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages]).freeze();
  }
  async run(message) {
    const canRun = await this.canRunInChannel(message);
    if (!canRun)
      return;
    let prefix = null;
    const mentionPrefix = this.getMentionPrefix(message);
    const { client } = this.container;
    const { regexPrefix } = client.options;
    if (mentionPrefix) {
      if (message.content.length === mentionPrefix.length) {
        client.emit(Events.MentionPrefixOnly, message);
        return;
      }
      prefix = mentionPrefix;
    } else if (regexPrefix?.test(message.content)) {
      prefix = regexPrefix;
    } else {
      const prefixes = await client.fetchPrefix(message);
      const parsed = this.getPrefix(message.content, prefixes);
      if (parsed !== null)
        prefix = parsed;
    }
    if (prefix === null)
      client.emit(Events.NonPrefixedMessage, message);
    else
      client.emit(Events.PrefixedMessage, message, prefix);
  }
  async canRunInChannel(message) {
    if (isDMChannel(message.channel))
      return true;
    const me = await message.guild?.members.fetchMe();
    if (!me)
      return false;
    const { channel } = message;
    const permissionsFor = channel.permissionsFor(me);
    if (!permissionsFor)
      return false;
    return permissionsFor.has(this.requiredPermissions, true);
  }
  getMentionPrefix(message) {
    if (this.container.client.disableMentionPrefix)
      return null;
    if (message.content.length < 20 || !message.content.startsWith("<@"))
      return null;
    const [offset, id] = message.content[2] === "&" ? [3, message.guild?.roles.botRoleFor(this.container.client.id)?.id] : [message.content[2] === "!" ? 3 : 2, this.container.client.id];
    if (!id)
      return null;
    const offsetWithId = offset + id.length;
    if (message.content[offsetWithId] !== ">")
      return null;
    const mentionId = message.content.substring(offset, offsetWithId);
    if (mentionId === id)
      return message.content.substring(0, offsetWithId + 1);
    return null;
  }
  getPrefix(content, prefixes) {
    if (prefixes === null)
      return null;
    const { caseInsensitivePrefixes } = this.container.client.options;
    if (caseInsensitivePrefixes)
      content = content.toLowerCase();
    if (typeof prefixes === "string") {
      return content.startsWith(caseInsensitivePrefixes ? prefixes.toLowerCase() : prefixes) ? prefixes : null;
    }
    return prefixes.find((prefix) => content.startsWith(caseInsensitivePrefixes ? prefix.toLowerCase() : prefix)) ?? null;
  }
};
__name(_CoreListener, "CoreListener");
var CoreListener = _CoreListener;

export { CoreListener };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=CorePreMessageParser.mjs.map