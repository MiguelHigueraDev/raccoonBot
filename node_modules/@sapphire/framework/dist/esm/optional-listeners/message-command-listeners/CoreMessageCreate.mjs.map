{"version":3,"sources":["../../../../src/optional-listeners/message-command-listeners/CoreMessageCreate.ts"],"names":[],"mappings":";;;;;AACA,SAAS,gBAAgB;AACzB,SAAS,cAAc;AAEhB,IAAM,gBAAN,MAAM,sBAAqB,SAAsC;AAAA,EAChE,YAAY,SAAiC;AACnD,UAAM,SAAS,EAAE,OAAO,OAAO,cAAc,CAAC;AAAA,EAC/C;AAAA,EAEO,IAAI,SAAkB;AAE5B,QAAI,QAAQ,OAAO,OAAO,QAAQ;AAAW;AAG7C,SAAK,UAAU,OAAO,KAAK,OAAO,kBAAkB,OAAO;AAAA,EAC5D;AACD;AAZwE;AAAjE,IAAM,eAAN","sourcesContent":["import type { Message } from 'discord.js';\nimport { Listener } from '../../lib/structures/Listener';\nimport { Events } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.MessageCreate> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.MessageCreate });\n\t}\n\n\tpublic run(message: Message) {\n\t\t// Stop bots and webhooks from running commands.\n\t\tif (message.author.bot || message.webhookId) return;\n\n\t\t// Run the message parser.\n\t\tthis.container.client.emit(Events.PreMessageParsed, message);\n\t}\n}\n"]}