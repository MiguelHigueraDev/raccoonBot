import { __name } from '../../chunk-G5GHKT7C.mjs';
import { Result } from '@sapphire/result';
import { Stopwatch } from '@sapphire/stopwatch';
import { Listener } from '../../lib/structures/Listener.mjs';
import { Events } from '../../lib/types/Events.mjs';

var _CoreListener = class _CoreListener extends Listener {
  constructor(context) {
    super(context, { event: Events.MessageCommandAccepted });
  }
  async run(payload) {
    const { message, command, parameters, context } = payload;
    const args = await command.messagePreParse(message, parameters, context);
    const result = await Result.fromAsync(async () => {
      message.client.emit(Events.MessageCommandRun, message, command, { ...payload, args });
      const stopwatch = new Stopwatch();
      const result2 = await command.messageRun(message, args, context);
      const { duration } = stopwatch.stop();
      message.client.emit(Events.MessageCommandSuccess, { ...payload, args, result: result2, duration });
      return duration;
    });
    result.inspectErr((error) => message.client.emit(Events.MessageCommandError, error, { ...payload, args, duration: -1 }));
    message.client.emit(Events.MessageCommandFinish, message, command, {
      ...payload,
      args,
      success: result.isOk(),
      duration: result.unwrapOr(-1)
    });
  }
};
__name(_CoreListener, "CoreListener");
var CoreListener = _CoreListener;

export { CoreListener };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=CoreMessageCommandAccepted.mjs.map