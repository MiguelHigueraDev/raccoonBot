{"version":3,"sources":["../../../../src/lib/precondition-resolvers/clientPermissions.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,2BAAsD;AAC/D,SAAS,4BAA4B;AAS9B,SAAS,uDACf,2BACA,4BACC;AACD,QAAM,cAAc,IAAI,oBAAoB,yBAAyB;AACrE,MAAI,YAAY,aAAa,IAAI;AAChC,+BAA2B,OAAO,EAAE,MAAM,qBAAqB,mBAAmB,SAAS,EAAE,YAAY,EAAE,CAAC;AAAA,EAC7G;AACD;AARgB","sourcesContent":["import { PermissionsBitField, type PermissionResolvable } from 'discord.js';\nimport { CommandPreConditions } from '../types/Enums';\nimport type { PreconditionContainerArray } from '../utils/preconditions/PreconditionContainerArray';\n\n/**\n * Appends the `ClientPermissions` precondition when {@link Command.Options.requiredClientPermissions} resolves to a\n * non-zero bitfield.\n * @param requiredClientPermissions The required client permissions.\n * @param preconditionContainerArray The precondition container array to append the precondition to.\n */\nexport function parseConstructorPreConditionsRequiredClientPermissions(\n\trequiredClientPermissions: PermissionResolvable | undefined,\n\tpreconditionContainerArray: PreconditionContainerArray\n) {\n\tconst permissions = new PermissionsBitField(requiredClientPermissions);\n\tif (permissions.bitfield !== 0n) {\n\t\tpreconditionContainerArray.append({ name: CommandPreConditions.ClientPermissions, context: { permissions } });\n\t}\n}\n"]}