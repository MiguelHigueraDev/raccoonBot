import { __name } from '../../chunk-G5GHKT7C.mjs';
import { container } from '@sapphire/pieces';
import { BucketScope, CommandPreConditions } from '../types/Enums.mjs';
import '../utils/preconditions/PreconditionContainerArray.mjs';

function parseConstructorPreConditionsCooldown(command, cooldownLimit, cooldownDelay, cooldownScope, cooldownFilteredUsers, preconditionContainerArray) {
  const { defaultCooldown } = container.client.options;
  const filtered = defaultCooldown?.filteredCommands?.includes(command.name) ?? false;
  const limit = cooldownLimit ?? (filtered ? 0 : defaultCooldown?.limit ?? 1);
  const delay = cooldownDelay ?? (filtered ? 0 : defaultCooldown?.delay ?? 0);
  if (limit && delay) {
    const scope = cooldownScope ?? defaultCooldown?.scope ?? BucketScope.User;
    const filteredUsers = cooldownFilteredUsers ?? defaultCooldown?.filteredUsers;
    preconditionContainerArray.append({
      name: CommandPreConditions.Cooldown,
      context: { scope, limit, delay, filteredUsers }
    });
  }
}
__name(parseConstructorPreConditionsCooldown, "parseConstructorPreConditionsCooldown");

export { parseConstructorPreConditionsCooldown };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=cooldown.mjs.map