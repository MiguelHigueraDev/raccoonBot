import { __name } from '../../chunk-G5GHKT7C.mjs';
import { PluginHook } from '../types/Enums.mjs';
import { preGenericsInitialization, preInitialization, postInitialization, preLogin, postLogin } from './symbols.mjs';

var _PluginManager = class _PluginManager {
  constructor() {
    this.registry = /* @__PURE__ */ new Set();
  }
  registerHook(hook, type, name) {
    if (typeof hook !== "function")
      throw new TypeError(`The provided hook ${name ? `(${name}) ` : ""}is not a function`);
    this.registry.add({ hook, type, name });
    return this;
  }
  registerPreGenericsInitializationHook(hook, name) {
    return this.registerHook(hook, PluginHook.PreGenericsInitialization, name);
  }
  registerPreInitializationHook(hook, name) {
    return this.registerHook(hook, PluginHook.PreInitialization, name);
  }
  registerPostInitializationHook(hook, name) {
    return this.registerHook(hook, PluginHook.PostInitialization, name);
  }
  registerPreLoginHook(hook, name) {
    return this.registerHook(hook, PluginHook.PreLogin, name);
  }
  registerPostLoginHook(hook, name) {
    return this.registerHook(hook, PluginHook.PostLogin, name);
  }
  use(plugin) {
    const possibleSymbolHooks = [
      [preGenericsInitialization, PluginHook.PreGenericsInitialization],
      [preInitialization, PluginHook.PreInitialization],
      [postInitialization, PluginHook.PostInitialization],
      [preLogin, PluginHook.PreLogin],
      [postLogin, PluginHook.PostLogin]
    ];
    for (const [hookSymbol, hookType] of possibleSymbolHooks) {
      const hook = Reflect.get(plugin, hookSymbol);
      if (typeof hook !== "function")
        continue;
      this.registerHook(hook, hookType);
    }
    return this;
  }
  *values(hook) {
    for (const plugin of this.registry) {
      if (hook && plugin.type !== hook)
        continue;
      yield plugin;
    }
  }
};
__name(_PluginManager, "PluginManager");
var PluginManager = _PluginManager;

export { PluginManager };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=PluginManager.mjs.map