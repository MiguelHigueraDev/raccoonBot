{"version":3,"sources":["../../../../../../src/lib/utils/preconditions/conditions/PreconditionConditionOr.ts"],"names":[],"mappings":";;;AAAA,SAAS,cAAc;AAQhB,IAAM,0BAAkD;AAAA,EAC9D,MAAM,kBAAkB,SAAS,SAAS,SAAS,SAAS;AAC3D,QAAI,QAA4C;AAChD,eAAW,SAAS,SAAS;AAC5B,YAAM,SAAS,MAAM,MAAM,WAAW,SAAS,SAAS,OAAO;AAC/D,UAAI,OAAO,KAAK;AAAG,eAAO;AAC1B,cAAQ;AAAA,IACT;AAEA,WAAO,SAAS,OAAO,GAAG;AAAA,EAC3B;AAAA,EACA,MAAM,gBAAgB,SAAS,SAAS,SAAS,SAAS;AACzD,UAAM,UAAU,MAAM,QAAQ,IAAI,QAAQ,IAAI,CAAC,UAAU,MAAM,WAAW,SAAS,SAAS,OAAO,CAAC,CAAC;AAErG,QAAI,QAA4C;AAChD,eAAW,UAAU,SAAS;AAC7B,UAAI,OAAO,KAAK;AAAG,eAAO;AAC1B,cAAQ;AAAA,IACT;AAEA,WAAO,SAAS,OAAO,GAAG;AAAA,EAC3B;AAAA,EACA,MAAM,oBAAoB,aAAa,SAAS,SAAS,SAAS;AACjE,QAAI,QAA4C;AAChD,eAAW,SAAS,SAAS;AAC5B,YAAM,SAAS,MAAM,MAAM,aAAa,aAAa,SAAS,OAAO;AACrE,UAAI,OAAO,KAAK;AAAG,eAAO;AAC1B,cAAQ;AAAA,IACT;AAEA,WAAO,SAAS,OAAO,GAAG;AAAA,EAC3B;AAAA,EACA,MAAM,kBAAkB,aAAa,SAAS,SAAS,SAAS;AAC/D,UAAM,UAAU,MAAM,QAAQ,IAAI,QAAQ,IAAI,CAAC,UAAU,MAAM,aAAa,aAAa,SAAS,OAAO,CAAC,CAAC;AAE3G,QAAI,QAA4C;AAChD,eAAW,UAAU,SAAS;AAC7B,UAAI,OAAO,KAAK;AAAG,eAAO;AAC1B,cAAQ;AAAA,IACT;AAEA,WAAO,SAAS,OAAO,GAAG;AAAA,EAC3B;AAAA,EACA,MAAM,sBAAsB,aAAa,SAAS,SAAS,SAAS;AACnE,QAAI,QAA4C;AAChD,eAAW,SAAS,SAAS;AAC5B,YAAM,SAAS,MAAM,MAAM,eAAe,aAAa,SAAS,OAAO;AACvE,UAAI,OAAO,KAAK;AAAG,eAAO;AAC1B,cAAQ;AAAA,IACT;AAEA,WAAO,SAAS,OAAO,GAAG;AAAA,EAC3B;AAAA,EACA,MAAM,oBAAoB,aAAa,SAAS,SAAS,SAAS;AACjE,UAAM,UAAU,MAAM,QAAQ,IAAI,QAAQ,IAAI,CAAC,UAAU,MAAM,eAAe,aAAa,SAAS,OAAO,CAAC,CAAC;AAE7G,QAAI,QAA4C;AAChD,eAAW,UAAU,SAAS;AAC7B,UAAI,OAAO,KAAK;AAAG,eAAO;AAC1B,cAAQ;AAAA,IACT;AAEA,WAAO,SAAS,OAAO,GAAG;AAAA,EAC3B;AACD","sourcesContent":["import { Result } from '@sapphire/result';\nimport type { PreconditionContainerResult } from '../IPreconditionContainer';\nimport type { IPreconditionCondition } from './IPreconditionCondition';\n\n/**\n * An {@link IPreconditionCondition} which runs all containers similarly to doing (V0 || V1 [|| V2 [|| V3 ...]]).\n * @since 1.0.0\n */\nexport const PreconditionConditionOr: IPreconditionCondition = {\n\tasync messageSequential(message, command, entries, context) {\n\t\tlet error: PreconditionContainerResult | null = null;\n\t\tfor (const child of entries) {\n\t\t\tconst result = await child.messageRun(message, command, context);\n\t\t\tif (result.isOk()) return result;\n\t\t\terror = result;\n\t\t}\n\n\t\treturn error ?? Result.ok();\n\t},\n\tasync messageParallel(message, command, entries, context) {\n\t\tconst results = await Promise.all(entries.map((entry) => entry.messageRun(message, command, context)));\n\n\t\tlet error: PreconditionContainerResult | null = null;\n\t\tfor (const result of results) {\n\t\t\tif (result.isOk()) return result;\n\t\t\terror = result;\n\t\t}\n\n\t\treturn error ?? Result.ok();\n\t},\n\tasync chatInputSequential(interaction, command, entries, context) {\n\t\tlet error: PreconditionContainerResult | null = null;\n\t\tfor (const child of entries) {\n\t\t\tconst result = await child.chatInputRun(interaction, command, context);\n\t\t\tif (result.isOk()) return result;\n\t\t\terror = result;\n\t\t}\n\n\t\treturn error ?? Result.ok();\n\t},\n\tasync chatInputParallel(interaction, command, entries, context) {\n\t\tconst results = await Promise.all(entries.map((entry) => entry.chatInputRun(interaction, command, context)));\n\n\t\tlet error: PreconditionContainerResult | null = null;\n\t\tfor (const result of results) {\n\t\t\tif (result.isOk()) return result;\n\t\t\terror = result;\n\t\t}\n\n\t\treturn error ?? Result.ok();\n\t},\n\tasync contextMenuSequential(interaction, command, entries, context) {\n\t\tlet error: PreconditionContainerResult | null = null;\n\t\tfor (const child of entries) {\n\t\t\tconst result = await child.contextMenuRun(interaction, command, context);\n\t\t\tif (result.isOk()) return result;\n\t\t\terror = result;\n\t\t}\n\n\t\treturn error ?? Result.ok();\n\t},\n\tasync contextMenuParallel(interaction, command, entries, context) {\n\t\tconst results = await Promise.all(entries.map((entry) => entry.contextMenuRun(interaction, command, context)));\n\n\t\tlet error: PreconditionContainerResult | null = null;\n\t\tfor (const result of results) {\n\t\t\tif (result.isOk()) return result;\n\t\t\terror = result;\n\t\t}\n\n\t\treturn error ?? Result.ok();\n\t}\n};\n"]}