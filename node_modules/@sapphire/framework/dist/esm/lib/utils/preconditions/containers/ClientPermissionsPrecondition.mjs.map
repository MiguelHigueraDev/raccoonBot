{"version":3,"sources":["../../../../../../src/lib/utils/preconditions/containers/ClientPermissionsPrecondition.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,2BAAsD;AAwBxD,IAAM,iCAAN,MAAM,+BAAkG;AAAA;AAAA;AAAA;AAAA;AAAA,EAQvG,YAAY,aAAmC;AACrD,SAAK,OAAO;AACZ,SAAK,UAAU;AAAA,MACd,aAAa,IAAI,oBAAoB,WAAW;AAAA,IACjD;AAAA,EACD;AACD;AAd+G;AAAxG,IAAM,gCAAN","sourcesContent":["import { PermissionsBitField, type PermissionResolvable } from 'discord.js';\nimport type { PreconditionSingleResolvableDetails } from '../PreconditionContainerSingle';\n\n/**\n * Constructs a contextful permissions precondition requirement.\n * @since 1.0.0\n * @example\n * ```typescript\n * export class CoreCommand extends Command {\n *   public constructor(context: Command.Context) {\n *     super(context, {\n *       preconditions: [\n *         'GuildOnly',\n *         new ClientPermissionsPrecondition('ADD_REACTIONS')\n *       ]\n *     });\n *   }\n *\n *   public messageRun(message: Message, args: Args) {\n *     // ...\n *   }\n * }\n * ```\n */\nexport class ClientPermissionsPrecondition implements PreconditionSingleResolvableDetails<'ClientPermissions'> {\n\tpublic name: 'ClientPermissions';\n\tpublic context: { permissions: PermissionsBitField };\n\n\t/**\n\t * Constructs a precondition container entry.\n\t * @param permissions The permissions that will be required by this command.\n\t */\n\tpublic constructor(permissions: PermissionResolvable) {\n\t\tthis.name = 'ClientPermissions';\n\t\tthis.context = {\n\t\t\tpermissions: new PermissionsBitField(permissions)\n\t\t};\n\t}\n}\n"]}