{"version":3,"sources":["../../../../../src/lib/utils/application-commands/computeDifferences.ts"],"names":["casted","originalLocalizedNames","expectedLocalizedNames"],"mappings":";;;;;AAAA;AAAA,EACC;AAAA,OAIM;AAEP,SAAS,wBAAgD;AACzD,SAAS,qCAAqC;AAC9C,SAAS,wBAAwB;AACjC,SAAS,yBAAyB;AAClC,SAAS,0BAA0B;AACnC,SAAS,iBAAiB;AAC1B,SAAS,oBAAoB;AAKtB,SAAS,0BACf,iBACA,SACA,cACC;AACD,aAAW,KAAK,sBAAsB,iBAAiB,SAAS,YAAY,GAAG;AAE9E,WAAO;AAAA,EACR;AAEA,SAAO;AACR;AAXgB;AAaT,UAAU,sBAChB,iBACA,SACA,cAC+B;AAC/B,MAAI,gBAAgB,SAAS,uBAAuB,aAAa,gBAAgB,MAAM;AAEtF,QAAI,iBAAiB,SAAS,gBAAgB,QAAQ,uBAAuB,SAAS,GAAG;AACxF,YAAMA,UAAS;AAGf,aAAO,UAAU,EAAE,SAAS,gBAAgB,MAAM,SAASA,QAAO,KAAK,CAAC;AAGxE,UAAI,CAAC,cAAc;AAClB,eAAO,kBAAkB,gBAAgB,eAAeA,QAAO,aAAa;AAAA,MAC7E;AAGA,aAAO,8BAA8B,gBAAgB,4BAA4BA,QAAO,0BAA0B;AAGlH,YAAMC,0BAAyB,gBAAgB;AAC/C,YAAMC,0BAAyBF,QAAO;AAEtC,aAAO,mBAAmB;AAAA,QACzB,eAAe;AAAA,QACf,sBAAsB;AAAA,QACtB,sBAAsB;AAAA,QACtB,+BAA+BC;AAAA,QAC/B,+BAA+BC;AAAA,MAChC,CAAC;AAAA,IACF;AAEA;AAAA,EACD;AAEA,QAAM,SAAS;AAGf,SAAO,UAAU,EAAE,SAAS,gBAAgB,KAAK,YAAY,GAAG,SAAS,OAAO,KAAK,YAAY,EAAE,CAAC;AAGpG,QAAM,yBAAyB,gBAAgB;AAC/C,QAAM,yBAAyB,OAAO;AAEtC,SAAO,mBAAmB;AAAA,IACzB,eAAe;AAAA,IACf,sBAAsB;AAAA,IACtB,sBAAsB;AAAA,IACtB,+BAA+B;AAAA,IAC/B,+BAA+B;AAAA,EAChC,CAAC;AAGD,MAAI,CAAC,cAAc;AAClB,WAAO,kBAAkB,gBAAgB,eAAe,OAAO,aAAa;AAAA,EAC7E;AAGA,SAAO,8BAA8B,gBAAgB,4BAA4B,OAAO,0BAA0B;AAGlH,SAAO,iBAAiB,EAAE,gBAAgB,gBAAgB,aAAa,gBAAgB,OAAO,YAAY,CAAC;AAG3G,QAAM,gCAAgC,gBAAgB;AACtD,QAAM,gCAAgC,OAAO;AAE7C,SAAO,mBAAmB;AAAA,IACzB,eAAe;AAAA,IACf,sBAAsB;AAAA,IACtB,sBAAsB;AAAA,IACtB;AAAA,IACA;AAAA,EACD,CAAC;AAED,SAAO,aAAa,gBAAgB,SAAS,OAAO,OAAO;AAC5D;AA9EiB","sourcesContent":["import {\n\tApplicationCommandType,\n\ttype RESTPostAPIApplicationCommandsJSONBody,\n\ttype RESTPostAPIChatInputApplicationCommandsJSONBody,\n\ttype RESTPostAPIContextMenuApplicationCommandsJSONBody\n} from 'discord-api-types/v10';\nimport type { InternalAPICall } from './ApplicationCommandRegistry';\nimport { contextMenuTypes, type CommandDifference } from './compute-differences/_shared';\nimport { checkDefaultMemberPermissions } from './compute-differences/default_member_permissions';\nimport { checkDescription } from './compute-differences/description';\nimport { checkDMPermission } from './compute-differences/dm_permission';\nimport { checkLocalizations } from './compute-differences/localizations';\nimport { checkName } from './compute-differences/name';\nimport { checkOptions } from './compute-differences/options';\n\n/**\n * @returns `true` if there are differences, `false` otherwise\n */\nexport function getCommandDifferencesFast(\n\texistingCommand: RESTPostAPIApplicationCommandsJSONBody,\n\tapiData: InternalAPICall['builtData'],\n\tguildCommand: boolean\n) {\n\tfor (const _ of getCommandDifferences(existingCommand, apiData, guildCommand)) {\n\t\t// Return immediately on first difference found (also means we skip all other checks)\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nexport function* getCommandDifferences(\n\texistingCommand: RESTPostAPIApplicationCommandsJSONBody,\n\tapiData: InternalAPICall['builtData'],\n\tguildCommand: boolean\n): Generator<CommandDifference> {\n\tif (existingCommand.type !== ApplicationCommandType.ChatInput && existingCommand.type) {\n\t\t// Check context menus\n\t\tif (contextMenuTypes.includes(existingCommand.type ?? ApplicationCommandType.ChatInput)) {\n\t\t\tconst casted = apiData as RESTPostAPIContextMenuApplicationCommandsJSONBody;\n\n\t\t\t// Check name\n\t\t\tyield* checkName({ oldName: existingCommand.name, newName: casted.name });\n\n\t\t\t// Check dmPermission only for non-guild commands\n\t\t\tif (!guildCommand) {\n\t\t\t\tyield* checkDMPermission(existingCommand.dm_permission, casted.dm_permission);\n\t\t\t}\n\n\t\t\t// Check defaultMemberPermissions\n\t\t\tyield* checkDefaultMemberPermissions(existingCommand.default_member_permissions, casted.default_member_permissions);\n\n\t\t\t// Check localized names\n\t\t\tconst originalLocalizedNames = existingCommand.name_localizations;\n\t\t\tconst expectedLocalizedNames = casted.name_localizations;\n\n\t\t\tyield* checkLocalizations({\n\t\t\t\tlocaleMapName: 'nameLocalizations',\n\t\t\t\tlocalePresentMessage: 'localized names',\n\t\t\t\tlocaleMissingMessage: 'no localized names',\n\t\t\t\toriginalLocalizedDescriptions: originalLocalizedNames,\n\t\t\t\texpectedLocalizedDescriptions: expectedLocalizedNames\n\t\t\t});\n\t\t}\n\n\t\treturn;\n\t}\n\n\tconst casted = apiData as RESTPostAPIChatInputApplicationCommandsJSONBody;\n\n\t// Check name\n\tyield* checkName({ oldName: existingCommand.name.toLowerCase(), newName: casted.name.toLowerCase() });\n\n\t// Check localized names\n\tconst originalLocalizedNames = existingCommand.name_localizations;\n\tconst expectedLocalizedNames = casted.name_localizations;\n\n\tyield* checkLocalizations({\n\t\tlocaleMapName: 'nameLocalizations',\n\t\tlocalePresentMessage: 'localized names',\n\t\tlocaleMissingMessage: 'no localized names',\n\t\toriginalLocalizedDescriptions: originalLocalizedNames,\n\t\texpectedLocalizedDescriptions: expectedLocalizedNames\n\t});\n\n\t// Check dmPermission\n\tif (!guildCommand) {\n\t\tyield* checkDMPermission(existingCommand.dm_permission, casted.dm_permission);\n\t}\n\n\t// Check defaultMemberPermissions\n\tyield* checkDefaultMemberPermissions(existingCommand.default_member_permissions, casted.default_member_permissions);\n\n\t// Check description\n\tyield* checkDescription({ oldDescription: existingCommand.description, newDescription: casted.description });\n\n\t// Check localized descriptions\n\tconst originalLocalizedDescriptions = existingCommand.description_localizations;\n\tconst expectedLocalizedDescriptions = casted.description_localizations;\n\n\tyield* checkLocalizations({\n\t\tlocaleMapName: 'descriptionLocalizations',\n\t\tlocalePresentMessage: 'localized descriptions',\n\t\tlocaleMissingMessage: 'no localized descriptions',\n\t\toriginalLocalizedDescriptions,\n\t\texpectedLocalizedDescriptions\n\t});\n\n\tyield* checkOptions(existingCommand.options, casted.options);\n}\n"]}