import { __name } from '../../../chunk-G5GHKT7C.mjs';
import { SlashCommandBuilder, ContextMenuCommandBuilder } from '@discordjs/builders';
import { isFunction } from '@sapphire/utilities';
import { ApplicationCommandType } from 'discord-api-types/v10';
import { PermissionsBitField, ApplicationCommand } from 'discord.js';

function isBuilder(command) {
  return command instanceof SlashCommandBuilder;
}
__name(isBuilder, "isBuilder");
function addDefaultsToChatInputJSON(data) {
  data.dm_permission ??= true;
  data.type ??= ApplicationCommandType.ChatInput;
  data.default_member_permissions ??= null;
  return data;
}
__name(addDefaultsToChatInputJSON, "addDefaultsToChatInputJSON");
function addDefaultsToContextMenuJSON(data) {
  data.dm_permission ??= true;
  data.default_member_permissions ??= null;
  return data;
}
__name(addDefaultsToContextMenuJSON, "addDefaultsToContextMenuJSON");
function normalizeChatInputCommand(command) {
  if (isFunction(command)) {
    const builder = new SlashCommandBuilder();
    command(builder);
    return addDefaultsToChatInputJSON(builder.toJSON());
  }
  if (isBuilder(command)) {
    return addDefaultsToChatInputJSON(command.toJSON());
  }
  const finalObject = {
    name: command.name,
    name_localizations: command.nameLocalizations,
    description: command.description,
    description_localizations: command.descriptionLocalizations,
    type: ApplicationCommandType.ChatInput,
    dm_permission: command.dmPermission,
    nsfw: command.nsfw
  };
  if (typeof command.defaultMemberPermissions !== "undefined") {
    finalObject.default_member_permissions = command.defaultMemberPermissions === null ? null : new PermissionsBitField(command.defaultMemberPermissions).bitfield.toString();
  }
  if (command.options?.length) {
    finalObject.options = command.options.map((option) => ApplicationCommand["transformOption"](option));
  }
  return addDefaultsToChatInputJSON(finalObject);
}
__name(normalizeChatInputCommand, "normalizeChatInputCommand");
function normalizeContextMenuCommand(command) {
  if (isFunction(command)) {
    const builder = new ContextMenuCommandBuilder();
    command(builder);
    return addDefaultsToContextMenuJSON(builder.toJSON());
  }
  if (command instanceof ContextMenuCommandBuilder) {
    return addDefaultsToContextMenuJSON(command.toJSON());
  }
  const finalObject = {
    name: command.name,
    name_localizations: command.nameLocalizations,
    type: command.type,
    dm_permission: command.dmPermission,
    nsfw: command.nsfw
  };
  if (typeof command.defaultMemberPermissions !== "undefined") {
    finalObject.default_member_permissions = command.defaultMemberPermissions === null ? null : new PermissionsBitField(command.defaultMemberPermissions).bitfield.toString();
  }
  return addDefaultsToContextMenuJSON(finalObject);
}
__name(normalizeContextMenuCommand, "normalizeContextMenuCommand");
function convertApplicationCommandToApiData(command) {
  const returnData = {
    name: command.name,
    name_localizations: command.nameLocalizations,
    dm_permission: command.dmPermission,
    nsfw: command.nsfw,
    default_member_permissions: command.defaultMemberPermissions?.bitfield.toString() ?? null
  };
  if (command.type === ApplicationCommandType.ChatInput) {
    returnData.type = ApplicationCommandType.ChatInput;
    returnData.description = command.description;
    returnData.description_localizations = command.descriptionLocalizations;
  } else if (command.type === ApplicationCommandType.Message) {
    returnData.type = ApplicationCommandType.Message;
  } else if (command.type === ApplicationCommandType.User) {
    returnData.type = ApplicationCommandType.User;
  } else {
    throw new Error(`Unknown command type received: ${command.type}`);
  }
  if (command.options.length) {
    returnData.options = command.options.map((option) => ApplicationCommand["transformOption"](option));
  }
  return returnData;
}
__name(convertApplicationCommandToApiData, "convertApplicationCommandToApiData");

export { convertApplicationCommandToApiData, normalizeChatInputCommand, normalizeContextMenuCommand };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=normalizeInputs.mjs.map