import { __name } from '../../../../chunk-G5GHKT7C.mjs';
import { ApplicationCommandOptionType, ApplicationCommandType } from 'discord-api-types/v10';

var optionTypeToPrettyName = /* @__PURE__ */ new Map([
  [ApplicationCommandOptionType.Subcommand, "subcommand"],
  [ApplicationCommandOptionType.SubcommandGroup, "subcommand group"],
  [ApplicationCommandOptionType.String, "string option"],
  [ApplicationCommandOptionType.Integer, "integer option"],
  [ApplicationCommandOptionType.Boolean, "boolean option"],
  [ApplicationCommandOptionType.User, "user option"],
  [ApplicationCommandOptionType.Channel, "channel option"],
  [ApplicationCommandOptionType.Role, "role option"],
  [ApplicationCommandOptionType.Mentionable, "mentionable option"],
  [ApplicationCommandOptionType.Number, "number option"],
  [ApplicationCommandOptionType.Attachment, "attachment option"]
]);
var contextMenuTypes = [ApplicationCommandType.Message, ApplicationCommandType.User];
var subcommandTypes = [ApplicationCommandOptionType.SubcommandGroup, ApplicationCommandOptionType.Subcommand];
function hasMinMaxValueSupport(option) {
  return [ApplicationCommandOptionType.Integer, ApplicationCommandOptionType.Number].includes(option.type);
}
__name(hasMinMaxValueSupport, "hasMinMaxValueSupport");
function hasChoicesAndAutocompleteSupport(option) {
  return [ApplicationCommandOptionType.Integer, ApplicationCommandOptionType.Number, ApplicationCommandOptionType.String].includes(option.type);
}
__name(hasChoicesAndAutocompleteSupport, "hasChoicesAndAutocompleteSupport");
function hasMinMaxLengthSupport(option) {
  return option.type === ApplicationCommandOptionType.String;
}
__name(hasMinMaxLengthSupport, "hasMinMaxLengthSupport");

export { contextMenuTypes, hasChoicesAndAutocompleteSupport, hasMinMaxLengthSupport, hasMinMaxValueSupport, optionTypeToPrettyName, subcommandTypes };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=_shared.mjs.map