import { __name } from '../../../../chunk-G5GHKT7C.mjs';
import { optionTypeToPrettyName } from './_shared.mjs';
import { reportOptionDifferences } from './option.mjs';

function* checkOptions(existingOptions, newOptions) {
  if (!existingOptions?.length && newOptions?.length) {
    yield {
      key: "options",
      original: "no options present",
      expected: "options present"
    };
  } else if (existingOptions?.length && !newOptions?.length) {
    yield {
      key: "options",
      original: "options present",
      expected: "no options present"
    };
  } else if (newOptions?.length) {
    let index = 0;
    for (const option of newOptions) {
      const currentIndex = index++;
      const existingOption = existingOptions[currentIndex];
      yield* reportOptionDifferences({ currentIndex, option, existingOption });
    }
    if (index < existingOptions.length) {
      let option;
      while ((option = existingOptions[index]) !== void 0) {
        const expectedType = optionTypeToPrettyName.get(option.type) ?? `unknown (${option.type}); please contact Sapphire developers about this!`;
        yield {
          key: `existing command option at index ${index}`,
          expected: "no option present",
          original: `${expectedType} with name ${option.name}`
        };
        index++;
      }
    }
  }
}
__name(checkOptions, "checkOptions");

export { checkOptions };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=options.mjs.map