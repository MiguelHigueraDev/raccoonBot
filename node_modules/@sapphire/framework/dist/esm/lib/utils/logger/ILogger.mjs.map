{"version":3,"sources":["../../../../../src/lib/utils/logger/ILogger.ts"],"names":["LogLevel"],"mappings":";;;AAGO,IAAK,WAAL,kBAAKA,cAAL;AAIN,EAAAA,oBAAA,WAAQ,MAAR;AAKA,EAAAA,oBAAA,WAAQ,MAAR;AAKA,EAAAA,oBAAA,UAAO,MAAP;AAKA,EAAAA,oBAAA,UAAO,MAAP;AAKA,EAAAA,oBAAA,WAAQ,MAAR;AAKA,EAAAA,oBAAA,WAAQ,MAAR;AAKA,EAAAA,oBAAA,UAAO,OAAP;AAlCW,SAAAA;AAAA,GAAA","sourcesContent":["/**\n * The logger levels for the {@link ILogger}.\n */\nexport enum LogLevel {\n\t/**\n\t * The lowest log level, used when calling {@link ILogger.trace}.\n\t */\n\tTrace = 10,\n\n\t/**\n\t * The debug level, used when calling {@link ILogger.debug}.\n\t */\n\tDebug = 20,\n\n\t/**\n\t * The info level, used when calling {@link ILogger.info}.\n\t */\n\tInfo = 30,\n\n\t/**\n\t * The warning level, used when calling {@link ILogger.warn}.\n\t */\n\tWarn = 40,\n\n\t/**\n\t * The error level, used when calling {@link ILogger.error}.\n\t */\n\tError = 50,\n\n\t/**\n\t * The critical level, used when calling {@link ILogger.fatal}.\n\t */\n\tFatal = 60,\n\n\t/**\n\t * An unknown or uncategorized level.\n\t */\n\tNone = 100\n}\n\nexport interface ILogger {\n\t/**\n\t * Checks whether a level is supported.\n\t * @param level The level to check.\n\t */\n\thas(level: LogLevel): boolean;\n\n\t/**\n\t * Alias of {@link ILogger.write} with {@link LogLevel.Trace} as level.\n\t * @param values The values to log.\n\t */\n\ttrace(...values: readonly unknown[]): void;\n\n\t/**\n\t * Alias of {@link ILogger.write} with {@link LogLevel.Debug} as level.\n\t * @param values The values to log.\n\t */\n\tdebug(...values: readonly unknown[]): void;\n\n\t/**\n\t * Alias of {@link ILogger.write} with {@link LogLevel.Info} as level.\n\t * @param values The values to log.\n\t */\n\tinfo(...values: readonly unknown[]): void;\n\n\t/**\n\t * Alias of {@link ILogger.write} with {@link LogLevel.Warn} as level.\n\t * @param values The values to log.\n\t */\n\twarn(...values: readonly unknown[]): void;\n\n\t/**\n\t * Alias of {@link ILogger.write} with {@link LogLevel.Error} as level.\n\t * @param values The values to log.\n\t */\n\terror(...values: readonly unknown[]): void;\n\n\t/**\n\t * Alias of {@link ILogger.write} with {@link LogLevel.Fatal} as level.\n\t * @param values The values to log.\n\t */\n\tfatal(...values: readonly unknown[]): void;\n\n\t/**\n\t * Writes the log message given a level and the value(s).\n\t * @param level The log level.\n\t * @param values The values to log.\n\t */\n\twrite(level: LogLevel, ...values: readonly unknown[]): void;\n}\n"]}