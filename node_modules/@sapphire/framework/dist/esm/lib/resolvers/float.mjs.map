{"version":3,"sources":["../../../../src/lib/resolvers/float.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,cAAc;AACvB,SAAS,mBAAmB;AAErB,SAAS,aACf,WACA,SACyH;AACzH,QAAM,SAAS,OAAO,SAAS;AAE/B,MAAI,OAAO,MAAM,MAAM,GAAG;AACzB,WAAO,OAAO,IAAI,YAAY,kBAAkB;AAAA,EACjD;AAEA,MAAI,OAAO,SAAS,YAAY,YAAY,SAAS,QAAQ,SAAS;AACrE,WAAO,OAAO,IAAI,YAAY,qBAAqB;AAAA,EACpD;AAEA,MAAI,OAAO,SAAS,YAAY,YAAY,SAAS,QAAQ,SAAS;AACrE,WAAO,OAAO,IAAI,YAAY,qBAAqB;AAAA,EACpD;AAEA,SAAO,OAAO,GAAG,MAAM;AACxB;AAnBgB","sourcesContent":["import { Result } from '@sapphire/result';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport function resolveFloat(\n\tparameter: string,\n\toptions?: { minimum?: number; maximum?: number }\n): Result<number, Identifiers.ArgumentFloatError | Identifiers.ArgumentFloatTooSmall | Identifiers.ArgumentFloatTooLarge> {\n\tconst parsed = Number(parameter);\n\n\tif (Number.isNaN(parsed)) {\n\t\treturn Result.err(Identifiers.ArgumentFloatError);\n\t}\n\n\tif (typeof options?.minimum === 'number' && parsed < options.minimum) {\n\t\treturn Result.err(Identifiers.ArgumentFloatTooSmall);\n\t}\n\n\tif (typeof options?.maximum === 'number' && parsed > options.maximum) {\n\t\treturn Result.err(Identifiers.ArgumentFloatTooLarge);\n\t}\n\n\treturn Result.ok(parsed);\n}\n"]}