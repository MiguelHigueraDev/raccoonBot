{"version":3,"sources":["../../../../src/lib/resolvers/boolean.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,cAAc;AACvB,SAAS,mBAAmB;AAE5B,IAAM,aAAa,CAAC,KAAK,QAAQ,KAAK,KAAK,OAAO,GAAG;AACrD,IAAM,aAAa,CAAC,KAAK,SAAS,KAAK,KAAK,MAAM,GAAG;AAE9C,SAAS,eACf,WACA,SACoD;AACpD,QAAM,UAAU,UAAU,YAAY;AAEtC,MAAI,CAAC,GAAG,YAAY,GAAI,SAAS,UAAU,CAAC,CAAE,EAAE,SAAS,OAAO,GAAG;AAClE,WAAO,OAAO,GAAG,IAAI;AAAA,EACtB;AAEA,MAAI,CAAC,GAAG,YAAY,GAAI,SAAS,UAAU,CAAC,CAAE,EAAE,SAAS,OAAO,GAAG;AAClE,WAAO,OAAO,GAAG,KAAK;AAAA,EACvB;AAEA,SAAO,OAAO,IAAI,YAAY,oBAAoB;AACnD;AAfgB","sourcesContent":["import { Result } from '@sapphire/result';\nimport { Identifiers } from '../errors/Identifiers';\n\nconst baseTruths = ['1', 'true', '+', 't', 'yes', 'y'] as const;\nconst baseFalses = ['0', 'false', '-', 'f', 'no', 'n'] as const;\n\nexport function resolveBoolean(\n\tparameter: string,\n\tcustoms?: { truths?: readonly string[]; falses?: readonly string[] }\n): Result<boolean, Identifiers.ArgumentBooleanError> {\n\tconst boolean = parameter.toLowerCase();\n\n\tif ([...baseTruths, ...(customs?.truths ?? [])].includes(boolean)) {\n\t\treturn Result.ok(true);\n\t}\n\n\tif ([...baseFalses, ...(customs?.falses ?? [])].includes(boolean)) {\n\t\treturn Result.ok(false);\n\t}\n\n\treturn Result.err(Identifiers.ArgumentBooleanError);\n}\n"]}