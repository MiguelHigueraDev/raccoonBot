{"version":3,"sources":["../../../../src/lib/resolvers/member.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,gBAAgB,gCAAgC;AACzD,SAAS,cAAc;AACvB,SAAS,iBAAiB;AAE1B,SAAS,mBAAmB;AAE5B,eAAsB,cACrB,WACA,OACA,oBACgE;AAChE,MAAI,SAAS,MAAM,YAAY,WAAW,KAAK;AAE/C,MAAI,UAAU,MAAM,KAAK,oBAAoB;AAC5C,aAAS,MAAM,eAAe,WAAW,KAAK;AAAA,EAC/C;AAEA,MAAI,QAAQ;AACX,WAAO,OAAO,GAAG,MAAM;AAAA,EACxB;AAEA,SAAO,OAAO,IAAI,YAAY,mBAAmB;AAClD;AAhBsB;AAkBtB,eAAe,YAAY,UAAkB,OAA2C;AACvF,QAAM,WAAW,yBAAyB,KAAK,QAAQ,KAAK,eAAe,KAAK,QAAQ;AACxF,SAAO,WAAW,MAAM,QAAQ,MAAM,SAAS,CAAC,CAAc,EAAE,MAAM,MAAM,IAAI,IAAI;AACrF;AAHe;AAKf,eAAe,eAAe,UAAkB,OAA2C;AAC1F,aAAW,SAAS,SAAS,KAAK,SAAS,GAAG,EAAE,MAAM,MAAM,SAAS,MAAM,GAAG,EAAE,IAAI;AAEpF,QAAM,UAAU,MAAM,MAAM,QAAQ,MAAM,EAAE,OAAO,UAAU,OAAO,EAAE,CAAC,EAAE,MAAM,MAAM,IAAI;AACzF,SAAO,SAAS,MAAM,KAAK;AAC5B;AALe","sourcesContent":["import { SnowflakeRegex, UserOrMemberMentionRegex } from '@sapphire/discord-utilities';\nimport { Result } from '@sapphire/result';\nimport { isNullish } from '@sapphire/utilities';\nimport type { Guild, GuildMember, Snowflake } from 'discord.js';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport async function resolveMember(\n\tparameter: string,\n\tguild: Guild,\n\tperformFuzzySearch?: boolean\n): Promise<Result<GuildMember, Identifiers.ArgumentMemberError>> {\n\tlet member = await resolveById(parameter, guild);\n\n\tif (isNullish(member) && performFuzzySearch) {\n\t\tmember = await resolveByQuery(parameter, guild);\n\t}\n\n\tif (member) {\n\t\treturn Result.ok(member);\n\t}\n\n\treturn Result.err(Identifiers.ArgumentMemberError);\n}\n\nasync function resolveById(argument: string, guild: Guild): Promise<GuildMember | null> {\n\tconst memberId = UserOrMemberMentionRegex.exec(argument) ?? SnowflakeRegex.exec(argument);\n\treturn memberId ? guild.members.fetch(memberId[1] as Snowflake).catch(() => null) : null;\n}\n\nasync function resolveByQuery(argument: string, guild: Guild): Promise<GuildMember | null> {\n\targument = argument.length > 5 && argument.at(-5) === '#' ? argument.slice(0, -5) : argument;\n\n\tconst members = await guild.members.fetch({ query: argument, limit: 1 }).catch(() => null);\n\treturn members?.first() ?? null;\n}\n"]}