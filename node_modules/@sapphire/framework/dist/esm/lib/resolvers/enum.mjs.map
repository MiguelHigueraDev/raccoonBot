{"version":3,"sources":["../../../../src/lib/resolvers/enum.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,cAAc;AACvB,SAAS,mBAAmB;AAErB,SAAS,YACf,WACA,SACqF;AACrF,MAAI,CAAC,SAAS,MAAM,QAAQ;AAC3B,WAAO,OAAO,IAAI,YAAY,sBAAsB;AAAA,EACrD;AAEA,MAAI,CAAC,QAAQ,mBAAmB,CAAC,QAAQ,KAAK,SAAS,SAAS,GAAG;AAClE,WAAO,OAAO,IAAI,YAAY,iBAAiB;AAAA,EAChD;AAEA,MAAI,QAAQ,mBAAmB,CAAC,QAAQ,KAAK,KAAK,CAAC,MAAM,EAAE,YAAY,MAAM,UAAU,YAAY,CAAC,GAAG;AACtG,WAAO,OAAO,IAAI,YAAY,iBAAiB;AAAA,EAChD;AAEA,SAAO,OAAO,GAAG,SAAS;AAC3B;AAjBgB","sourcesContent":["import { Result } from '@sapphire/result';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport function resolveEnum(\n\tparameter: string,\n\toptions?: { enum?: string[]; caseInsensitive?: boolean }\n): Result<string, Identifiers.ArgumentEnumEmptyError | Identifiers.ArgumentEnumError> {\n\tif (!options?.enum?.length) {\n\t\treturn Result.err(Identifiers.ArgumentEnumEmptyError);\n\t}\n\n\tif (!options.caseInsensitive && !options.enum.includes(parameter)) {\n\t\treturn Result.err(Identifiers.ArgumentEnumError);\n\t}\n\n\tif (options.caseInsensitive && !options.enum.some((v) => v.toLowerCase() === parameter.toLowerCase())) {\n\t\treturn Result.err(Identifiers.ArgumentEnumError);\n\t}\n\n\treturn Result.ok(parameter);\n}\n"]}