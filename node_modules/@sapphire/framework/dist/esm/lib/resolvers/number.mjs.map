{"version":3,"sources":["../../../../src/lib/resolvers/number.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,cAAc;AACvB,SAAS,mBAAmB;AAErB,SAAS,cACf,WACA,SAC4H;AAC5H,QAAM,SAAS,OAAO,SAAS;AAC/B,MAAI,OAAO,MAAM,MAAM,GAAG;AACzB,WAAO,OAAO,IAAI,YAAY,mBAAmB;AAAA,EAClD;AAEA,MAAI,OAAO,SAAS,YAAY,YAAY,SAAS,QAAQ,SAAS;AACrE,WAAO,OAAO,IAAI,YAAY,sBAAsB;AAAA,EACrD;AAEA,MAAI,OAAO,SAAS,YAAY,YAAY,SAAS,QAAQ,SAAS;AACrE,WAAO,OAAO,IAAI,YAAY,sBAAsB;AAAA,EACrD;AAEA,SAAO,OAAO,GAAG,MAAM;AACxB;AAlBgB","sourcesContent":["import { Result } from '@sapphire/result';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport function resolveNumber(\n\tparameter: string,\n\toptions?: { minimum?: number; maximum?: number }\n): Result<number, Identifiers.ArgumentNumberError | Identifiers.ArgumentNumberTooSmall | Identifiers.ArgumentNumberTooLarge> {\n\tconst parsed = Number(parameter);\n\tif (Number.isNaN(parsed)) {\n\t\treturn Result.err(Identifiers.ArgumentNumberError);\n\t}\n\n\tif (typeof options?.minimum === 'number' && parsed < options.minimum) {\n\t\treturn Result.err(Identifiers.ArgumentNumberTooSmall);\n\t}\n\n\tif (typeof options?.maximum === 'number' && parsed > options.maximum) {\n\t\treturn Result.err(Identifiers.ArgumentNumberTooLarge);\n\t}\n\n\treturn Result.ok(parsed);\n}\n"]}