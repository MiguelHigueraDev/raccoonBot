{"version":3,"sources":["../../../../src/lib/resolvers/user.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,gBAAgB,gCAAgC;AACzD,SAAS,iBAAiB;AAC1B,SAAS,cAAc;AAEvB,SAAS,mBAAmB;AAE5B,eAAsB,YAAY,WAAyE;AAC1G,QAAM,SAAS,yBAAyB,KAAK,SAAS,KAAK,eAAe,KAAK,SAAS;AACxF,QAAM,OAAO,SAAS,MAAM,UAAU,OAAO,MAAM,MAAM,OAAO,CAAC,CAAc,EAAE,MAAM,MAAM,IAAI,IAAI;AAErG,MAAI,MAAM;AACT,WAAO,OAAO,GAAG,IAAI;AAAA,EACtB;AAEA,SAAO,OAAO,IAAI,YAAY,iBAAiB;AAChD;AATsB","sourcesContent":["import { SnowflakeRegex, UserOrMemberMentionRegex } from '@sapphire/discord-utilities';\nimport { container } from '@sapphire/pieces';\nimport { Result } from '@sapphire/result';\nimport type { Snowflake, User } from 'discord.js';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport async function resolveUser(parameter: string): Promise<Result<User, Identifiers.ArgumentUserError>> {\n\tconst userId = UserOrMemberMentionRegex.exec(parameter) ?? SnowflakeRegex.exec(parameter);\n\tconst user = userId ? await container.client.users.fetch(userId[1] as Snowflake).catch(() => null) : null;\n\n\tif (user) {\n\t\treturn Result.ok(user);\n\t}\n\n\treturn Result.err(Identifiers.ArgumentUserError);\n}\n"]}