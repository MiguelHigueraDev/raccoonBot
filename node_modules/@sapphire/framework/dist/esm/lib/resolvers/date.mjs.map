{"version":3,"sources":["../../../../src/lib/resolvers/date.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,cAAc;AACvB,SAAS,mBAAmB;AAErB,SAAS,YACf,WACA,SACkH;AAClH,QAAM,SAAS,IAAI,KAAK,SAAS;AAEjC,QAAM,OAAO,OAAO,QAAQ;AAE5B,MAAI,OAAO,MAAM,IAAI,GAAG;AACvB,WAAO,OAAO,IAAI,YAAY,iBAAiB;AAAA,EAChD;AAEA,MAAI,OAAO,SAAS,YAAY,YAAY,OAAO,QAAQ,SAAS;AACnE,WAAO,OAAO,IAAI,YAAY,oBAAoB;AAAA,EACnD;AAEA,MAAI,OAAO,SAAS,YAAY,YAAY,OAAO,QAAQ,SAAS;AACnE,WAAO,OAAO,IAAI,YAAY,kBAAkB;AAAA,EACjD;AAEA,SAAO,OAAO,GAAG,MAAM;AACxB;AArBgB","sourcesContent":["import { Result } from '@sapphire/result';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport function resolveDate(\n\tparameter: string,\n\toptions?: { minimum?: number; maximum?: number }\n): Result<Date, Identifiers.ArgumentDateError | Identifiers.ArgumentDateTooEarly | Identifiers.ArgumentDateTooFar> {\n\tconst parsed = new Date(parameter);\n\n\tconst time = parsed.getTime();\n\n\tif (Number.isNaN(time)) {\n\t\treturn Result.err(Identifiers.ArgumentDateError);\n\t}\n\n\tif (typeof options?.minimum === 'number' && time < options.minimum) {\n\t\treturn Result.err(Identifiers.ArgumentDateTooEarly);\n\t}\n\n\tif (typeof options?.maximum === 'number' && time > options.maximum) {\n\t\treturn Result.err(Identifiers.ArgumentDateTooFar);\n\t}\n\n\treturn Result.ok(parsed);\n}\n"]}