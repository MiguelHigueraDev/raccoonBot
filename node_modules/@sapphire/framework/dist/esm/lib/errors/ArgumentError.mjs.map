{"version":3,"sources":["../../../../src/lib/errors/ArgumentError.ts"],"names":[],"mappings":";;;;;AACA,SAAS,iBAAiB;AAOnB,IAAM,iBAAN,MAAM,uBAAmC,UAAU;AAAA,EAIlD,YAAY,SAAmC;AACrD,UAAM,EAAE,GAAG,SAAS,YAAY,QAAQ,cAAc,QAAQ,SAAS,KAAK,CAAC;AAC7E,SAAK,WAAW,QAAQ;AACxB,SAAK,YAAY,QAAQ;AAAA,EAC1B;AAAA;AAAA,EAGA,IAAoB,OAAe;AAClC,WAAO;AAAA,EACR;AACD;AAd0D;AAAnD,IAAM,gBAAN","sourcesContent":["import type { IArgument } from '../structures/Argument';\nimport { UserError } from './UserError';\n\n/**\n * Errors thrown by the argument parser\n * @since 1.0.0\n * @property name This will be `'ArgumentError'` and can be used to distinguish the type of error when any error gets thrown\n */\nexport class ArgumentError<T = unknown> extends UserError {\n\tpublic readonly argument: IArgument<T>;\n\tpublic readonly parameter: string;\n\n\tpublic constructor(options: ArgumentError.Options<T>) {\n\t\tsuper({ ...options, identifier: options.identifier ?? options.argument.name });\n\t\tthis.argument = options.argument;\n\t\tthis.parameter = options.parameter;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/class-literal-property-style\n\tpublic override get name(): string {\n\t\treturn 'ArgumentError';\n\t}\n}\n\nexport namespace ArgumentError {\n\t/**\n\t * The options for {@link ArgumentError}.\n\t * @since 1.0.0\n\t */\n\texport interface Options<T> extends Omit<UserError.Options, 'identifier'> {\n\t\t/**\n\t\t * The argument that caused the error.\n\t\t * @since 1.0.0\n\t\t */\n\t\targument: IArgument<T>;\n\n\t\t/**\n\t\t * The parameter that failed to be parsed.\n\t\t * @since 1.0.0\n\t\t */\n\t\tparameter: string;\n\n\t\t/**\n\t\t * The identifier.\n\t\t * @since 1.0.0\n\t\t * @default argument.name\n\t\t */\n\t\tidentifier?: string;\n\t}\n}\n"]}