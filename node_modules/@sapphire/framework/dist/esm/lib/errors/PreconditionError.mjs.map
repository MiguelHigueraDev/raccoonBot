{"version":3,"sources":["../../../../src/lib/errors/PreconditionError.ts"],"names":[],"mappings":";;;;;AACA,SAAS,iBAAiB;AAMnB,IAAM,qBAAN,MAAM,2BAA0B,UAAU;AAAA,EAGzC,YAAY,SAAoC;AACtD,UAAM,EAAE,GAAG,SAAS,YAAY,QAAQ,cAAc,QAAQ,aAAa,KAAK,CAAC;AACjF,SAAK,eAAe,QAAQ;AAAA,EAC7B;AAAA;AAAA,EAGA,IAAoB,OAAe;AAClC,WAAO;AAAA,EACR;AACD;AAZiD;AAA1C,IAAM,oBAAN","sourcesContent":["import type { Precondition } from '../structures/Precondition';\nimport { UserError } from './UserError';\n\n/**\n * Errors thrown by preconditions\n * @property name This will be `'PreconditionError'` and can be used to distinguish the type of error when any error gets thrown\n */\nexport class PreconditionError extends UserError {\n\tpublic readonly precondition: Precondition;\n\n\tpublic constructor(options: PreconditionError.Options) {\n\t\tsuper({ ...options, identifier: options.identifier ?? options.precondition.name });\n\t\tthis.precondition = options.precondition;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/class-literal-property-style\n\tpublic override get name(): string {\n\t\treturn 'PreconditionError';\n\t}\n}\n\nexport namespace PreconditionError {\n\t/**\n\t * The options for {@link PreconditionError}.\n\t * @since 1.0.0\n\t */\n\texport interface Options extends Omit<UserError.Options, 'identifier'> {\n\t\t/**\n\t\t * The precondition that caused the error.\n\t\t * @since 1.0.0\n\t\t */\n\t\tprecondition: Precondition;\n\n\t\t/**\n\t\t * The identifier.\n\t\t * @since 1.0.0\n\t\t * @default precondition.name\n\t\t */\n\t\tidentifier?: string;\n\t}\n}\n"]}