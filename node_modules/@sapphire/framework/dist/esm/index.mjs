import './chunk-G5GHKT7C.mjs';
import { acquire, setDefaultBehaviorWhenNotIdentical, setDefaultGuildIds, getDefaultGuildIds, getDefaultBehaviorWhenNotIdentical, registries } from './lib/utils/application-commands/ApplicationCommandRegistries.mjs';
import { CorePrecondition } from './preconditions/ClientPermissions.mjs';
import { CorePrecondition as CorePrecondition$1 } from './preconditions/Cooldown.mjs';
import { CorePrecondition as CorePrecondition$2 } from './preconditions/DMOnly.mjs';
import { CorePrecondition as CorePrecondition$3 } from './preconditions/Enabled.mjs';
import { CorePrecondition as CorePrecondition$5 } from './preconditions/GuildNewsOnly.mjs';
import { CorePrecondition as CorePrecondition$6 } from './preconditions/GuildNewsThreadOnly.mjs';
import { CorePrecondition as CorePrecondition$7 } from './preconditions/GuildOnly.mjs';
import { CorePrecondition as CorePrecondition$8 } from './preconditions/GuildPrivateThreadOnly.mjs';
import { CorePrecondition as CorePrecondition$9 } from './preconditions/GuildPublicThreadOnly.mjs';
import { CorePrecondition as CorePrecondition$a } from './preconditions/GuildTextOnly.mjs';
import { CorePrecondition as CorePrecondition$c } from './preconditions/GuildThreadOnly.mjs';
import { CorePrecondition as CorePrecondition$b } from './preconditions/GuildVoiceOnly.mjs';
import { CorePrecondition as CorePrecondition$d } from './preconditions/NSFW.mjs';
import { CorePrecondition as CorePrecondition$4 } from './preconditions/RunIn.mjs';
import { CorePrecondition as CorePrecondition$e } from './preconditions/UserPermissions.mjs';
export { AliasPiece, AliasStore, LoaderError, MissingExportsError, Piece, Store, StoreRegistry, container } from '@sapphire/pieces';
export * from '@sapphire/result';
export * from './lib/SapphireClient.mjs';
export * from './lib/errors/ArgumentError.mjs';
export * from './lib/errors/Identifiers.mjs';
export * from './lib/errors/PreconditionError.mjs';
export * from './lib/errors/UserError.mjs';
export * from './lib/parsers/Args.mjs';
export * from './lib/plugins/Plugin.mjs';
export * from './lib/plugins/PluginManager.mjs';
export * from './lib/plugins/symbols.mjs';
import * as index_mjs from './lib/precondition-resolvers/index.mjs';
export { index_mjs as PreconditionResolvers };
import * as index_mjs$1 from './lib/resolvers/index.mjs';
export { index_mjs$1 as Resolvers };
export * from './lib/structures/Argument.mjs';
export * from './lib/structures/ArgumentStore.mjs';
export * from './lib/structures/Command.mjs';
export * from './lib/structures/CommandStore.mjs';
export * from './lib/structures/InteractionHandler.mjs';
export * from './lib/structures/InteractionHandlerStore.mjs';
export * from './lib/structures/Listener.mjs';
export * from './lib/structures/ListenerLoaderStrategy.mjs';
export * from './lib/structures/ListenerStore.mjs';
export * from './lib/structures/Precondition.mjs';
export * from './lib/structures/PreconditionStore.mjs';
export * from './lib/types/ArgumentContexts.mjs';
export * from './lib/types/CommandTypes.mjs';
export * from './lib/types/Enums.mjs';
export * from './lib/types/Events.mjs';
export { ApplicationCommandRegistry } from './lib/utils/application-commands/ApplicationCommandRegistry.mjs';
export * from './lib/utils/logger/ILogger.mjs';
export * from './lib/utils/logger/Logger.mjs';
export * from './lib/utils/preconditions/IPreconditionContainer.mjs';
export * from './lib/utils/preconditions/PreconditionContainerArray.mjs';
export * from './lib/utils/preconditions/PreconditionContainerSingle.mjs';
export * from './lib/utils/preconditions/conditions/IPreconditionCondition.mjs';
export * from './lib/utils/preconditions/conditions/PreconditionConditionAnd.mjs';
export * from './lib/utils/preconditions/conditions/PreconditionConditionOr.mjs';
export * from './lib/utils/preconditions/containers/ClientPermissionsPrecondition.mjs';
export * from './lib/utils/preconditions/containers/UserPermissionsPrecondition.mjs';

var ApplicationCommandRegistries = {
  acquire,
  setDefaultBehaviorWhenNotIdentical,
  setDefaultGuildIds,
  getDefaultGuildIds,
  getDefaultBehaviorWhenNotIdentical,
  get registries() {
    return registries;
  }
};
var CorePreconditions = {
  ClientPermissions: CorePrecondition,
  Cooldown: CorePrecondition$1,
  /** @deprecated Use {@link RunIn} instead. */
  DMOnly: CorePrecondition$2,
  Enabled: CorePrecondition$3,
  RunIn: CorePrecondition$4,
  /** @deprecated Use {@link RunIn} instead. */
  GuildNewsOnly: CorePrecondition$5,
  /** @deprecated Use {@link RunIn} instead. */
  GuildNewsThreadOnly: CorePrecondition$6,
  /** @deprecated Use {@link RunIn} instead. */
  GuildOnly: CorePrecondition$7,
  /** @deprecated Use {@link RunIn} instead. */
  GuildPrivateThreadOnly: CorePrecondition$8,
  /** @deprecated Use {@link RunIn} instead. */
  GuildPublicThreadOnly: CorePrecondition$9,
  /** @deprecated Use {@link RunIn} instead. */
  GuildTextOnly: CorePrecondition$a,
  /** @deprecated Use {@link RunIn} instead. */
  GuildVoiceOnly: CorePrecondition$b,
  /** @deprecated Use {@link RunIn} instead. */
  GuildThreadOnly: CorePrecondition$c,
  NSFW: CorePrecondition$d,
  UserPermissions: CorePrecondition$e
};
var version = "5.0.7";

export { ApplicationCommandRegistries, CorePreconditions, version };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.mjs.map