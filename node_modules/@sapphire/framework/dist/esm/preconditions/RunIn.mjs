import { __name } from '../chunk-G5GHKT7C.mjs';
import { container } from '@sapphire/pieces';
import { Identifiers } from '../lib/errors/Identifiers.mjs';
import { Command } from '../lib/structures/Command.mjs';
import { AllFlowsPrecondition } from '../lib/structures/Precondition.mjs';

var _CorePrecondition = class _CorePrecondition extends AllFlowsPrecondition {
  messageRun(message, _, context) {
    if (!context.types)
      return this.ok();
    const channelType = message.channel.type;
    if (Command.runInTypeIsSpecificsObject(context.types)) {
      return context.types.messageRun.includes(channelType) ? this.ok() : this.makeSharedError(context);
    }
    return context.types.includes(channelType) ? this.ok() : this.makeSharedError(context);
  }
  async chatInputRun(interaction, _, context) {
    if (!context.types)
      return this.ok();
    const channelType = (await this.fetchChannelFromInteraction(interaction)).type;
    if (Command.runInTypeIsSpecificsObject(context.types)) {
      return context.types.chatInputRun.includes(channelType) ? this.ok() : this.makeSharedError(context);
    }
    return context.types.includes(channelType) ? this.ok() : this.makeSharedError(context);
  }
  async contextMenuRun(interaction, _, context) {
    if (!context.types)
      return this.ok();
    const channelType = (await this.fetchChannelFromInteraction(interaction)).type;
    if (Command.runInTypeIsSpecificsObject(context.types)) {
      return context.types.contextMenuRun.includes(channelType) ? this.ok() : this.makeSharedError(context);
    }
    return context.types.includes(channelType) ? this.ok() : this.makeSharedError(context);
  }
  makeSharedError(context) {
    return this.error({
      identifier: Identifiers.PreconditionRunIn,
      message: "You cannot run this message command in this type of channel.",
      context: { types: context.types }
    });
  }
};
__name(_CorePrecondition, "CorePrecondition");
var CorePrecondition = _CorePrecondition;
void container.stores.loadPiece({
  name: "RunIn",
  piece: CorePrecondition,
  store: "preconditions"
});

export { CorePrecondition };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=RunIn.mjs.map