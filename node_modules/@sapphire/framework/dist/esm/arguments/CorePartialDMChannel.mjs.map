{"version":3,"sources":["../../../src/arguments/CorePartialDMChannel.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,iBAAiB;AAE1B,SAAS,+BAA+B;AACxC,SAAS,gBAAgB;AAElB,IAAM,gBAAN,MAAM,sBAAqB,SAAuC;AAAA,EACjE,YAAY,SAAiC;AACnD,UAAM,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAAA,EAC5C;AAAA,EAEO,IAAI,WAAmB,SAA0E;AACvG,UAAM,WAAW,wBAAwB,WAAW,QAAQ,OAAO;AACnE,WAAO,SAAS;AAAA,MAAW,CAAC,eAC3B,KAAK,MAAM;AAAA,QACV;AAAA,QACA;AAAA,QACA,SAAS;AAAA,QACT;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AACD;AAhByE;AAAlE,IAAM,eAAN;AAkBP,KAAK,UAAU,OAAO,UAAU;AAAA,EAC/B,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AACR,CAAC","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { DMChannel, PartialDMChannel } from 'discord.js';\nimport { resolvePartialDMChannel } from '../lib/resolvers/partialDMChannel';\nimport { Argument } from '../lib/structures/Argument';\n\nexport class CoreArgument extends Argument<DMChannel | PartialDMChannel> {\n\tpublic constructor(context: Argument.LoaderContext) {\n\t\tsuper(context, { name: 'partialDMChannel' });\n\t}\n\n\tpublic run(parameter: string, context: Argument.Context): Argument.Result<DMChannel | PartialDMChannel> {\n\t\tconst resolved = resolvePartialDMChannel(parameter, context.message);\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: 'The argument did not resolve to a Partial DM channel.',\n\t\t\t\tcontext\n\t\t\t})\n\t\t);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'partialDMChannel',\n\tpiece: CoreArgument,\n\tstore: 'arguments'\n});\n"]}