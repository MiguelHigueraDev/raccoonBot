import { __name } from '../chunk-G5GHKT7C.mjs';
import { container } from '@sapphire/pieces';
import { Identifiers } from '../lib/errors/Identifiers.mjs';
import { resolveGuildPrivateThreadChannel } from '../lib/resolvers/guildPrivateThreadChannel.mjs';
import { Argument } from '../lib/structures/Argument.mjs';

var _CoreArgument = class _CoreArgument extends Argument {
  constructor(context) {
    super(context, { name: "guildPrivateThreadChannel" });
  }
  run(parameter, context) {
    const { guild } = context.message;
    if (!guild) {
      return this.error({
        parameter,
        identifier: Identifiers.ArgumentGuildChannelMissingGuildError,
        message: "This command can only be used in a server.",
        context
      });
    }
    const resolved = resolveGuildPrivateThreadChannel(parameter, guild);
    return resolved.mapErrInto(
      (identifier) => this.error({
        parameter,
        identifier,
        message: "The given argument did not resolve to a valid private thread.",
        context: { ...context, guild }
      })
    );
  }
};
__name(_CoreArgument, "CoreArgument");
var CoreArgument = _CoreArgument;
void container.stores.loadPiece({
  name: "guildPrivateThreadChannel",
  piece: CoreArgument,
  store: "arguments"
});

export { CoreArgument };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=CoreGuildPrivateThreadChannel.mjs.map