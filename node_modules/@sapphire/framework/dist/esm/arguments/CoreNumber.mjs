import { __name } from '../chunk-G5GHKT7C.mjs';
import { container } from '@sapphire/pieces';
import { Identifiers } from '../lib/errors/Identifiers.mjs';
import { resolveNumber } from '../lib/resolvers/number.mjs';
import { Argument } from '../lib/structures/Argument.mjs';

var _CoreArgument = class _CoreArgument extends Argument {
  constructor(context) {
    super(context, { name: "number" });
    this.messages = {
      [Identifiers.ArgumentNumberTooSmall]: ({ minimum }) => `The given number must be greater than ${minimum}.`,
      [Identifiers.ArgumentNumberTooLarge]: ({ maximum }) => `The given number must be less than ${maximum}.`,
      [Identifiers.ArgumentNumberError]: () => "The argument did not resolve to a valid number."
    };
  }
  run(parameter, context) {
    const resolved = resolveNumber(parameter, { minimum: context.minimum, maximum: context.maximum });
    return resolved.mapErrInto(
      (identifier) => this.error({
        parameter,
        identifier,
        message: this.messages[identifier](context),
        context
      })
    );
  }
};
__name(_CoreArgument, "CoreArgument");
var CoreArgument = _CoreArgument;
void container.stores.loadPiece({
  name: "number",
  piece: CoreArgument,
  store: "arguments"
});

export { CoreArgument };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=CoreNumber.mjs.map