{"version":3,"sources":["../../../src/arguments/CoreGuild.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,iBAAiB;AAE1B,SAAS,oBAAoB;AAC7B,SAAS,gBAAgB;AAElB,IAAM,gBAAN,MAAM,sBAAqB,SAAgB;AAAA,EAC1C,YAAY,SAAiC;AACnD,UAAM,SAAS,EAAE,MAAM,QAAQ,CAAC;AAAA,EACjC;AAAA,EAEA,MAAa,IAAI,WAAmB,SAAwD;AAC3F,UAAM,WAAW,MAAM,aAAa,SAAS;AAC7C,WAAO,SAAS;AAAA,MAAW,CAAC,eAC3B,KAAK,MAAM;AAAA,QACV;AAAA,QACA;AAAA,QACA,SAAS;AAAA,QACT;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AACD;AAhBkD;AAA3C,IAAM,eAAN;AAkBP,KAAK,UAAU,OAAO,UAAU;AAAA,EAC/B,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AACR,CAAC","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { Guild } from 'discord.js';\nimport { resolveGuild } from '../lib/resolvers/guild';\nimport { Argument } from '../lib/structures/Argument';\n\nexport class CoreArgument extends Argument<Guild> {\n\tpublic constructor(context: Argument.LoaderContext) {\n\t\tsuper(context, { name: 'guild' });\n\t}\n\n\tpublic async run(parameter: string, context: Argument.Context): Argument.AsyncResult<Guild> {\n\t\tconst resolved = await resolveGuild(parameter);\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: 'The given argument did not resolve to a Discord guild.',\n\t\t\t\tcontext\n\t\t\t})\n\t\t);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'guild',\n\tpiece: CoreArgument,\n\tstore: 'arguments'\n});\n"]}