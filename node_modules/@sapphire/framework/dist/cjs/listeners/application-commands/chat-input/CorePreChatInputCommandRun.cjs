'use strict';

var pieces = require('@sapphire/pieces');
var Listener_cjs = require('../../../lib/structures/Listener.cjs');
var Events_cjs = require('../../../lib/types/Events.cjs');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var _CoreListener = class _CoreListener extends Listener_cjs.Listener {
  constructor(context) {
    super(context, { event: Events_cjs.Events.PreChatInputCommandRun });
  }
  async run(payload) {
    const { command, interaction } = payload;
    const globalResult = await this.container.stores.get("preconditions").chatInputRun(interaction, command, payload);
    if (globalResult.isErr()) {
      this.container.client.emit(Events_cjs.Events.ChatInputCommandDenied, globalResult.unwrapErr(), payload);
      return;
    }
    const localResult = await command.preconditions.chatInputRun(interaction, command, payload);
    if (localResult.isErr()) {
      this.container.client.emit(Events_cjs.Events.ChatInputCommandDenied, localResult.unwrapErr(), payload);
      return;
    }
    this.container.client.emit(Events_cjs.Events.ChatInputCommandAccepted, payload);
  }
};
__name(_CoreListener, "CoreListener");
var CoreListener = _CoreListener;
void pieces.container.stores.loadPiece({
  name: "CorePreChatInputCommandRun",
  piece: CoreListener,
  store: "listeners"
});

exports.CoreListener = CoreListener;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=CorePreChatInputCommandRun.cjs.map