'use strict';

var pieces = require('@sapphire/pieces');
var result = require('@sapphire/result');
var stopwatch = require('@sapphire/stopwatch');
var Listener_cjs = require('../../../lib/structures/Listener.cjs');
var Events_cjs = require('../../../lib/types/Events.cjs');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var _CoreListener = class _CoreListener extends Listener_cjs.Listener {
  constructor(context) {
    super(context, { event: Events_cjs.Events.ContextMenuCommandAccepted });
  }
  async run(payload) {
    const { command, context, interaction } = payload;
    const result$1 = await result.Result.fromAsync(async () => {
      this.container.client.emit(Events_cjs.Events.ContextMenuCommandRun, interaction, command, { ...payload });
      const stopwatch$1 = new stopwatch.Stopwatch();
      const result2 = await command.contextMenuRun(interaction, context);
      const { duration } = stopwatch$1.stop();
      this.container.client.emit(Events_cjs.Events.ContextMenuCommandSuccess, { ...payload, result: result2, duration });
      return duration;
    });
    result$1.inspectErr((error) => this.container.client.emit(Events_cjs.Events.ContextMenuCommandError, error, { ...payload, duration: -1 }));
    this.container.client.emit(Events_cjs.Events.ContextMenuCommandFinish, interaction, command, {
      ...payload,
      success: result$1.isOk(),
      duration: result$1.unwrapOr(-1)
    });
  }
};
__name(_CoreListener, "CoreListener");
var CoreListener = _CoreListener;
void pieces.container.stores.loadPiece({
  name: "CoreContextMenuCommandAccepted",
  piece: CoreListener,
  store: "listeners"
});

exports.CoreListener = CoreListener;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=CoreContextMenuCommandAccepted.cjs.map