{"version":3,"sources":["../../../src/preconditions/ClientPermissions.ts"],"names":[],"mappings":"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","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { isNullish } from '@sapphire/utilities';\nimport {\n\tBaseInteraction,\n\tChatInputCommandInteraction,\n\tContextMenuCommandInteraction,\n\tPermissionFlagsBits,\n\tPermissionsBitField,\n\ttype Message,\n\ttype PermissionsString,\n\ttype TextBasedChannel\n} from 'discord.js';\nimport { Identifiers } from '../lib/errors/Identifiers';\nimport type { Command } from '../lib/structures/Command';\nimport { AllFlowsPrecondition } from '../lib/structures/Precondition';\n\nexport interface PermissionPreconditionContext extends AllFlowsPrecondition.Context {\n\tpermissions?: PermissionsBitField;\n}\n\nexport class CorePrecondition extends AllFlowsPrecondition {\n\tprivate readonly dmChannelPermissions = new PermissionsBitField(\n\t\t~new PermissionsBitField([\n\t\t\t//\n\t\t\tPermissionFlagsBits.AddReactions,\n\t\t\tPermissionFlagsBits.AttachFiles,\n\t\t\tPermissionFlagsBits.EmbedLinks,\n\t\t\tPermissionFlagsBits.ReadMessageHistory,\n\t\t\tPermissionFlagsBits.SendMessages,\n\t\t\tPermissionFlagsBits.UseExternalEmojis,\n\t\t\tPermissionFlagsBits.ViewChannel\n\t\t]).bitfield & PermissionsBitField.All\n\t).freeze();\n\n\tpublic async messageRun(message: Message, _: Command, context: PermissionPreconditionContext): AllFlowsPrecondition.AsyncResult {\n\t\tconst required = context.permissions ?? new PermissionsBitField();\n\t\tconst { channel } = message;\n\n\t\tif (!message.client.id) {\n\t\t\treturn this.error({\n\t\t\t\tidentifier: Identifiers.PreconditionClientPermissionsNoClient,\n\t\t\t\tmessage: 'There was no client to validate the permissions for.'\n\t\t\t});\n\t\t}\n\n\t\tconst permissions = await this.getPermissionsForChannel(channel, message);\n\n\t\treturn this.sharedRun(required, permissions, 'message');\n\t}\n\n\tpublic async chatInputRun(\n\t\tinteraction: ChatInputCommandInteraction,\n\t\t_: Command,\n\t\tcontext: PermissionPreconditionContext\n\t): AllFlowsPrecondition.AsyncResult {\n\t\tconst required = context.permissions ?? new PermissionsBitField();\n\n\t\tconst channel = await this.fetchChannelFromInteraction(interaction);\n\n\t\tconst permissions = await this.getPermissionsForChannel(channel, interaction);\n\n\t\treturn this.sharedRun(required, permissions, 'chat input');\n\t}\n\n\tpublic async contextMenuRun(\n\t\tinteraction: ContextMenuCommandInteraction,\n\t\t_: Command,\n\t\tcontext: PermissionPreconditionContext\n\t): AllFlowsPrecondition.AsyncResult {\n\t\tconst required = context.permissions ?? new PermissionsBitField();\n\n\t\tconst channel = await this.fetchChannelFromInteraction(interaction);\n\n\t\tconst permissions = await this.getPermissionsForChannel(channel, interaction);\n\n\t\treturn this.sharedRun(required, permissions, 'context menu');\n\t}\n\n\tprivate async getPermissionsForChannel(channel: TextBasedChannel, messageOrInteraction: Message | BaseInteraction) {\n\t\tlet permissions: PermissionsBitField | null = this.dmChannelPermissions;\n\n\t\tif (messageOrInteraction.inGuild() && !channel.isDMBased()) {\n\t\t\tif (isNullish(messageOrInteraction.applicationId)) {\n\t\t\t\tconst me = await messageOrInteraction.guild?.members.fetchMe();\n\t\t\t\tif (me) {\n\t\t\t\t\tpermissions = channel.permissionsFor(me);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpermissions = channel.permissionsFor(messageOrInteraction.applicationId);\n\t\t\t}\n\t\t}\n\n\t\treturn permissions;\n\t}\n\n\tprivate sharedRun(requiredPermissions: PermissionsBitField, availablePermissions: PermissionsBitField | null, commandType: string) {\n\t\tif (!availablePermissions) {\n\t\t\treturn this.error({\n\t\t\t\tidentifier: Identifiers.PreconditionClientPermissionsNoPermissions,\n\t\t\t\tmessage: `I was unable to resolve my permissions in the ${commandType} command invocation channel.`\n\t\t\t});\n\t\t}\n\n\t\tconst missing = availablePermissions.missing(requiredPermissions);\n\t\treturn missing.length === 0\n\t\t\t? this.ok()\n\t\t\t: this.error({\n\t\t\t\t\tidentifier: Identifiers.PreconditionClientPermissions,\n\t\t\t\t\tmessage: `I am missing the following permissions to run this command: ${missing\n\t\t\t\t\t\t.map((perm) => CorePrecondition.readablePermissions[perm])\n\t\t\t\t\t\t.join(', ')}`,\n\t\t\t\t\tcontext: { missing }\n\t\t\t\t});\n\t}\n\n\tpublic static readonly readablePermissions: Record<PermissionsString, string> = {\n\t\tAddReactions: 'Add Reactions',\n\t\tAdministrator: 'Administrator',\n\t\tAttachFiles: 'Attach Files',\n\t\tBanMembers: 'Ban Members',\n\t\tChangeNickname: 'Change Nickname',\n\t\tConnect: 'Connect',\n\t\tCreateInstantInvite: 'Create Instant Invite',\n\t\tCreatePrivateThreads: 'Create Private Threads',\n\t\tCreatePublicThreads: 'Create Public Threads',\n\t\tDeafenMembers: 'Deafen Members',\n\t\tEmbedLinks: 'Embed Links',\n\t\tKickMembers: 'Kick Members',\n\t\tManageChannels: 'Manage Channels',\n\t\tManageEmojisAndStickers: 'Manage Emojis and Stickers',\n\t\tManageEvents: 'Manage Events',\n\t\tManageGuild: 'Manage Server',\n\t\tManageGuildExpressions: 'Manage Guild Expressions',\n\t\tManageMessages: 'Manage Messages',\n\t\tManageNicknames: 'Manage Nicknames',\n\t\tManageRoles: 'Manage Roles',\n\t\tManageThreads: 'Manage Threads',\n\t\tManageWebhooks: 'Manage Webhooks',\n\t\tMentionEveryone: 'Mention Everyone',\n\t\tModerateMembers: 'Moderate Members',\n\t\tMoveMembers: 'Move Members',\n\t\tMuteMembers: 'Mute Members',\n\t\tPrioritySpeaker: 'Priority Speaker',\n\t\tReadMessageHistory: 'Read Message History',\n\t\tRequestToSpeak: 'Request to Speak',\n\t\tSendMessages: 'Send Messages',\n\t\tSendMessagesInThreads: 'Send Messages in Threads',\n\t\tSendTTSMessages: 'Send TTS Messages',\n\t\tSendVoiceMessages: 'Send Voice Messages',\n\t\tSpeak: 'Speak',\n\t\tStream: 'Stream',\n\t\tUseApplicationCommands: 'Use Application Commands',\n\t\tUseEmbeddedActivities: 'Start Activities',\n\t\tUseExternalEmojis: 'Use External Emojis',\n\t\tUseExternalSounds: 'Use External Sounds',\n\t\tUseExternalStickers: 'Use External Stickers',\n\t\tUseSoundboard: 'Use Soundboard',\n\t\tUseVAD: 'Use Voice Activity',\n\t\tViewAuditLog: 'View Audit Log',\n\t\tViewChannel: 'Read Messages',\n\t\tViewCreatorMonetizationAnalytics: 'View Creator Monetization Analytics',\n\t\tViewGuildInsights: 'View Guild Insights'\n\t};\n}\n\nvoid container.stores.loadPiece({\n\tname: 'ClientPermissions',\n\tpiece: CorePrecondition,\n\tstore: 'preconditions'\n});\n"]}