{"version":3,"sources":["../../../src/preconditions/RunIn.ts"],"names":[],"mappings":";;;;AAAA,SAAS,iBAAiB;AAE1B,SAAS,mBAAmB;AAC5B,SAAS,eAAe;AACxB,SAAS,4BAAgD;AAOlD,IAAM,oBAAN,MAAM,0BAAyB,qBAAqB;AAAA,EAC1C,WAAW,SAA2B,GAAmB,SAAgE;AACxI,QAAI,CAAC,QAAQ;AAAO,aAAO,KAAK,GAAG;AAEnC,UAAM,cAAc,QAAQ,QAAQ;AAEpC,QAAI,QAAQ,2BAA2B,QAAQ,KAAK,GAAG;AACtD,aAAO,QAAQ,MAAM,WAAW,SAAS,WAAW,IAAI,KAAK,GAAG,IAAI,KAAK,gBAAgB,OAAO;AAAA,IACjG;AAEA,WAAO,QAAQ,MAAM,SAAS,WAAW,IAAI,KAAK,GAAG,IAAI,KAAK,gBAAgB,OAAO;AAAA,EACtF;AAAA,EAEA,MAAsB,aACrB,aACA,GACA,SACmC;AACnC,QAAI,CAAC,QAAQ;AAAO,aAAO,KAAK,GAAG;AAEnC,UAAM,eAAe,MAAM,KAAK,4BAA4B,WAAW,GAAG;AAE1E,QAAI,QAAQ,2BAA2B,QAAQ,KAAK,GAAG;AACtD,aAAO,QAAQ,MAAM,aAAa,SAAS,WAAW,IAAI,KAAK,GAAG,IAAI,KAAK,gBAAgB,OAAO;AAAA,IACnG;AAEA,WAAO,QAAQ,MAAM,SAAS,WAAW,IAAI,KAAK,GAAG,IAAI,KAAK,gBAAgB,OAAO;AAAA,EACtF;AAAA,EAEA,MAAsB,eACrB,aACA,GACA,SACmC;AACnC,QAAI,CAAC,QAAQ;AAAO,aAAO,KAAK,GAAG;AAEnC,UAAM,eAAe,MAAM,KAAK,4BAA4B,WAAW,GAAG;AAE1E,QAAI,QAAQ,2BAA2B,QAAQ,KAAK,GAAG;AACtD,aAAO,QAAQ,MAAM,eAAe,SAAS,WAAW,IAAI,KAAK,GAAG,IAAI,KAAK,gBAAgB,OAAO;AAAA,IACrG;AAEA,WAAO,QAAQ,MAAM,SAAS,WAAW,IAAI,KAAK,GAAG,IAAI,KAAK,gBAAgB,OAAO;AAAA,EACtF;AAAA,EAEQ,gBAAgB,SAAgE;AACvF,WAAO,KAAK,MAAM;AAAA,MACjB,YAAY,YAAY;AAAA,MACxB,SAAS;AAAA,MACT,SAAS,EAAE,OAAO,QAAQ,MAAM;AAAA,IACjC,CAAC;AAAA,EACF;AACD;AApD2D;AAApD,IAAM,mBAAN;AAsDP,KAAK,UAAU,OAAO,UAAU;AAAA,EAC/B,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AACR,CAAC","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { ChatInputCommandInteraction, ContextMenuCommandInteraction, Message } from 'discord.js';\nimport { Identifiers } from '../lib/errors/Identifiers';\nimport { Command } from '../lib/structures/Command';\nimport { AllFlowsPrecondition, type Preconditions } from '../lib/structures/Precondition';\nimport type { ChatInputCommand, ContextMenuCommand, MessageCommand } from '../lib/types/CommandTypes';\n\nexport interface RunInPreconditionContext extends AllFlowsPrecondition.Context {\n\ttypes?: Preconditions['RunIn']['types'];\n}\n\nexport class CorePrecondition extends AllFlowsPrecondition {\n\tpublic override messageRun(message: Message<boolean>, _: MessageCommand, context: RunInPreconditionContext): AllFlowsPrecondition.Result {\n\t\tif (!context.types) return this.ok();\n\n\t\tconst channelType = message.channel.type;\n\n\t\tif (Command.runInTypeIsSpecificsObject(context.types)) {\n\t\t\treturn context.types.messageRun.includes(channelType) ? this.ok() : this.makeSharedError(context);\n\t\t}\n\n\t\treturn context.types.includes(channelType) ? this.ok() : this.makeSharedError(context);\n\t}\n\n\tpublic override async chatInputRun(\n\t\tinteraction: ChatInputCommandInteraction,\n\t\t_: ChatInputCommand,\n\t\tcontext: RunInPreconditionContext\n\t): AllFlowsPrecondition.AsyncResult {\n\t\tif (!context.types) return this.ok();\n\n\t\tconst channelType = (await this.fetchChannelFromInteraction(interaction)).type;\n\n\t\tif (Command.runInTypeIsSpecificsObject(context.types)) {\n\t\t\treturn context.types.chatInputRun.includes(channelType) ? this.ok() : this.makeSharedError(context);\n\t\t}\n\n\t\treturn context.types.includes(channelType) ? this.ok() : this.makeSharedError(context);\n\t}\n\n\tpublic override async contextMenuRun(\n\t\tinteraction: ContextMenuCommandInteraction,\n\t\t_: ContextMenuCommand,\n\t\tcontext: RunInPreconditionContext\n\t): AllFlowsPrecondition.AsyncResult {\n\t\tif (!context.types) return this.ok();\n\n\t\tconst channelType = (await this.fetchChannelFromInteraction(interaction)).type;\n\n\t\tif (Command.runInTypeIsSpecificsObject(context.types)) {\n\t\t\treturn context.types.contextMenuRun.includes(channelType) ? this.ok() : this.makeSharedError(context);\n\t\t}\n\n\t\treturn context.types.includes(channelType) ? this.ok() : this.makeSharedError(context);\n\t}\n\n\tprivate makeSharedError(context: RunInPreconditionContext): AllFlowsPrecondition.Result {\n\t\treturn this.error({\n\t\t\tidentifier: Identifiers.PreconditionRunIn,\n\t\t\tmessage: 'You cannot run this message command in this type of channel.',\n\t\t\tcontext: { types: context.types }\n\t\t});\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'RunIn',\n\tpiece: CorePrecondition,\n\tstore: 'preconditions'\n});\n"]}