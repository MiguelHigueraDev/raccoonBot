'use strict';

var pieces = require('@sapphire/pieces');
var Identifiers_cjs = require('../lib/errors/Identifiers.cjs');
var Command_cjs = require('../lib/structures/Command.cjs');
var Precondition_cjs = require('../lib/structures/Precondition.cjs');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var _CorePrecondition = class _CorePrecondition extends Precondition_cjs.AllFlowsPrecondition {
  messageRun(message, _, context) {
    if (!context.types)
      return this.ok();
    const channelType = message.channel.type;
    if (Command_cjs.Command.runInTypeIsSpecificsObject(context.types)) {
      return context.types.messageRun.includes(channelType) ? this.ok() : this.makeSharedError(context);
    }
    return context.types.includes(channelType) ? this.ok() : this.makeSharedError(context);
  }
  async chatInputRun(interaction, _, context) {
    if (!context.types)
      return this.ok();
    const channelType = (await this.fetchChannelFromInteraction(interaction)).type;
    if (Command_cjs.Command.runInTypeIsSpecificsObject(context.types)) {
      return context.types.chatInputRun.includes(channelType) ? this.ok() : this.makeSharedError(context);
    }
    return context.types.includes(channelType) ? this.ok() : this.makeSharedError(context);
  }
  async contextMenuRun(interaction, _, context) {
    if (!context.types)
      return this.ok();
    const channelType = (await this.fetchChannelFromInteraction(interaction)).type;
    if (Command_cjs.Command.runInTypeIsSpecificsObject(context.types)) {
      return context.types.contextMenuRun.includes(channelType) ? this.ok() : this.makeSharedError(context);
    }
    return context.types.includes(channelType) ? this.ok() : this.makeSharedError(context);
  }
  makeSharedError(context) {
    return this.error({
      identifier: Identifiers_cjs.Identifiers.PreconditionRunIn,
      message: "You cannot run this message command in this type of channel.",
      context: { types: context.types }
    });
  }
};
__name(_CorePrecondition, "CorePrecondition");
var CorePrecondition = _CorePrecondition;
void pieces.container.stores.loadPiece({
  name: "RunIn",
  piece: CorePrecondition,
  store: "preconditions"
});

exports.CorePrecondition = CorePrecondition;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=RunIn.cjs.map