{"version":3,"sources":["../../../src/preconditions/UserPermissions.ts"],"names":[],"mappings":";;;;AAAA,SAAS,iBAAiB;AAC1B;AAAA,EAGC;AAAA,EACA;AAAA,OAIM;AACP,SAAS,mBAAmB;AAE5B,SAAS,4BAA4B;AACrC,SAAS,oBAAoB,0BAA8D;AAEpF,IAAM,oBAAN,MAAM,0BAAyB,qBAAqB;AAAA,EAApD;AAAA;AACN,SAAiB,uBAAuB,IAAI;AAAA,MAC3C,CAAC,IAAI,oBAAoB;AAAA,QACxB,oBAAoB;AAAA,QACpB,oBAAoB;AAAA,QACpB,oBAAoB;AAAA,QACpB,oBAAoB;AAAA,QACpB,oBAAoB;AAAA,QACpB,oBAAoB;AAAA,QACpB,oBAAoB;AAAA,QACpB,oBAAoB;AAAA,QACpB,oBAAoB;AAAA,MACrB,CAAC,EAAE,WAAW,oBAAoB;AAAA,IACnC,EAAE,OAAO;AAAA;AAAA,EAEF,WAAW,SAAkB,UAAmB,SAAqE;AAC3H,UAAM,WAAW,QAAQ,eAAe,IAAI,oBAAoB;AAChE,UAAM,UAAU,QAAQ;AACxB,UAAM,cAAc,QAAQ,QAAQ,QAAQ,eAAe,QAAQ,MAAM,IAAI,KAAK;AAElF,WAAO,KAAK,UAAU,UAAU,aAAa,SAAS;AAAA,EACvD;AAAA,EAEO,aACN,aACA,UACA,SAC8B;AAC9B,UAAM,WAAW,QAAQ,eAAe,IAAI,oBAAoB;AAChE,UAAM,cAAc,YAAY,UAAU,YAAY,oBAAoB,KAAK;AAE/E,WAAO,KAAK,UAAU,UAAU,aAAa,YAAY;AAAA,EAC1D;AAAA,EAEO,eACN,aACA,UACA,SAC8B;AAC9B,UAAM,WAAW,QAAQ,eAAe,IAAI,oBAAoB;AAChE,UAAM,cAAc,YAAY,UAAU,YAAY,oBAAoB,KAAK;AAE/E,WAAO,KAAK,UAAU,UAAU,aAAa,cAAc;AAAA,EAC5D;AAAA,EAEQ,UACP,qBACA,sBACA,aAC8B;AAC9B,QAAI,CAAC,sBAAsB;AAC1B,aAAO,KAAK,MAAM;AAAA,QACjB,YAAY,YAAY;AAAA,QACxB,SAAS,6DAA6D,WAAW;AAAA,MAClF,CAAC;AAAA,IACF;AAEA,UAAM,UAAU,qBAAqB,QAAQ,mBAAmB;AAChE,WAAO,QAAQ,WAAW,IACvB,KAAK,GAAG,IACR,KAAK,MAAM;AAAA,MACX,YAAY,YAAY;AAAA,MACxB,SAAS,kEAAkE,QACzE,IAAI,CAAC,SAAS,mBAAmB,oBAAoB,IAAI,CAAC,EAC1D,KAAK,IAAI,CAAC;AAAA,MACZ,SAAS,EAAE,QAAQ;AAAA,IACpB,CAAC;AAAA,EACJ;AACD;AApE2D;AAApD,IAAM,mBAAN;AAsEP,KAAK,UAAU,OAAO,UAAU;AAAA,EAC/B,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AACR,CAAC","sourcesContent":["import { container } from '@sapphire/pieces';\nimport {\n\tChatInputCommandInteraction,\n\tContextMenuCommandInteraction,\n\tPermissionFlagsBits,\n\tPermissionsBitField,\n\ttype Message,\n\ttype NewsChannel,\n\ttype TextChannel\n} from 'discord.js';\nimport { Identifiers } from '../lib/errors/Identifiers';\nimport type { Command } from '../lib/structures/Command';\nimport { AllFlowsPrecondition } from '../lib/structures/Precondition';\nimport { CorePrecondition as ClientPrecondition, type PermissionPreconditionContext } from './ClientPermissions';\n\nexport class CorePrecondition extends AllFlowsPrecondition {\n\tprivate readonly dmChannelPermissions = new PermissionsBitField(\n\t\t~new PermissionsBitField([\n\t\t\tPermissionFlagsBits.AddReactions,\n\t\t\tPermissionFlagsBits.AttachFiles,\n\t\t\tPermissionFlagsBits.EmbedLinks,\n\t\t\tPermissionFlagsBits.ReadMessageHistory,\n\t\t\tPermissionFlagsBits.SendMessages,\n\t\t\tPermissionFlagsBits.UseExternalEmojis,\n\t\t\tPermissionFlagsBits.ViewChannel,\n\t\t\tPermissionFlagsBits.UseExternalStickers,\n\t\t\tPermissionFlagsBits.MentionEveryone\n\t\t]).bitfield & PermissionsBitField.All\n\t).freeze();\n\n\tpublic messageRun(message: Message, _command: Command, context: PermissionPreconditionContext): AllFlowsPrecondition.Result {\n\t\tconst required = context.permissions ?? new PermissionsBitField();\n\t\tconst channel = message.channel as TextChannel | NewsChannel;\n\t\tconst permissions = message.guild ? channel.permissionsFor(message.author) : this.dmChannelPermissions;\n\n\t\treturn this.sharedRun(required, permissions, 'message');\n\t}\n\n\tpublic chatInputRun(\n\t\tinteraction: ChatInputCommandInteraction,\n\t\t_command: Command,\n\t\tcontext: PermissionPreconditionContext\n\t): AllFlowsPrecondition.Result {\n\t\tconst required = context.permissions ?? new PermissionsBitField();\n\t\tconst permissions = interaction.guildId ? interaction.memberPermissions : this.dmChannelPermissions;\n\n\t\treturn this.sharedRun(required, permissions, 'chat input');\n\t}\n\n\tpublic contextMenuRun(\n\t\tinteraction: ContextMenuCommandInteraction,\n\t\t_command: Command,\n\t\tcontext: PermissionPreconditionContext\n\t): AllFlowsPrecondition.Result {\n\t\tconst required = context.permissions ?? new PermissionsBitField();\n\t\tconst permissions = interaction.guildId ? interaction.memberPermissions : this.dmChannelPermissions;\n\n\t\treturn this.sharedRun(required, permissions, 'context menu');\n\t}\n\n\tprivate sharedRun(\n\t\trequiredPermissions: PermissionsBitField,\n\t\tavailablePermissions: PermissionsBitField | null,\n\t\tcommandType: string\n\t): AllFlowsPrecondition.Result {\n\t\tif (!availablePermissions) {\n\t\t\treturn this.error({\n\t\t\t\tidentifier: Identifiers.PreconditionUserPermissionsNoPermissions,\n\t\t\t\tmessage: `I was unable to resolve the end-user's permissions in the ${commandType} command invocation channel.`\n\t\t\t});\n\t\t}\n\n\t\tconst missing = availablePermissions.missing(requiredPermissions);\n\t\treturn missing.length === 0\n\t\t\t? this.ok()\n\t\t\t: this.error({\n\t\t\t\t\tidentifier: Identifiers.PreconditionUserPermissions,\n\t\t\t\t\tmessage: `You are missing the following permissions to run this command: ${missing\n\t\t\t\t\t\t.map((perm) => ClientPrecondition.readablePermissions[perm])\n\t\t\t\t\t\t.join(', ')}`,\n\t\t\t\t\tcontext: { missing }\n\t\t\t\t});\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'UserPermissions',\n\tpiece: CorePrecondition,\n\tstore: 'preconditions'\n});\n"]}