{"version":3,"sources":["../../../src/preconditions/Cooldown.ts"],"names":[],"mappings":";;;;AAAA,SAAS,iBAAiB;AAC1B,SAAS,wBAAwB;AACjC;AAAA,EACC;AAAA,EACA;AAAA,OAMM;AACP,SAAS,mBAAmB;AAE5B,SAAS,4BAA4B;AACrC,SAAS,mBAAmB;AASrB,IAAM,oBAAN,MAAM,0BAAyB,qBAAqB;AAAA,EAApD;AAAA;AACN,SAAO,UAAU,oBAAI,QAA2C;AAAA;AAAA,EAEzD,WAAW,SAAkB,SAAkB,SAAmE;AACxH,UAAM,aAAa,KAAK,iBAAiB,SAAS,OAAO;AAEzD,WAAO,KAAK,UAAU,QAAQ,OAAO,IAAI,SAAS,SAAS,YAAY,SAAS;AAAA,EACjF;AAAA,EAEO,aACN,aACA,SACA,SAC8B;AAC9B,UAAM,aAAa,KAAK,qBAAqB,aAAa,OAAO;AAEjE,WAAO,KAAK,UAAU,YAAY,KAAK,IAAI,SAAS,SAAS,YAAY,YAAY;AAAA,EACtF;AAAA,EAEO,eACN,aACA,SACA,SAC8B;AAC9B,UAAM,aAAa,KAAK,qBAAqB,aAAa,OAAO;AAEjE,WAAO,KAAK,UAAU,YAAY,KAAK,IAAI,SAAS,SAAS,YAAY,cAAc;AAAA,EACxF;AAAA,EAEQ,UACP,UACA,SACA,SACA,YACA,aAC8B;AAE9B,QAAI,QAAQ;AAAU,aAAO,KAAK,GAAG;AAGrC,QAAI,CAAC,QAAQ;AAAO,aAAO,KAAK,GAAG;AAGnC,QAAI,QAAQ,eAAe,SAAS,QAAQ;AAAG,aAAO,KAAK,GAAG;AAE9D,UAAM,YAAY,KAAK,WAAW,SAAS,OAAO,EAAE,QAAQ,UAAU;AAEtE,QAAI,UAAU,SAAS;AACtB,YAAM,YAAY,UAAU;AAC5B,YAAM,gBAAgB,KAAK,KAAK,MAAM,UAAU,UAAU,GAAI,GAAG,gBAAgB,YAAY;AAE7F,aAAO,KAAK,MAAM;AAAA,QACjB,YAAY,YAAY;AAAA,QACxB,SAAS,0CAA0C,WAAW,gCAAgC,aAAa;AAAA,QAC3G,SAAS,EAAE,UAAU;AAAA,MACtB,CAAC;AAAA,IACF;AAEA,cAAU,QAAQ;AAClB,WAAO,KAAK,GAAG;AAAA,EAChB;AAAA,EAEQ,iBAAiB,SAAkB,SAAsC;AAChF,YAAQ,QAAQ,OAAO;AAAA,MACtB,KAAK,YAAY;AAChB,eAAO;AAAA,MACR,KAAK,YAAY;AAChB,eAAO,QAAQ;AAAA,MAChB,KAAK,YAAY;AAChB,eAAO,QAAQ,WAAW,QAAQ;AAAA,MACnC;AACC,eAAO,QAAQ,OAAO;AAAA,IACxB;AAAA,EACD;AAAA,EAEQ,qBAAqB,aAAiC,SAAsC;AACnG,YAAQ,QAAQ,OAAO;AAAA,MACtB,KAAK,YAAY;AAChB,eAAO;AAAA,MACR,KAAK,YAAY;AAChB,eAAO,YAAY;AAAA,MACpB,KAAK,YAAY;AAChB,eAAO,YAAY,WAAW,YAAY;AAAA,MAC3C;AACC,eAAO,YAAY,KAAK;AAAA,IAC1B;AAAA,EACD;AAAA,EAEQ,WAAW,SAAkB,SAAsC;AAC1E,QAAI,UAAU,KAAK,QAAQ,IAAI,OAAO;AACtC,QAAI,CAAC,SAAS;AACb,gBAAU,IAAI,iBAAiB,QAAQ,OAAO,QAAQ,KAAK;AAC3D,WAAK,QAAQ,IAAI,SAAS,OAAO;AAAA,IAClC;AACA,WAAO;AAAA,EACR;AACD;AAhG2D;AAApD,IAAM,mBAAN;AAkGP,KAAK,UAAU,OAAO,UAAU;AAAA,EAC/B,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AACR,CAAC","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { RateLimitManager } from '@sapphire/ratelimits';\nimport {\n\tTimestampStyles,\n\ttime,\n\ttype ChatInputCommandInteraction,\n\ttype CommandInteraction,\n\ttype ContextMenuCommandInteraction,\n\ttype Message,\n\ttype Snowflake\n} from 'discord.js';\nimport { Identifiers } from '../lib/errors/Identifiers';\nimport type { Command } from '../lib/structures/Command';\nimport { AllFlowsPrecondition } from '../lib/structures/Precondition';\nimport { BucketScope } from '../lib/types/Enums';\n\nexport interface CooldownPreconditionContext extends AllFlowsPrecondition.Context {\n\tscope?: BucketScope;\n\tdelay: number;\n\tlimit?: number;\n\tfilteredUsers?: Snowflake[];\n}\n\nexport class CorePrecondition extends AllFlowsPrecondition {\n\tpublic buckets = new WeakMap<Command, RateLimitManager<string>>();\n\n\tpublic messageRun(message: Message, command: Command, context: CooldownPreconditionContext): AllFlowsPrecondition.Result {\n\t\tconst cooldownId = this.getIdFromMessage(message, context);\n\n\t\treturn this.sharedRun(message.author.id, command, context, cooldownId, 'message');\n\t}\n\n\tpublic chatInputRun(\n\t\tinteraction: ChatInputCommandInteraction,\n\t\tcommand: Command,\n\t\tcontext: CooldownPreconditionContext\n\t): AllFlowsPrecondition.Result {\n\t\tconst cooldownId = this.getIdFromInteraction(interaction, context);\n\n\t\treturn this.sharedRun(interaction.user.id, command, context, cooldownId, 'chat input');\n\t}\n\n\tpublic contextMenuRun(\n\t\tinteraction: ContextMenuCommandInteraction,\n\t\tcommand: Command,\n\t\tcontext: CooldownPreconditionContext\n\t): AllFlowsPrecondition.Result {\n\t\tconst cooldownId = this.getIdFromInteraction(interaction, context);\n\n\t\treturn this.sharedRun(interaction.user.id, command, context, cooldownId, 'context menu');\n\t}\n\n\tprivate sharedRun(\n\t\tauthorId: string,\n\t\tcommand: Command,\n\t\tcontext: CooldownPreconditionContext,\n\t\tcooldownId: string,\n\t\tcommandType: string\n\t): AllFlowsPrecondition.Result {\n\t\t// If the command it is testing for is not this one, return ok:\n\t\tif (context.external) return this.ok();\n\n\t\t// If there is no delay (undefined, null, 0), return ok:\n\t\tif (!context.delay) return this.ok();\n\n\t\t// If the user has provided any filtered users and the authorId is in that array, return ok:\n\t\tif (context.filteredUsers?.includes(authorId)) return this.ok();\n\n\t\tconst rateLimit = this.getManager(command, context).acquire(cooldownId);\n\n\t\tif (rateLimit.limited) {\n\t\t\tconst remaining = rateLimit.remainingTime;\n\t\t\tconst nextAvailable = time(Math.floor(rateLimit.expires / 1000), TimestampStyles.RelativeTime);\n\n\t\t\treturn this.error({\n\t\t\t\tidentifier: Identifiers.PreconditionCooldown,\n\t\t\t\tmessage: `There is a cooldown in effect for this ${commandType} command. It'll be available ${nextAvailable}.`,\n\t\t\t\tcontext: { remaining }\n\t\t\t});\n\t\t}\n\n\t\trateLimit.consume();\n\t\treturn this.ok();\n\t}\n\n\tprivate getIdFromMessage(message: Message, context: CooldownPreconditionContext) {\n\t\tswitch (context.scope) {\n\t\t\tcase BucketScope.Global:\n\t\t\t\treturn 'global';\n\t\t\tcase BucketScope.Channel:\n\t\t\t\treturn message.channelId;\n\t\t\tcase BucketScope.Guild:\n\t\t\t\treturn message.guildId ?? message.channelId;\n\t\t\tdefault:\n\t\t\t\treturn message.author.id;\n\t\t}\n\t}\n\n\tprivate getIdFromInteraction(interaction: CommandInteraction, context: CooldownPreconditionContext) {\n\t\tswitch (context.scope) {\n\t\t\tcase BucketScope.Global:\n\t\t\t\treturn 'global';\n\t\t\tcase BucketScope.Channel:\n\t\t\t\treturn interaction.channelId;\n\t\t\tcase BucketScope.Guild:\n\t\t\t\treturn interaction.guildId ?? interaction.channelId;\n\t\t\tdefault:\n\t\t\t\treturn interaction.user.id;\n\t\t}\n\t}\n\n\tprivate getManager(command: Command, context: CooldownPreconditionContext) {\n\t\tlet manager = this.buckets.get(command);\n\t\tif (!manager) {\n\t\t\tmanager = new RateLimitManager(context.delay, context.limit);\n\t\t\tthis.buckets.set(command, manager);\n\t\t}\n\t\treturn manager;\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'Cooldown',\n\tpiece: CorePrecondition,\n\tstore: 'preconditions'\n});\n"]}