{"version":3,"sources":["../../../../src/optional-listeners/message-command-listeners/CorePreMessageCommandRun.ts"],"names":[],"mappings":";;;;AAAA,SAAS,gBAAgB;AACzB,SAAS,cAAgD;AAElD,IAAM,gBAAN,MAAM,sBAAqB,SAA6C;AAAA,EACvE,YAAY,SAAiC;AACnD,UAAM,SAAS,EAAE,OAAO,OAAO,qBAAqB,CAAC;AAAA,EACtD;AAAA,EAEA,MAAa,IAAI,SAAsC;AACtD,UAAM,EAAE,SAAS,QAAQ,IAAI;AAG7B,UAAM,eAAe,MAAM,KAAK,UAAU,OAAO,IAAI,eAAe,EAAE,WAAW,SAAS,SAAS,OAAc;AACjH,QAAI,aAAa,MAAM,GAAG;AACzB,cAAQ,OAAO,KAAK,OAAO,sBAAsB,aAAa,UAAU,GAAG,OAAO;AAClF;AAAA,IACD;AAGA,UAAM,cAAc,MAAM,QAAQ,cAAc,WAAW,SAAS,SAAS,OAAc;AAC3F,QAAI,YAAY,MAAM,GAAG;AACxB,cAAQ,OAAO,KAAK,OAAO,sBAAsB,YAAY,UAAU,GAAG,OAAO;AACjF;AAAA,IACD;AAEA,YAAQ,OAAO,KAAK,OAAO,wBAAwB,OAAO;AAAA,EAC3D;AACD;AAxB+E;AAAxE,IAAM,eAAN","sourcesContent":["import { Listener } from '../../lib/structures/Listener';\nimport { Events, type PreMessageCommandRunPayload } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PreMessageCommandRun> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.PreMessageCommandRun });\n\t}\n\n\tpublic async run(payload: PreMessageCommandRunPayload) {\n\t\tconst { message, command } = payload;\n\n\t\t// Run global preconditions:\n\t\tconst globalResult = await this.container.stores.get('preconditions').messageRun(message, command, payload as any);\n\t\tif (globalResult.isErr()) {\n\t\t\tmessage.client.emit(Events.MessageCommandDenied, globalResult.unwrapErr(), payload);\n\t\t\treturn;\n\t\t}\n\n\t\t// Run command-specific preconditions:\n\t\tconst localResult = await command.preconditions.messageRun(message, command, payload as any);\n\t\tif (localResult.isErr()) {\n\t\t\tmessage.client.emit(Events.MessageCommandDenied, localResult.unwrapErr(), payload);\n\t\t\treturn;\n\t\t}\n\n\t\tmessage.client.emit(Events.MessageCommandAccepted, payload);\n\t}\n}\n"]}