'use strict';

var Listener_cjs = require('../../lib/structures/Listener.cjs');
var Events_cjs = require('../../lib/types/Events.cjs');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var _CoreListener = class _CoreListener extends Listener_cjs.Listener {
  constructor(context) {
    super(context, { event: Events_cjs.Events.PreMessageCommandRun });
  }
  async run(payload) {
    const { message, command } = payload;
    const globalResult = await this.container.stores.get("preconditions").messageRun(message, command, payload);
    if (globalResult.isErr()) {
      message.client.emit(Events_cjs.Events.MessageCommandDenied, globalResult.unwrapErr(), payload);
      return;
    }
    const localResult = await command.preconditions.messageRun(message, command, payload);
    if (localResult.isErr()) {
      message.client.emit(Events_cjs.Events.MessageCommandDenied, localResult.unwrapErr(), payload);
      return;
    }
    message.client.emit(Events_cjs.Events.MessageCommandAccepted, payload);
  }
};
__name(_CoreListener, "CoreListener");
var CoreListener = _CoreListener;

exports.CoreListener = CoreListener;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=CorePreMessageCommandRun.cjs.map