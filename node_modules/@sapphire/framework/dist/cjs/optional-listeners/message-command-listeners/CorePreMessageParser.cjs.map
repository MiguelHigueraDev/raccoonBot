{"version":3,"sources":["../../../../src/optional-listeners/message-command-listeners/CorePreMessageParser.ts"],"names":[],"mappings":";;;;AAAA,SAAS,mBAAmB;AAC5B,SAAS,qBAAqB,2BAAyC;AACvE,SAAS,gBAAgB;AACzB,SAAS,cAAc;AAEhB,IAAM,gBAAN,MAAM,sBAAqB,SAAyC;AAAA,EAGnE,YAAY,SAAiC;AACnD,UAAM,SAAS,EAAE,OAAO,OAAO,iBAAiB,CAAC;AAHlD,SAAiB,sBAAsB,IAAI,oBAAoB,CAAC,oBAAoB,aAAa,oBAAoB,YAAY,CAAC,EAAE,OAAO;AAAA,EAI3I;AAAA,EAEA,MAAa,IAAI,SAAkB;AAElC,UAAM,SAAS,MAAM,KAAK,gBAAgB,OAAO;AACjD,QAAI,CAAC;AAAQ;AAEb,QAAI,SAAiC;AACrC,UAAM,gBAAgB,KAAK,iBAAiB,OAAO;AACnD,UAAM,EAAE,OAAO,IAAI,KAAK;AACxB,UAAM,EAAE,YAAY,IAAI,OAAO;AAE/B,QAAI,eAAe;AAClB,UAAI,QAAQ,QAAQ,WAAW,cAAc,QAAQ;AACpD,eAAO,KAAK,OAAO,mBAAmB,OAAO;AAC7C;AAAA,MACD;AAEA,eAAS;AAAA,IACV,WAAW,aAAa,KAAK,QAAQ,OAAO,GAAG;AAC9C,eAAS;AAAA,IACV,OAAO;AACN,YAAM,WAAW,MAAM,OAAO,YAAY,OAAO;AACjD,YAAM,SAAS,KAAK,UAAU,QAAQ,SAAS,QAAQ;AACvD,UAAI,WAAW;AAAM,iBAAS;AAAA,IAC/B;AAEA,QAAI,WAAW;AAAM,aAAO,KAAK,OAAO,oBAAoB,OAAO;AAAA;AAC9D,aAAO,KAAK,OAAO,iBAAiB,SAAS,MAAM;AAAA,EACzD;AAAA,EAEA,MAAc,gBAAgB,SAAoC;AACjE,QAAI,YAAY,QAAQ,OAAO;AAAG,aAAO;AAEzC,UAAM,KAAK,MAAM,QAAQ,OAAO,QAAQ,QAAQ;AAChD,QAAI,CAAC;AAAI,aAAO;AAEhB,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,iBAAiB,QAAQ,eAAe,EAAE;AAChD,QAAI,CAAC;AAAgB,aAAO;AAE5B,WAAO,eAAe,IAAI,KAAK,qBAAqB,IAAI;AAAA,EACzD;AAAA,EAEQ,iBAAiB,SAAiC;AACzD,QAAI,KAAK,UAAU,OAAO;AAAsB,aAAO;AAEvD,QAAI,QAAQ,QAAQ,SAAS,MAAM,CAAC,QAAQ,QAAQ,WAAW,IAAI;AAAG,aAAO;AAG7E,UAAM,CAAC,QAAQ,EAAE,IAChB,QAAQ,QAAQ,CAAC,MAAM,MACpB,CAAC,GAAG,QAAQ,OAAO,MAAM,WAAW,KAAK,UAAU,OAAO,EAAG,GAAG,EAAE,IAClE,CAAC,QAAQ,QAAQ,CAAC,MAAM,MAAM,IAAI,GAAG,KAAK,UAAU,OAAO,EAAE;AAEjE,QAAI,CAAC;AAAI,aAAO;AAEhB,UAAM,eAAe,SAAS,GAAG;AAGjC,QAAI,QAAQ,QAAQ,YAAY,MAAM;AAAK,aAAO;AAGlD,UAAM,YAAY,QAAQ,QAAQ,UAAU,QAAQ,YAAY;AAChE,QAAI,cAAc;AAAI,aAAO,QAAQ,QAAQ,UAAU,GAAG,eAAe,CAAC;AAE1E,WAAO;AAAA,EACR;AAAA,EAEQ,UAAU,SAAiB,UAA4D;AAC9F,QAAI,aAAa;AAAM,aAAO;AAC9B,UAAM,EAAE,wBAAwB,IAAI,KAAK,UAAU,OAAO;AAE1D,QAAI;AAAyB,gBAAU,QAAQ,YAAY;AAE3D,QAAI,OAAO,aAAa,UAAU;AACjC,aAAO,QAAQ,WAAW,0BAA0B,SAAS,YAAY,IAAI,QAAQ,IAAI,WAAW;AAAA,IACrG;AAEA,WAAO,SAAS,KAAK,CAAC,WAAW,QAAQ,WAAW,0BAA0B,OAAO,YAAY,IAAI,MAAM,CAAC,KAAK;AAAA,EAClH;AACD;AAtF2E;AAApE,IAAM,eAAN","sourcesContent":["import { isDMChannel } from '@sapphire/discord.js-utilities';\nimport { PermissionFlagsBits, PermissionsBitField, type Message } from 'discord.js';\nimport { Listener } from '../../lib/structures/Listener';\nimport { Events } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.PreMessageParsed> {\n\tprivate readonly requiredPermissions = new PermissionsBitField([PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages]).freeze();\n\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.PreMessageParsed });\n\t}\n\n\tpublic async run(message: Message) {\n\t\t// If the bot cannot run the command due to lack of permissions, return.\n\t\tconst canRun = await this.canRunInChannel(message);\n\t\tif (!canRun) return;\n\n\t\tlet prefix: string | null | RegExp = null;\n\t\tconst mentionPrefix = this.getMentionPrefix(message);\n\t\tconst { client } = this.container;\n\t\tconst { regexPrefix } = client.options;\n\n\t\tif (mentionPrefix) {\n\t\t\tif (message.content.length === mentionPrefix.length) {\n\t\t\t\tclient.emit(Events.MentionPrefixOnly, message);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tprefix = mentionPrefix;\n\t\t} else if (regexPrefix?.test(message.content)) {\n\t\t\tprefix = regexPrefix;\n\t\t} else {\n\t\t\tconst prefixes = await client.fetchPrefix(message);\n\t\t\tconst parsed = this.getPrefix(message.content, prefixes);\n\t\t\tif (parsed !== null) prefix = parsed;\n\t\t}\n\n\t\tif (prefix === null) client.emit(Events.NonPrefixedMessage, message);\n\t\telse client.emit(Events.PrefixedMessage, message, prefix);\n\t}\n\n\tprivate async canRunInChannel(message: Message): Promise<boolean> {\n\t\tif (isDMChannel(message.channel)) return true;\n\n\t\tconst me = await message.guild?.members.fetchMe();\n\t\tif (!me) return false;\n\n\t\tconst { channel } = message;\n\t\tconst permissionsFor = channel.permissionsFor(me);\n\t\tif (!permissionsFor) return false;\n\n\t\treturn permissionsFor.has(this.requiredPermissions, true);\n\t}\n\n\tprivate getMentionPrefix(message: Message): string | null {\n\t\tif (this.container.client.disableMentionPrefix) return null;\n\t\t// If the content is shorter than 20 characters, or does not start with `<@` then skip early:\n\t\tif (message.content.length < 20 || !message.content.startsWith('<@')) return null;\n\n\t\t// Calculate the offset and the ID that is being provided\n\t\tconst [offset, id] =\n\t\t\tmessage.content[2] === '&'\n\t\t\t\t? [3, message.guild?.roles.botRoleFor(this.container.client.id!)?.id]\n\t\t\t\t: [message.content[2] === '!' ? 3 : 2, this.container.client.id];\n\n\t\tif (!id) return null;\n\n\t\tconst offsetWithId = offset + id.length;\n\n\t\t// If the mention doesn't end with `>`, skip early:\n\t\tif (message.content[offsetWithId] !== '>') return null;\n\n\t\t// Check whether or not the ID is the same as the managed role ID:\n\t\tconst mentionId = message.content.substring(offset, offsetWithId);\n\t\tif (mentionId === id) return message.content.substring(0, offsetWithId + 1);\n\n\t\treturn null;\n\t}\n\n\tprivate getPrefix(content: string, prefixes: readonly string[] | string | null): string | null {\n\t\tif (prefixes === null) return null;\n\t\tconst { caseInsensitivePrefixes } = this.container.client.options;\n\n\t\tif (caseInsensitivePrefixes) content = content.toLowerCase();\n\n\t\tif (typeof prefixes === 'string') {\n\t\t\treturn content.startsWith(caseInsensitivePrefixes ? prefixes.toLowerCase() : prefixes) ? prefixes : null;\n\t\t}\n\n\t\treturn prefixes.find((prefix) => content.startsWith(caseInsensitivePrefixes ? prefix.toLowerCase() : prefix)) ?? null;\n\t}\n}\n"]}