'use strict';

var Listener_cjs = require('../../lib/structures/Listener.cjs');
var Events_cjs = require('../../lib/types/Events.cjs');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var _CoreListener = class _CoreListener extends Listener_cjs.Listener {
  constructor(context) {
    super(context, { event: Events_cjs.Events.PrefixedMessage });
  }
  run(message, prefix) {
    const { client, stores } = this.container;
    const commandPrefix = this.getCommandPrefix(message.content, prefix);
    const prefixLess = message.content.slice(commandPrefix.length).trim();
    const spaceIndex = prefixLess.indexOf(" ");
    const commandName = spaceIndex === -1 ? prefixLess : prefixLess.slice(0, spaceIndex);
    if (commandName.length === 0) {
      client.emit(Events_cjs.Events.UnknownMessageCommandName, { message, prefix, commandPrefix });
      return;
    }
    const command = stores.get("commands").get(client.options.caseInsensitiveCommands ? commandName.toLowerCase() : commandName);
    if (!command) {
      client.emit(Events_cjs.Events.UnknownMessageCommand, { message, prefix, commandName, commandPrefix });
      return;
    }
    if (!command.messageRun) {
      client.emit(Events_cjs.Events.CommandDoesNotHaveMessageCommandHandler, { message, prefix, commandPrefix, command });
      return;
    }
    const parameters = spaceIndex === -1 ? "" : prefixLess.substring(spaceIndex + 1).trim();
    client.emit(Events_cjs.Events.PreMessageCommandRun, {
      message,
      command,
      parameters,
      context: { commandName, commandPrefix, prefix }
    });
  }
  getCommandPrefix(content, prefix) {
    return typeof prefix === "string" ? prefix : prefix.exec(content)[0];
  }
};
__name(_CoreListener, "CoreListener");
var CoreListener = _CoreListener;

exports.CoreListener = CoreListener;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=CorePrefixedMessage.cjs.map