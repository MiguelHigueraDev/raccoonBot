{"version":3,"sources":["../../../../src/optional-listeners/error-listeners/CoreInteractionHandlerParseError.ts"],"names":[],"mappings":";;;;AAAA,SAAS,gBAAgB;AACzB,SAAS,cAAwF;AAE1F,IAAM,gBAAN,MAAM,sBAAqB,SAAqD;AAAA,EAC/E,YAAY,SAAiC;AACnD,UAAM,SAAS,EAAE,OAAO,OAAO,6BAA6B,CAAC;AAAA,EAC9D;AAAA,EAEO,IAAI,OAAgB,SAA8C;AACxE,UAAM,EAAE,MAAM,SAAS,IAAI,QAAQ;AACnC,SAAK,UAAU,OAAO;AAAA,MACrB,iGAAiG,IAAI,cAAc,SAAS,IAAI;AAAA,MAChI;AAAA,IACD;AAAA,EACD;AACD;AAZuF;AAAhF,IAAM,eAAN","sourcesContent":["import { Listener } from '../../lib/structures/Listener';\nimport { Events, type InteractionHandlerParseError as InteractionHandlerParseErrorPayload } from '../../lib/types/Events';\n\nexport class CoreListener extends Listener<typeof Events.InteractionHandlerParseError> {\n\tpublic constructor(context: Listener.LoaderContext) {\n\t\tsuper(context, { event: Events.InteractionHandlerParseError });\n\t}\n\n\tpublic run(error: unknown, context: InteractionHandlerParseErrorPayload) {\n\t\tconst { name, location } = context.handler;\n\t\tthis.container.logger.error(\n\t\t\t`Encountered error while handling an interaction handler parse method for interaction-handler \"${name}\" at path \"${location.full}\"`,\n\t\t\terror\n\t\t);\n\t}\n}\n"]}