{"version":3,"sources":["../../../../src/lib/resolvers/integer.ts"],"names":[],"mappings":";;;;AAAA,SAAS,cAAc;AACvB,SAAS,mBAAmB;AAErB,SAAS,eACf,WACA,SAC+H;AAC/H,QAAM,SAAS,OAAO,SAAS;AAE/B,MAAI,CAAC,OAAO,UAAU,MAAM,GAAG;AAC9B,WAAO,OAAO,IAAI,YAAY,oBAAoB;AAAA,EACnD;AAEA,MAAI,OAAO,SAAS,YAAY,YAAY,SAAS,QAAQ,SAAS;AACrE,WAAO,OAAO,IAAI,YAAY,uBAAuB;AAAA,EACtD;AAEA,MAAI,OAAO,SAAS,YAAY,YAAY,SAAS,QAAQ,SAAS;AACrE,WAAO,OAAO,IAAI,YAAY,uBAAuB;AAAA,EACtD;AAEA,SAAO,OAAO,GAAG,MAAM;AACxB;AAnBgB","sourcesContent":["import { Result } from '@sapphire/result';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport function resolveInteger(\n\tparameter: string,\n\toptions?: { minimum?: number; maximum?: number }\n): Result<number, Identifiers.ArgumentIntegerError | Identifiers.ArgumentIntegerTooSmall | Identifiers.ArgumentIntegerTooLarge> {\n\tconst parsed = Number(parameter);\n\n\tif (!Number.isInteger(parsed)) {\n\t\treturn Result.err(Identifiers.ArgumentIntegerError);\n\t}\n\n\tif (typeof options?.minimum === 'number' && parsed < options.minimum) {\n\t\treturn Result.err(Identifiers.ArgumentIntegerTooSmall);\n\t}\n\n\tif (typeof options?.maximum === 'number' && parsed > options.maximum) {\n\t\treturn Result.err(Identifiers.ArgumentIntegerTooLarge);\n\t}\n\n\treturn Result.ok(parsed);\n}\n"]}