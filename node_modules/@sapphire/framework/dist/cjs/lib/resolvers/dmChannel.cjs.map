{"version":3,"sources":["../../../../src/lib/resolvers/dmChannel.ts"],"names":[],"mappings":";;;;AAAA,SAAS,mBAAmB;AAC5B,SAAS,cAAc;AAEvB,SAAS,mBAAmB;AAC5B,SAAS,sBAAsB;AAExB,SAAS,iBACf,WACA,sBAC2F;AAC3F,QAAM,SAAS,eAAe,WAAW,oBAAoB;AAC7D,SAAO,OAAO,QAAQ,CAAC,UAAU;AAChC,QAAI,YAAY,KAAK,KAAK,CAAC,MAAM,SAAS;AACzC,aAAO,OAAO,GAAG,KAAK;AAAA,IACvB;AAEA,WAAO,OAAO,IAAwC,YAAY,sBAAsB;AAAA,EACzF,CAAC;AACF;AAZgB","sourcesContent":["import { isDMChannel } from '@sapphire/discord.js-utilities';\nimport { Result } from '@sapphire/result';\nimport type { CommandInteraction, DMChannel, Message } from 'discord.js';\nimport { Identifiers } from '../errors/Identifiers';\nimport { resolveChannel } from './channel';\n\nexport function resolveDMChannel(\n\tparameter: string,\n\tmessageOrInteraction: Message | CommandInteraction\n): Result<DMChannel, Identifiers.ArgumentChannelError | Identifiers.ArgumentDMChannelError> {\n\tconst result = resolveChannel(parameter, messageOrInteraction);\n\treturn result.mapInto((value) => {\n\t\tif (isDMChannel(value) && !value.partial) {\n\t\t\treturn Result.ok(value);\n\t\t}\n\n\t\treturn Result.err<Identifiers.ArgumentDMChannelError>(Identifiers.ArgumentDMChannelError);\n\t});\n}\n"]}