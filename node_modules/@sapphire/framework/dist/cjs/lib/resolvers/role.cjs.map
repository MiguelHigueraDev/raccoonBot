{"version":3,"sources":["../../../../src/lib/resolvers/role.ts"],"names":[],"mappings":";;;;AAAA,SAAS,kBAAkB,sBAAsB;AACjD,SAAS,cAAc;AAEvB,SAAS,mBAAmB;AAE5B,eAAsB,YAAY,WAAmB,OAAoE;AACxH,QAAM,OAAQ,MAAM,YAAY,WAAW,KAAK,KAAM,eAAe,WAAW,KAAK;AAErF,MAAI,MAAM;AACT,WAAO,OAAO,GAAG,IAAI;AAAA,EACtB;AAEA,SAAO,OAAO,IAAI,YAAY,iBAAiB;AAChD;AARsB;AAUtB,eAAe,YAAY,UAAkB,OAAoC;AAChF,QAAM,SAAS,iBAAiB,KAAK,QAAQ,KAAK,eAAe,KAAK,QAAQ;AAC9E,SAAO,SAAS,MAAM,MAAM,MAAM,OAAO,CAAC,CAAc,IAAI;AAC7D;AAHe;AAKf,SAAS,eAAe,UAAkB,OAA2B;AACpE,QAAM,oBAAoB,SAAS,YAAY;AAC/C,SAAO,MAAM,MAAM,MAAM,KAAK,CAAC,SAAS,KAAK,KAAK,YAAY,MAAM,iBAAiB,KAAK;AAC3F;AAHS","sourcesContent":["import { RoleMentionRegex, SnowflakeRegex } from '@sapphire/discord-utilities';\nimport { Result } from '@sapphire/result';\nimport type { Guild, Role, Snowflake } from 'discord.js';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport async function resolveRole(parameter: string, guild: Guild): Promise<Result<Role, Identifiers.ArgumentRoleError>> {\n\tconst role = (await resolveById(parameter, guild)) ?? resolveByQuery(parameter, guild);\n\n\tif (role) {\n\t\treturn Result.ok(role);\n\t}\n\n\treturn Result.err(Identifiers.ArgumentRoleError);\n}\n\nasync function resolveById(argument: string, guild: Guild): Promise<Role | null> {\n\tconst roleId = RoleMentionRegex.exec(argument) ?? SnowflakeRegex.exec(argument);\n\treturn roleId ? guild.roles.fetch(roleId[1] as Snowflake) : null;\n}\n\nfunction resolveByQuery(argument: string, guild: Guild): Role | null {\n\tconst lowerCaseArgument = argument.toLowerCase();\n\treturn guild.roles.cache.find((role) => role.name.toLowerCase() === lowerCaseArgument) ?? null;\n}\n"]}