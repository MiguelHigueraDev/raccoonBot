{"version":3,"sources":["../../../../src/lib/resolvers/channel.ts"],"names":[],"mappings":";;;;AAAA,SAAS,2BAA8C;AACvD,SAAS,iBAAiB;AAC1B,SAAS,cAAc;AAEvB,SAAS,mBAAmB;AAErB,SAAS,eACf,WACA,sBACyD;AACzD,QAAM,YAAa,oBAAoB,KAAK,SAAS,IAAI,CAAC,KAAK;AAC/D,QAAM,WAAW,qBAAqB,QAAQ,qBAAqB,MAAM,WAAW,UAAU,OAAO,UAAU,MAAM,IAAI,SAAS;AAElI,MAAI,SAAS;AACZ,WAAO,OAAO,GAAG,OAAuB;AAAA,EACzC;AAEA,SAAO,OAAO,IAAI,YAAY,oBAAoB;AACnD;AAZgB","sourcesContent":["import { ChannelMentionRegex, type ChannelTypes } from '@sapphire/discord.js-utilities';\nimport { container } from '@sapphire/pieces';\nimport { Result } from '@sapphire/result';\nimport type { CommandInteraction, Message, Snowflake } from 'discord.js';\nimport { Identifiers } from '../errors/Identifiers';\n\nexport function resolveChannel(\n\tparameter: string,\n\tmessageOrInteraction: Message | CommandInteraction\n): Result<ChannelTypes, Identifiers.ArgumentChannelError> {\n\tconst channelId = (ChannelMentionRegex.exec(parameter)?.[1] ?? parameter) as Snowflake;\n\tconst channel = (messageOrInteraction.guild ? messageOrInteraction.guild.channels : container.client.channels).cache.get(channelId);\n\n\tif (channel) {\n\t\treturn Result.ok(channel as ChannelTypes);\n\t}\n\n\treturn Result.err(Identifiers.ArgumentChannelError);\n}\n"]}