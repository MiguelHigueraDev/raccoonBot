{"version":3,"sources":["../../../../../src/lib/utils/resolvers/resolveGuildChannelPredicate.ts"],"names":[],"mappings":";;;;AACA,SAAS,cAAc;AAIvB,SAAS,2BAA2B;AAE7B,SAAS,6BACf,WACA,OACA,WACA,OACmE;AACnE,QAAM,SAAS,oBAAoB,WAAW,KAAK;AACnD,SAAO,OAAO,QAAQ,CAAC,YAAa,UAAU,OAAO,IAAI,OAAO,GAAG,OAAO,IAAI,OAAO,IAAI,KAAK,CAAE;AACjG;AARgB","sourcesContent":["import type { ChannelTypes, GuildBasedChannelTypes } from '@sapphire/discord.js-utilities';\nimport { Result } from '@sapphire/result';\nimport type { Nullish } from '@sapphire/utilities';\nimport type { Guild } from 'discord.js';\nimport type { Identifiers } from '../../errors/Identifiers';\nimport { resolveGuildChannel } from '../../resolvers/guildChannel';\n\nexport function resolveGuildChannelPredicate<TChannel extends GuildBasedChannelTypes, TError extends Identifiers>(\n\tparameter: string,\n\tguild: Guild,\n\tpredicate: (channel: ChannelTypes | Nullish) => channel is TChannel,\n\terror: TError\n): Result<TChannel, TError | Identifiers.ArgumentGuildChannelError> {\n\tconst result = resolveGuildChannel(parameter, guild);\n\treturn result.mapInto((channel) => (predicate(channel) ? Result.ok(channel) : Result.err(error)));\n}\n"]}