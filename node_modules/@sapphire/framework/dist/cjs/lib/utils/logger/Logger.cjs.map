{"version":3,"sources":["../../../../../src/lib/utils/logger/Logger.ts"],"names":[],"mappings":";;;;AAAA,SAAS,gBAA8B;AAEhC,IAAM,UAAN,MAAM,QAA0B;AAAA,EAG/B,YAAY,OAAiB;AACnC,SAAK,QAAQ;AAAA,EACd;AAAA,EAEO,IAAI,OAA0B;AACpC,WAAO,SAAS,KAAK;AAAA,EACtB;AAAA,EAEO,SAAS,QAAkC;AACjD,SAAK,MAAM,SAAS,OAAO,GAAG,MAAM;AAAA,EACrC;AAAA,EAEO,SAAS,QAAkC;AACjD,SAAK,MAAM,SAAS,OAAO,GAAG,MAAM;AAAA,EACrC;AAAA,EAEO,QAAQ,QAAkC;AAChD,SAAK,MAAM,SAAS,MAAM,GAAG,MAAM;AAAA,EACpC;AAAA,EAEO,QAAQ,QAAkC;AAChD,SAAK,MAAM,SAAS,MAAM,GAAG,MAAM;AAAA,EACpC;AAAA,EAEO,SAAS,QAAkC;AACjD,SAAK,MAAM,SAAS,OAAO,GAAG,MAAM;AAAA,EACrC;AAAA,EAEO,SAAS,QAAkC;AACjD,SAAK,MAAM,SAAS,OAAO,GAAG,MAAM;AAAA,EACrC;AAAA,EAEO,MAAM,UAAoB,QAAkC;AAClE,QAAI,CAAC,KAAK,IAAI,KAAK;AAAG;AACtB,UAAM,SAAS,QAAO,OAAO,IAAI,KAAK;AACtC,QAAI,OAAO,WAAW;AAAU,cAAQ,MAAM,EAAE,IAAI,OAAO,YAAY,CAAC,KAAK,GAAG,MAAM;AAAA,EACvF;AAUD;AAjDuC;AAA1B,QAyCc,SAAS,oBAAI,IAA0B;AAAA,EAChE,CAAC,SAAS,OAAO,OAAO;AAAA,EACxB,CAAC,SAAS,OAAO,OAAO;AAAA,EACxB,CAAC,SAAS,MAAM,MAAM;AAAA,EACtB,CAAC,SAAS,MAAM,MAAM;AAAA,EACtB,CAAC,SAAS,OAAO,OAAO;AAAA,EACxB,CAAC,SAAS,OAAO,OAAO;AACzB,CAAC;AAhDK,IAAM,SAAN","sourcesContent":["import { LogLevel, type ILogger } from './ILogger';\n\nexport class Logger implements ILogger {\n\tpublic level: LogLevel;\n\n\tpublic constructor(level: LogLevel) {\n\t\tthis.level = level;\n\t}\n\n\tpublic has(level: LogLevel): boolean {\n\t\treturn level >= this.level;\n\t}\n\n\tpublic trace(...values: readonly unknown[]): void {\n\t\tthis.write(LogLevel.Trace, ...values);\n\t}\n\n\tpublic debug(...values: readonly unknown[]): void {\n\t\tthis.write(LogLevel.Debug, ...values);\n\t}\n\n\tpublic info(...values: readonly unknown[]): void {\n\t\tthis.write(LogLevel.Info, ...values);\n\t}\n\n\tpublic warn(...values: readonly unknown[]): void {\n\t\tthis.write(LogLevel.Warn, ...values);\n\t}\n\n\tpublic error(...values: readonly unknown[]): void {\n\t\tthis.write(LogLevel.Error, ...values);\n\t}\n\n\tpublic fatal(...values: readonly unknown[]): void {\n\t\tthis.write(LogLevel.Fatal, ...values);\n\t}\n\n\tpublic write(level: LogLevel, ...values: readonly unknown[]): void {\n\t\tif (!this.has(level)) return;\n\t\tconst method = Logger.levels.get(level);\n\t\tif (typeof method === 'string') console[method](`[${method.toUpperCase()}]`, ...values);\n\t}\n\n\tprotected static readonly levels = new Map<LogLevel, LogMethods>([\n\t\t[LogLevel.Trace, 'trace'],\n\t\t[LogLevel.Debug, 'debug'],\n\t\t[LogLevel.Info, 'info'],\n\t\t[LogLevel.Warn, 'warn'],\n\t\t[LogLevel.Error, 'error'],\n\t\t[LogLevel.Fatal, 'error']\n\t]);\n}\n\nexport type LogMethods = 'trace' | 'debug' | 'info' | 'warn' | 'error';\n"]}