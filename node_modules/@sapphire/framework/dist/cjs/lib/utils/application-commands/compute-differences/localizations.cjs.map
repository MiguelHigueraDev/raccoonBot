{"version":3,"sources":["../../../../../../src/lib/utils/application-commands/compute-differences/localizations.ts"],"names":[],"mappings":";;;;AAGO,UAAU,mBAAmB;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD,GAMG;AACF,MAAI,CAAC,iCAAiC,+BAA+B;AACpE,UAAM;AAAA,MACL,KAAK;AAAA,MACL,UAAU;AAAA,MACV,UAAU;AAAA,IACX;AAAA,EACD,WAAW,iCAAiC,CAAC,+BAA+B;AAC3E,UAAM;AAAA,MACL,KAAK;AAAA,MACL,UAAU;AAAA,MACV,UAAU;AAAA,IACX;AAAA,EACD,WAAW,iCAAiC,+BAA+B;AAC1E,WAAO,iCAAiC,+BAA+B,+BAA+B,aAAa;AAAA,EACpH;AACD;AA5BiB;AA8BjB,UAAU,iCACT,aACA,aACA,SAC+B;AAC/B,QAAM,wBAAwB,IAAI,IAAI,OAAO,QAAQ,WAAW,CAAC;AAEjE,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,WAAW,GAAG;AACvD,UAAM,wBAAwB,sBAAsB,IAAI,GAAG;AAC3D,0BAAsB,OAAO,GAAG;AAEhC,UAAM,mBAAmB,OAAO,0BAA0B;AAC1D,UAAM,aAAa,UAAU;AAG7B,QAAI,oBAAoB,CAAC,YAAY;AACpC,YAAM;AAAA,QACL,KAAK,GAAG,OAAO,IAAI,GAAG;AAAA,QACtB,UAAU;AAAA,QACV,UAAU;AAAA,MACX;AAAA,IACD,WAES,CAAC,oBAAoB,YAAY;AACzC,YAAM;AAAA,QACL,KAAK,GAAG,OAAO,IAAI,GAAG;AAAA,QACtB,UAAU;AAAA,QACV,UAAU;AAAA,MACX;AAAA,IACD,WAGS,0BAA0B,OAAO;AACzC,YAAM;AAAA,QACL,KAAK,GAAG,OAAO,IAAI,GAAG;AAAA,QACtB,UAAU,OAAO,qBAAqB;AAAA,QACtC,UAAU,OAAO,KAAK;AAAA,MACvB;AAAA,IACD;AAAA,EACD;AAGA,aAAW,CAAC,KAAK,KAAK,KAAK,uBAAuB;AACjD,QAAI,OAAO;AACV,YAAM;AAAA,QACL,KAAK,GAAG,OAAO,IAAI,GAAG;AAAA,QACtB,UAAU;AAAA,QACV,UAAU;AAAA,MACX;AAAA,IACD;AAAA,EACD;AACD;AAnDU","sourcesContent":["import type { LocalizationMap } from 'discord-api-types/v10';\nimport type { CommandDifference } from './_shared';\n\nexport function* checkLocalizations({\n\tlocaleMapName,\n\tlocalePresentMessage,\n\tlocaleMissingMessage,\n\toriginalLocalizedDescriptions,\n\texpectedLocalizedDescriptions\n}: {\n\tlocaleMapName: string;\n\tlocalePresentMessage: string;\n\tlocaleMissingMessage: string;\n\toriginalLocalizedDescriptions?: LocalizationMap | null;\n\texpectedLocalizedDescriptions?: LocalizationMap | null;\n}) {\n\tif (!originalLocalizedDescriptions && expectedLocalizedDescriptions) {\n\t\tyield {\n\t\t\tkey: localeMapName,\n\t\t\toriginal: localeMissingMessage,\n\t\t\texpected: localePresentMessage\n\t\t};\n\t} else if (originalLocalizedDescriptions && !expectedLocalizedDescriptions) {\n\t\tyield {\n\t\t\tkey: localeMapName,\n\t\t\toriginal: localePresentMessage,\n\t\t\texpected: localeMissingMessage\n\t\t};\n\t} else if (originalLocalizedDescriptions && expectedLocalizedDescriptions) {\n\t\tyield* reportLocalizationMapDifferences(originalLocalizedDescriptions, expectedLocalizedDescriptions, localeMapName);\n\t}\n}\n\nfunction* reportLocalizationMapDifferences(\n\toriginalMap: LocalizationMap,\n\texpectedMap: LocalizationMap,\n\tmapName: string\n): Generator<CommandDifference> {\n\tconst originalLocalizations = new Map(Object.entries(originalMap));\n\n\tfor (const [key, value] of Object.entries(expectedMap)) {\n\t\tconst possiblyExistingEntry = originalLocalizations.get(key) as string | undefined;\n\t\toriginalLocalizations.delete(key);\n\n\t\tconst wasMissingBefore = typeof possiblyExistingEntry === 'undefined';\n\t\tconst isResetNow = value === null;\n\n\t\t// Was missing before and now is present\n\t\tif (wasMissingBefore && !isResetNow) {\n\t\t\tyield {\n\t\t\t\tkey: `${mapName}.${key}`,\n\t\t\t\toriginal: 'no localization present',\n\t\t\t\texpected: value\n\t\t\t};\n\t\t}\n\t\t// Was present before and now is reset\n\t\telse if (!wasMissingBefore && isResetNow) {\n\t\t\tyield {\n\t\t\t\tkey: `${mapName}.${key}`,\n\t\t\t\toriginal: possiblyExistingEntry,\n\t\t\t\texpected: 'no localization present'\n\t\t\t};\n\t\t}\n\t\t// Not equal\n\t\t// eslint-disable-next-line no-negated-condition\n\t\telse if (possiblyExistingEntry !== value) {\n\t\t\tyield {\n\t\t\t\tkey: `${mapName}.${key}`,\n\t\t\t\toriginal: String(possiblyExistingEntry),\n\t\t\t\texpected: String(value)\n\t\t\t};\n\t\t}\n\t}\n\n\t// Report any remaining localizations\n\tfor (const [key, value] of originalLocalizations) {\n\t\tif (value) {\n\t\t\tyield {\n\t\t\t\tkey: `${mapName}.${key}`,\n\t\t\t\toriginal: value,\n\t\t\t\texpected: 'no localization present'\n\t\t\t};\n\t\t}\n\t}\n}\n"]}