{"version":3,"sources":["../../../../../src/lib/utils/application-commands/getNeededParameters.ts"],"names":[],"mappings":";;;;AAAA,SAAS,iBAAiB;AAG1B,eAAsB,4BAA4B,WAAwB,oBAAI,IAAI,GAAG;AACpF,QAAM,EAAE,OAAO,IAAI;AAEnB,QAAM,sBAAsB,OAAO,YAAa;AAChD,QAAM,iBAAiB,MAAM,oBAAoB,MAAM,EAAE,mBAAmB,KAAK,CAAC;AAClF,QAAM,gBAAgB,MAAM,mBAAmB,qBAAqB,QAAQ;AAE5E,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACD;AAZsB;AActB,eAAe,mBAAmB,UAAqC,UAAuB;AAC7F,QAAM,MAAM,oBAAI,IAAoD;AAEpE,aAAW,WAAW,UAAU;AAC/B,QAAI;AACH,YAAM,gBAAgB,MAAM,SAAS,MAAM,EAAE,SAAS,mBAAmB,KAAK,CAAC;AAC/E,UAAI,IAAI,SAAS,aAAa;AAAA,IAC/B,SAAS,KAAK;AACb,YAAM,EAAE,iCAAiC,IAAI,UAAU,OAAO;AAE9D,UAAI,qCAAqC;AAAM;AAE/C,UAAI,MAAM,QAAQ,gCAAgC,KAAK,CAAC,kCAAkC,SAAS,OAAO,GAAG;AAC5G,cAAM,QAAQ,UAAU,OAAO,OAAO,QAAQ,OAAO,KAAK,EAAE,MAAM,qBAAqB;AACvF,kBAAU,OAAO;AAAA,UAChB,2EAA2E,MAAM,IAAI,MAAM,OAAO;AAAA,UAClG;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AACR;AAvBe","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { ApplicationCommand, ApplicationCommandManager, Collection } from 'discord.js';\n\nexport async function getNeededRegistryParameters(guildIds: Set<string> = new Set()) {\n\tconst { client } = container;\n\n\tconst applicationCommands = client.application!.commands;\n\tconst globalCommands = await applicationCommands.fetch({ withLocalizations: true });\n\tconst guildCommands = await fetchGuildCommands(applicationCommands, guildIds);\n\n\treturn {\n\t\tapplicationCommands,\n\t\tglobalCommands,\n\t\tguildCommands\n\t};\n}\n\nasync function fetchGuildCommands(commands: ApplicationCommandManager, guildIds: Set<string>) {\n\tconst map = new Map<string, Collection<string, ApplicationCommand>>();\n\n\tfor (const guildId of guildIds) {\n\t\ttry {\n\t\t\tconst guildCommands = await commands.fetch({ guildId, withLocalizations: true });\n\t\t\tmap.set(guildId, guildCommands);\n\t\t} catch (err) {\n\t\t\tconst { preventFailedToFetchLogForGuilds } = container.client.options;\n\n\t\t\tif (preventFailedToFetchLogForGuilds === true) continue;\n\n\t\t\tif (Array.isArray(preventFailedToFetchLogForGuilds) && !preventFailedToFetchLogForGuilds?.includes(guildId)) {\n\t\t\t\tconst guild = container.client.guilds.resolve(guildId) ?? { name: 'Guild not in cache' };\n\t\t\t\tcontainer.logger.warn(\n\t\t\t\t\t`ApplicationCommandRegistries: Failed to fetch guild commands for guild \"${guild.name}\" (${guildId}).`,\n\t\t\t\t\t'Make sure to authorize your application with the \"applications.commands\" scope in that guild.'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn map;\n}\n"]}