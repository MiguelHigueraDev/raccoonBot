{"version":3,"sources":["../../../../../../../src/lib/utils/application-commands/compute-differences/option/minMaxValue.ts"],"names":[],"mappings":";;;;AAEO,UAAU,yBAAyB;AAAA,EACzC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD,GAKiC;AAEhC,MAAI,eAAe,cAAc,UAAa,eAAe,cAAc,QAAW;AACrF,UAAM;AAAA,MACL,KAAK,GAAG,QAAQ,YAAY,CAAC;AAAA,MAC7B,UAAU;AAAA,MACV,UAAU;AAAA,IACX;AAAA,EACD,WAES,eAAe,cAAc,UAAa,eAAe,cAAc,QAAW;AAC1F,UAAM;AAAA,MACL,KAAK,GAAG,QAAQ,YAAY,CAAC;AAAA,MAC7B,UAAU;AAAA,MACV,UAAU;AAAA,IACX;AAAA,EACD,WAES,eAAe,cAAc,eAAe,WAAW;AAC/D,UAAM;AAAA,MACL,KAAK,GAAG,QAAQ,YAAY,CAAC;AAAA,MAC7B,UAAU,OAAO,eAAe,SAAS;AAAA,MACzC,UAAU,OAAO,eAAe,SAAS;AAAA,IAC1C;AAAA,EACD;AAGA,MAAI,eAAe,cAAc,UAAa,eAAe,cAAc,QAAW;AACrF,UAAM;AAAA,MACL,KAAK,GAAG,QAAQ,YAAY,CAAC;AAAA,MAC7B,UAAU;AAAA,MACV,UAAU;AAAA,IACX;AAAA,EACD,WAES,eAAe,cAAc,UAAa,eAAe,cAAc,QAAW;AAC1F,UAAM;AAAA,MACL,KAAK,GAAG,QAAQ,YAAY,CAAC;AAAA,MAC7B,UAAU;AAAA,MACV,UAAU;AAAA,IACX;AAAA,EACD,WAES,eAAe,cAAc,eAAe,WAAW;AAC/D,UAAM;AAAA,MACL,KAAK,GAAG,QAAQ,YAAY,CAAC;AAAA,MAC7B,UAAU,OAAO,eAAe,SAAS;AAAA,MACzC,UAAU,OAAO,eAAe,SAAS;AAAA,IAC1C;AAAA,EACD;AACD;AA5DiB","sourcesContent":["import type { APIApplicationCommandNumericTypes, CommandDifference } from '../_shared';\n\nexport function* handleMinMaxValueOptions({\n\tcurrentIndex,\n\texistingOption,\n\texpectedOption,\n\tkeyPath\n}: {\n\tcurrentIndex: number;\n\tkeyPath: (index: number) => string;\n\texpectedOption: APIApplicationCommandNumericTypes;\n\texistingOption: APIApplicationCommandNumericTypes;\n}): Generator<CommandDifference> {\n\t// 0. No min_value and now we have min_value\n\tif (existingOption.min_value === undefined && expectedOption.min_value !== undefined) {\n\t\tyield {\n\t\t\tkey: `${keyPath(currentIndex)}.min_value`,\n\t\t\texpected: 'min_value present',\n\t\t\toriginal: 'no min_value present'\n\t\t};\n\t}\n\t// 1. Have min_value and now we don't\n\telse if (existingOption.min_value !== undefined && expectedOption.min_value === undefined) {\n\t\tyield {\n\t\t\tkey: `${keyPath(currentIndex)}.min_value`,\n\t\t\texpected: 'no min_value present',\n\t\t\toriginal: 'min_value present'\n\t\t};\n\t}\n\t// 2. Equality check\n\telse if (existingOption.min_value !== expectedOption.min_value) {\n\t\tyield {\n\t\t\tkey: `${keyPath(currentIndex)}.min_value`,\n\t\t\toriginal: String(existingOption.min_value),\n\t\t\texpected: String(expectedOption.min_value)\n\t\t};\n\t}\n\n\t// 0. No max_value and now we have max_value\n\tif (existingOption.max_value === undefined && expectedOption.max_value !== undefined) {\n\t\tyield {\n\t\t\tkey: `${keyPath(currentIndex)}.max_value`,\n\t\t\texpected: 'max_value present',\n\t\t\toriginal: 'no max_value present'\n\t\t};\n\t}\n\t// 1. Have max_value and now we don't\n\telse if (existingOption.max_value !== undefined && expectedOption.max_value === undefined) {\n\t\tyield {\n\t\t\tkey: `${keyPath(currentIndex)}.max_value`,\n\t\t\texpected: 'no max_value present',\n\t\t\toriginal: 'max_value present'\n\t\t};\n\t}\n\t// 2. Equality check\n\telse if (existingOption.max_value !== expectedOption.max_value) {\n\t\tyield {\n\t\t\tkey: `${keyPath(currentIndex)}.max_value`,\n\t\t\toriginal: String(existingOption.max_value),\n\t\t\texpected: String(expectedOption.max_value)\n\t\t};\n\t}\n}\n"]}