{"version":3,"sources":["../../../../src/lib/plugins/PluginManager.ts"],"names":[],"mappings":";;;;AAGA,SAAS,kBAAkB;AAE3B,SAAS,oBAAoB,WAAW,2BAA2B,mBAAmB,gBAAgB;AAkB/F,IAAM,iBAAN,MAAM,eAAc;AAAA,EAApB;AACN,SAAgB,WAAW,oBAAI,IAA6B;AAAA;AAAA,EAIrD,aAAa,MAAoD,MAAkB,MAAqB;AAC9G,QAAI,OAAO,SAAS;AAAY,YAAM,IAAI,UAAU,qBAAqB,OAAO,IAAI,IAAI,OAAO,EAAE,mBAAmB;AACpH,SAAK,SAAS,IAAI,EAAE,MAAM,MAAM,KAAK,CAAC;AACtC,WAAO;AAAA,EACR;AAAA,EAEO,sCAAsC,MAA0B,MAAe;AACrF,WAAO,KAAK,aAAa,MAAM,WAAW,2BAA2B,IAAI;AAAA,EAC1E;AAAA,EAEO,8BAA8B,MAA0B,MAAe;AAC7E,WAAO,KAAK,aAAa,MAAM,WAAW,mBAAmB,IAAI;AAAA,EAClE;AAAA,EAEO,+BAA+B,MAA0B,MAAe;AAC9E,WAAO,KAAK,aAAa,MAAM,WAAW,oBAAoB,IAAI;AAAA,EACnE;AAAA,EAEO,qBAAqB,MAA+B,MAAe;AACzE,WAAO,KAAK,aAAa,MAAM,WAAW,UAAU,IAAI;AAAA,EACzD;AAAA,EAEO,sBAAsB,MAA+B,MAAe;AAC1E,WAAO,KAAK,aAAa,MAAM,WAAW,WAAW,IAAI;AAAA,EAC1D;AAAA,EAEO,IAAI,QAAuB;AACjC,UAAM,sBAA8C;AAAA,MACnD,CAAC,2BAA2B,WAAW,yBAAyB;AAAA,MAChE,CAAC,mBAAmB,WAAW,iBAAiB;AAAA,MAChD,CAAC,oBAAoB,WAAW,kBAAkB;AAAA,MAClD,CAAC,UAAU,WAAW,QAAQ;AAAA,MAC9B,CAAC,WAAW,WAAW,SAAS;AAAA,IACjC;AACA,eAAW,CAAC,YAAY,QAAQ,KAAK,qBAAqB;AACzD,YAAM,OAAO,QAAQ,IAAI,QAAQ,UAAU;AAC3C,UAAI,OAAO,SAAS;AAAY;AAChC,WAAK,aAAa,MAAM,QAAe;AAAA,IACxC;AACA,WAAO;AAAA,EACR;AAAA,EAKA,CAAQ,OAAO,MAAsE;AACpF,eAAW,UAAU,KAAK,UAAU;AACnC,UAAI,QAAQ,OAAO,SAAS;AAAM;AAClC,YAAM;AAAA,IACP;AAAA,EACD;AACD;AAxD2B;AAApB,IAAM,gBAAN","sourcesContent":["import type { Awaitable } from '@sapphire/utilities';\nimport type { ClientOptions } from 'discord.js';\nimport type { SapphireClient } from '../SapphireClient';\nimport { PluginHook } from '../types/Enums';\nimport type { Plugin } from './Plugin';\nimport { postInitialization, postLogin, preGenericsInitialization, preInitialization, preLogin } from './symbols';\n\nexport type AsyncPluginHooks = PluginHook.PreLogin | PluginHook.PostLogin;\nexport interface SapphirePluginAsyncHook {\n\t(this: SapphireClient, options: ClientOptions): Awaitable<unknown>;\n}\n\nexport type SyncPluginHooks = Exclude<PluginHook, AsyncPluginHooks>;\nexport interface SapphirePluginHook {\n\t(this: SapphireClient, options: ClientOptions): unknown;\n}\n\nexport interface SapphirePluginHookEntry<T = SapphirePluginHook | SapphirePluginAsyncHook> {\n\thook: T;\n\ttype: PluginHook;\n\tname?: string;\n}\n\nexport class PluginManager {\n\tpublic readonly registry = new Set<SapphirePluginHookEntry>();\n\n\tpublic registerHook(hook: SapphirePluginHook, type: SyncPluginHooks, name?: string): this;\n\tpublic registerHook(hook: SapphirePluginAsyncHook, type: AsyncPluginHooks, name?: string): this;\n\tpublic registerHook(hook: SapphirePluginHook | SapphirePluginAsyncHook, type: PluginHook, name?: string): this {\n\t\tif (typeof hook !== 'function') throw new TypeError(`The provided hook ${name ? `(${name}) ` : ''}is not a function`);\n\t\tthis.registry.add({ hook, type, name });\n\t\treturn this;\n\t}\n\n\tpublic registerPreGenericsInitializationHook(hook: SapphirePluginHook, name?: string) {\n\t\treturn this.registerHook(hook, PluginHook.PreGenericsInitialization, name);\n\t}\n\n\tpublic registerPreInitializationHook(hook: SapphirePluginHook, name?: string) {\n\t\treturn this.registerHook(hook, PluginHook.PreInitialization, name);\n\t}\n\n\tpublic registerPostInitializationHook(hook: SapphirePluginHook, name?: string) {\n\t\treturn this.registerHook(hook, PluginHook.PostInitialization, name);\n\t}\n\n\tpublic registerPreLoginHook(hook: SapphirePluginAsyncHook, name?: string) {\n\t\treturn this.registerHook(hook, PluginHook.PreLogin, name);\n\t}\n\n\tpublic registerPostLoginHook(hook: SapphirePluginAsyncHook, name?: string) {\n\t\treturn this.registerHook(hook, PluginHook.PostLogin, name);\n\t}\n\n\tpublic use(plugin: typeof Plugin) {\n\t\tconst possibleSymbolHooks: [symbol, PluginHook][] = [\n\t\t\t[preGenericsInitialization, PluginHook.PreGenericsInitialization],\n\t\t\t[preInitialization, PluginHook.PreInitialization],\n\t\t\t[postInitialization, PluginHook.PostInitialization],\n\t\t\t[preLogin, PluginHook.PreLogin],\n\t\t\t[postLogin, PluginHook.PostLogin]\n\t\t];\n\t\tfor (const [hookSymbol, hookType] of possibleSymbolHooks) {\n\t\t\tconst hook = Reflect.get(plugin, hookSymbol) as SapphirePluginHook | SapphirePluginAsyncHook;\n\t\t\tif (typeof hook !== 'function') continue;\n\t\t\tthis.registerHook(hook, hookType as any);\n\t\t}\n\t\treturn this;\n\t}\n\n\tpublic values(): Generator<SapphirePluginHookEntry, void, unknown>;\n\tpublic values(hook: SyncPluginHooks): Generator<SapphirePluginHookEntry<SapphirePluginHook>, void, unknown>;\n\tpublic values(hook: AsyncPluginHooks): Generator<SapphirePluginHookEntry<SapphirePluginAsyncHook>, void, unknown>;\n\tpublic *values(hook?: PluginHook): Generator<SapphirePluginHookEntry, void, unknown> {\n\t\tfor (const plugin of this.registry) {\n\t\t\tif (hook && plugin.type !== hook) continue;\n\t\t\tyield plugin;\n\t\t}\n\t}\n}\n"]}