{"version":3,"sources":["../../../../src/lib/types/CommandTypes.ts"],"names":[],"mappings":";AAAA,OAAgD;AAChD,OAAiD;AACjD,OAOO;AAGP,OAA6E;AAC7E,OAAyC;AACzC,OAAuD","sourcesContent":["import { AliasPiece, type AliasPieceJSON } from '@sapphire/pieces';\nimport { type NonNullObject, type Nullish } from '@sapphire/utilities';\nimport {\n\tChannelType,\n\tChatInputCommandInteraction,\n\tContextMenuCommandInteraction,\n\ttype AutocompleteInteraction,\n\ttype PermissionResolvable,\n\ttype Snowflake\n} from 'discord.js';\nimport type { Command } from '../structures/Command';\nimport type { ApplicationCommandRegistry } from '../utils/application-commands/ApplicationCommandRegistry';\nimport { PreconditionContainerArray, type PreconditionEntryResolvable } from '../utils/preconditions/PreconditionContainerArray';\nimport { type FlagStrategyOptions } from '../utils/strategies/FlagUnorderedStrategy';\nimport { BucketScope, CommandOptionsRunTypeEnum } from './Enums';\n\nexport type DetailedDescriptionCommand = string | DetailedDescriptionCommandObject;\n\nexport interface DetailedDescriptionCommandObject extends NonNullObject {}\n\n/**\n * The allowed values for {@link CommandOptions.runIn}.\n * @remark It is discouraged to use this type, we recommend using {@link CommandOptionsRunTypeEnum} instead.\n * @since 2.0.0\n */\nexport type CommandOptionsRunType =\n\t| 'DM'\n\t| 'GUILD_TEXT'\n\t| 'GUILD_VOICE'\n\t| 'GUILD_NEWS'\n\t| 'GUILD_NEWS_THREAD'\n\t| 'GUILD_PUBLIC_THREAD'\n\t| 'GUILD_PRIVATE_THREAD'\n\t| 'GUILD_ANY';\n\n/**\n * The allowed values for {@link CommandOptions.runIn}.\n * @since 4.7.0\n */\nexport type CommandRunInUnion =\n\t| ChannelType\n\t| Command.RunInTypes\n\t| CommandOptionsRunTypeEnum\n\t| readonly (ChannelType | Command.RunInTypes | CommandOptionsRunTypeEnum)[]\n\t| Nullish;\n\n/**\n * A more detailed structure for {@link CommandOptions.runIn} when you want to have a different `runIn` for each\n * command type.\n * @since 4.7.0\n */\nexport interface CommandSpecificRunIn {\n\tchatInputRun?: CommandRunInUnion;\n\tmessageRun?: CommandRunInUnion;\n\tcontextMenuRun?: CommandRunInUnion;\n}\n\n/**\n * The {@link Command} options.\n * @since 1.0.0\n */\nexport interface CommandOptions extends AliasPiece.Options, FlagStrategyOptions {\n\t/**\n\t * Whether to add aliases for commands with dashes in them\n\t * @since 1.0.0\n\t * @default false\n\t */\n\tgenerateDashLessAliases?: boolean;\n\n\t/**\n\t * Whether to add aliases for commands with underscores in them\n\t * @since 3.0.0\n\t * @default false\n\t */\n\tgenerateUnderscoreLessAliases?: boolean;\n\n\t/**\n\t * The description for the command.\n\t * @since 1.0.0\n\t * @default ''\n\t */\n\tdescription?: string;\n\n\t/**\n\t * The detailed description for the command.\n\t * @since 1.0.0\n\t * @default ''\n\t */\n\tdetailedDescription?: DetailedDescriptionCommand;\n\n\t/**\n\t * The full category path for the command\n\t * @since 2.0.0\n\t * @default 'An array of folder names that lead back to the folder that is registered for in the commands store'\n\t * @example\n\t * ```typescript\n\t * // Given a file named `ping.js` at the path of `commands/General/ping.js`\n\t * ['General']\n\t *\n\t * // Given a file named `info.js` at the path of `commands/General/About/ping.js`\n\t * ['General', 'About']\n\t * ```\n\t */\n\tfullCategory?: string[];\n\n\t/**\n\t * The {@link Precondition}s to be run, accepts an array of their names.\n\t * @seealso {@link PreconditionContainerArray}\n\t * @since 1.0.0\n\t * @default []\n\t */\n\tpreconditions?: readonly PreconditionEntryResolvable[];\n\n\t/**\n\t * The quotes accepted by this command, pass `[]` to disable them.\n\t * @since 1.0.0\n\t * @default\n\t * [\n\t *   ['\"', '\"'], // Double quotes\n\t *   ['“', '”'], // Fancy quotes (on iOS)\n\t *   ['「', '」'] // Corner brackets (CJK)\n\t *   ['«', '»'] // French quotes (guillemets)\n\t * ]\n\t */\n\tquotes?: [string, string][];\n\n\t/**\n\t * Sets whether the command should be treated as NSFW. If set to true, the `NSFW` precondition will be added to the list.\n\t * @since 2.0.0\n\t * @default false\n\t */\n\tnsfw?: boolean;\n\n\t/**\n\t * The amount of entries the cooldown can have before filling up, if set to a non-zero value alongside {@link CommandOptions.cooldownDelay}, the `Cooldown` precondition will be added to the list.\n\t * @since 2.0.0\n\t * @default 1\n\t */\n\tcooldownLimit?: number;\n\n\t/**\n\t * The time in milliseconds for the cooldown entries to reset, if set to a non-zero value alongside {@link CommandOptions.cooldownLimit}, the `Cooldown` precondition will be added to the list.\n\t * @since 2.0.0\n\t * @default 0\n\t */\n\tcooldownDelay?: number;\n\n\t/**\n\t * The scope of the cooldown entries.\n\t * @since 2.0.0\n\t * @default BucketScope.User\n\t */\n\tcooldownScope?: BucketScope;\n\n\t/**\n\t * The users that are exempt from the Cooldown precondition.\n\t * Use this to filter out someone like a bot owner\n\t * @since 2.0.0\n\t * @default undefined\n\t */\n\tcooldownFilteredUsers?: Snowflake[];\n\n\t/**\n\t * The required permissions for the client.\n\t * @since 2.0.0\n\t * @default 0\n\t */\n\trequiredClientPermissions?: PermissionResolvable;\n\n\t/**\n\t * The required permissions for the user.\n\t * @since 2.0.0\n\t * @default 0\n\t */\n\trequiredUserPermissions?: PermissionResolvable;\n\n\t/**\n\t * The channels the command should run in. If set to `null`, no precondition entry will be added.\n\t * Some optimizations are applied when given an array to reduce the amount of preconditions run\n\t * (e.g. `'GUILD_TEXT'` and `'GUILD_NEWS'` becomes `'GUILD_ANY'`, and if both `'DM'` and `'GUILD_ANY'` are defined,\n\t * then no precondition entry is added as it runs in all channels).\n\t *\n\t * This can be both {@link CommandRunInUnion} which will have the same precondition apply to all the types of commands,\n\t * or you can use {@link CommandSpecificRunIn} to apply different preconditions to different types of commands.\n\t * @since 2.0.0\n\t * @default null\n\t */\n\trunIn?: CommandRunInUnion | CommandSpecificRunIn;\n\n\t/**\n\t * If {@link SapphireClient.typing} is true, this option will override it.\n\t * Otherwise, this option has no effect - you may call {@link Channel#sendTyping}` in the run method if you want specific commands to display the typing status.\n\t * @default true\n\t */\n\ttyping?: boolean;\n}\n\nexport interface MessageCommandContext extends Record<PropertyKey, unknown> {\n\t/**\n\t * The prefix used to run this command.\n\t *\n\t * This is a string for the mention and default prefix, and a RegExp for the `regexPrefix`.\n\t */\n\tprefix: string | RegExp;\n\t/**\n\t * The alias used to run this command.\n\t */\n\tcommandName: string;\n\t/**\n\t * The matched prefix, this will always be the same as {@link MessageCommand.RunContext.prefix} if it was a string, otherwise it is\n\t * the result of doing `prefix.exec(content)[0]`.\n\t */\n\tcommandPrefix: string;\n}\n\nexport interface ChatInputCommandContext extends Record<PropertyKey, unknown> {\n\t/**\n\t * The name of the command.\n\t */\n\tcommandName: string;\n\t/**\n\t * The id of the command.\n\t */\n\tcommandId: string;\n}\n\nexport interface ContextMenuCommandContext extends Record<PropertyKey, unknown> {\n\t/**\n\t * The name of the command.\n\t */\n\tcommandName: string;\n\t/**\n\t * The id of the command.\n\t */\n\tcommandId: string;\n}\n\nexport interface AutocompleteCommandContext extends Record<PropertyKey, unknown> {\n\t/**\n\t * The name of the command.\n\t */\n\tcommandName: string;\n\t/**\n\t * The id of the command.\n\t */\n\tcommandId: string;\n}\n\nexport interface CommandJSON extends AliasPieceJSON {\n\tdescription: string;\n\tdetailedDescription: DetailedDescriptionCommand;\n\tcategory: string | null;\n}\n\nexport type AutocompleteCommand = Command & Required<Pick<Command, 'autocompleteRun'>>;\n\nexport namespace AutocompleteCommand {\n\texport type Options = Command.Options;\n\texport type JSON = Command.JSON;\n\t/** @deprecated Use {@linkcode LoaderContext} instead. */\n\texport type Context = LoaderContext;\n\texport type LoaderContext = Command.LoaderContext;\n\texport type RunInTypes = CommandOptionsRunType;\n\texport type RunContext = AutocompleteCommandContext;\n\texport type Interaction<Cached extends import('discord.js').CacheType = import('discord.js').CacheType> = AutocompleteInteraction<Cached>;\n\texport type Registry = ApplicationCommandRegistry;\n}\n\nexport type ContextMenuCommand = Command & Required<Pick<Command, 'contextMenuRun'>>;\n\nexport namespace ContextMenuCommand {\n\texport type Options = Command.Options;\n\texport type JSON = Command.JSON;\n\t/** @deprecated Use {@linkcode LoaderContext} instead. */\n\texport type Context = LoaderContext;\n\texport type LoaderContext = Command.LoaderContext;\n\texport type RunInTypes = CommandOptionsRunType;\n\texport type RunContext = ContextMenuCommandContext;\n\texport type Interaction<Cached extends import('discord.js').CacheType = import('discord.js').CacheType> = ContextMenuCommandInteraction<Cached>;\n\texport type Registry = ApplicationCommandRegistry;\n}\n\nexport type MessageCommand = Command & Required<Pick<Command, 'messageRun'>>;\n\nexport namespace MessageCommand {\n\texport type Options = Command.Options;\n\texport type JSON = Command.JSON;\n\t/** @deprecated Use {@linkcode LoaderContext} instead. */\n\texport type Context = LoaderContext;\n\texport type LoaderContext = Command.LoaderContext;\n\texport type RunInTypes = CommandOptionsRunType;\n\texport type RunContext = MessageCommandContext;\n}\n\nexport type ChatInputCommand = Command & Required<Pick<Command, 'chatInputRun'>>;\n\nexport namespace ChatInputCommand {\n\texport type Options = Command.Options;\n\texport type JSON = Command.JSON;\n\t/** @deprecated Use {@linkcode LoaderContext} instead. */\n\texport type Context = LoaderContext;\n\texport type LoaderContext = Command.LoaderContext;\n\texport type RunInTypes = CommandOptionsRunType;\n\texport type RunContext = ChatInputCommandContext;\n\texport type Interaction<Cached extends import('discord.js').CacheType = import('discord.js').CacheType> = ChatInputCommandInteraction<Cached>;\n\texport type Registry = ApplicationCommandRegistry;\n}\n"]}