{"version":3,"sources":["../../../../src/lib/types/Events.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Piece, Store } from '@sapphire/pieces';\nimport type { Option } from '@sapphire/result';\nimport {\n\tEvents as DJSEvents,\n\ttype AutocompleteInteraction,\n\ttype ChatInputCommandInteraction,\n\ttype ContextMenuCommandInteraction,\n\ttype Interaction,\n\ttype Message\n} from 'discord.js';\nimport type { UserError } from '../errors/UserError';\nimport type { Command } from '../structures/Command';\nimport type { InteractionHandler } from '../structures/InteractionHandler';\nimport type { Listener } from '../structures/Listener';\nimport type {\n\tAutocompleteCommand,\n\tAutocompleteCommandContext,\n\tChatInputCommand,\n\tChatInputCommandContext,\n\tContextMenuCommand,\n\tContextMenuCommandContext,\n\tMessageCommand\n} from '../types/CommandTypes';\nimport type { ApplicationCommandRegistry } from '../utils/application-commands/ApplicationCommandRegistry';\nimport type { PluginHook } from './Enums';\n\nexport const Events = {\n\t// #region Discord.js base events\n\tApplicationCommandPermissionsUpdate: DJSEvents.ApplicationCommandPermissionsUpdate as const,\n\tAutoModerationActionExecution: DJSEvents.AutoModerationActionExecution as const,\n\tAutoModerationRuleCreate: DJSEvents.AutoModerationRuleCreate as const,\n\tAutoModerationRuleDelete: DJSEvents.AutoModerationRuleDelete as const,\n\tAutoModerationRuleUpdate: DJSEvents.AutoModerationRuleUpdate as const,\n\tCacheSweep: DJSEvents.CacheSweep as const,\n\tChannelCreate: DJSEvents.ChannelCreate as const,\n\tChannelDelete: DJSEvents.ChannelDelete as const,\n\tChannelPinsUpdate: DJSEvents.ChannelPinsUpdate as const,\n\tChannelUpdate: DJSEvents.ChannelUpdate as const,\n\tClientReady: DJSEvents.ClientReady as const,\n\tDebug: DJSEvents.Debug as const,\n\tError: DJSEvents.Error as const,\n\tGuildAuditLogEntryCreate: DJSEvents.GuildAuditLogEntryCreate as const,\n\tGuildAvailable: DJSEvents.GuildAvailable as const,\n\tGuildBanAdd: DJSEvents.GuildBanAdd as const,\n\tGuildBanRemove: DJSEvents.GuildBanRemove as const,\n\tGuildCreate: DJSEvents.GuildCreate as const,\n\tGuildDelete: DJSEvents.GuildDelete as const,\n\tGuildEmojiCreate: DJSEvents.GuildEmojiCreate as const,\n\tGuildEmojiDelete: DJSEvents.GuildEmojiDelete as const,\n\tGuildEmojiUpdate: DJSEvents.GuildEmojiUpdate as const,\n\tGuildIntegrationsUpdate: DJSEvents.GuildIntegrationsUpdate as const,\n\tGuildMemberAdd: DJSEvents.GuildMemberAdd as const,\n\tGuildMemberAvailable: DJSEvents.GuildMemberAvailable as const,\n\tGuildMemberRemove: DJSEvents.GuildMemberRemove as const,\n\tGuildMembersChunk: DJSEvents.GuildMembersChunk as const,\n\tGuildMemberUpdate: DJSEvents.GuildMemberUpdate as const,\n\tGuildRoleCreate: DJSEvents.GuildRoleCreate as const,\n\tGuildRoleDelete: DJSEvents.GuildRoleDelete as const,\n\tGuildRoleUpdate: DJSEvents.GuildRoleUpdate as const,\n\tGuildScheduledEventCreate: DJSEvents.GuildScheduledEventCreate as const,\n\tGuildScheduledEventDelete: DJSEvents.GuildScheduledEventDelete as const,\n\tGuildScheduledEventUpdate: DJSEvents.GuildScheduledEventUpdate as const,\n\tGuildScheduledEventUserAdd: DJSEvents.GuildScheduledEventUserAdd as const,\n\tGuildScheduledEventUserRemove: DJSEvents.GuildScheduledEventUserRemove as const,\n\tGuildStickerCreate: DJSEvents.GuildStickerCreate as const,\n\tGuildStickerDelete: DJSEvents.GuildStickerDelete as const,\n\tGuildStickerUpdate: DJSEvents.GuildStickerUpdate as const,\n\tGuildUnavailable: DJSEvents.GuildUnavailable as const,\n\tGuildUpdate: DJSEvents.GuildUpdate as const,\n\tInteractionCreate: DJSEvents.InteractionCreate as const,\n\tInvalidated: DJSEvents.Invalidated as const,\n\tInviteCreate: DJSEvents.InviteCreate as const,\n\tInviteDelete: DJSEvents.InviteDelete as const,\n\tMessageBulkDelete: DJSEvents.MessageBulkDelete as const,\n\tMessageCreate: DJSEvents.MessageCreate as const,\n\tMessageDelete: DJSEvents.MessageDelete as const,\n\tMessageReactionAdd: DJSEvents.MessageReactionAdd as const,\n\tMessageReactionRemove: DJSEvents.MessageReactionRemove as const,\n\tMessageReactionRemoveAll: DJSEvents.MessageReactionRemoveAll as const,\n\tMessageReactionRemoveEmoji: DJSEvents.MessageReactionRemoveEmoji as const,\n\tMessageUpdate: DJSEvents.MessageUpdate as const,\n\tPresenceUpdate: DJSEvents.PresenceUpdate as const,\n\tRaw: DJSEvents.Raw as const,\n\tShardDisconnect: DJSEvents.ShardDisconnect as const,\n\tShardError: DJSEvents.ShardError as const,\n\tShardReady: DJSEvents.ShardReady as const,\n\tShardReconnecting: DJSEvents.ShardReconnecting as const,\n\tShardResume: DJSEvents.ShardResume as const,\n\tStageInstanceCreate: DJSEvents.StageInstanceCreate as const,\n\tStageInstanceDelete: DJSEvents.StageInstanceDelete as const,\n\tStageInstanceUpdate: DJSEvents.StageInstanceUpdate as const,\n\tThreadCreate: DJSEvents.ThreadCreate as const,\n\tThreadDelete: DJSEvents.ThreadDelete as const,\n\tThreadListSync: DJSEvents.ThreadListSync as const,\n\tThreadMembersUpdate: DJSEvents.ThreadMembersUpdate as const,\n\tThreadMemberUpdate: DJSEvents.ThreadMemberUpdate as const,\n\tThreadUpdate: DJSEvents.ThreadUpdate as const,\n\tTypingStart: DJSEvents.TypingStart as const,\n\tUserUpdate: DJSEvents.UserUpdate as const,\n\tVoiceServerUpdate: DJSEvents.VoiceServerUpdate as const,\n\tVoiceStateUpdate: DJSEvents.VoiceStateUpdate as const,\n\tWarn: DJSEvents.Warn as const,\n\tWebhooksUpdate: DJSEvents.WebhooksUpdate as const,\n\t// #endregion Discord.js base events\n\n\t// #region Sapphire events\n\t// Message commands chain\n\t/**\n\t * Emitted when a message is created that was not sent by bots or webhooks.\n\t * @param {Message} message The created message\n\t */\n\tPreMessageParsed: 'preMessageParsed' as const,\n\t/**\n\t * Emitted when a message is created consisting of only the bot's mention.\n\t * @param {Message} message The created message\n\t */\n\tMentionPrefixOnly: 'mentionPrefixOnly' as const,\n\t/**\n\t * Emitted when a message is created that does not start with a valid prefix.\n\t * @param {Message} message The created message\n\t */\n\tNonPrefixedMessage: 'nonPrefixedMessage' as const,\n\t/**\n\t * Emitted when a message is created that does starts with a valid prefix.\n\t * @param {Message} message The created message\n\t */\n\tPrefixedMessage: 'prefixedMessage' as const,\n\n\t/**\n\t * Emitted when a message starts with a valid prefix but does not include a command name.\n\t * @param {UnknownMessageCommandNamePayload} payload\n\t */\n\tUnknownMessageCommandName: 'unknownMessageCommandName' as const,\n\t/**\n\t * Emitted when the name of a sent message command does not match any loaded commands.\n\t * @param {UnknownMessageCommandPayload} payload The contextual payload\n\t */\n\tUnknownMessageCommand: 'unknownMessageCommand' as const,\n\t/**\n\t * Emitted when a message command is executed but a `messageRun` method is not found.\n\t * @param {CommandDoesNotHaveMessageCommandHandler} payload The contextual payload\n\t */\n\tCommandDoesNotHaveMessageCommandHandler: 'commandDoesNotHaveMessageCommandHandler' as const,\n\t/**\n\t * Emitted before the `messageRun` method of a command is run.\n\t * @param {PreMessageCommandRunPayload} payload The contextual payload\n\t */\n\tPreMessageCommandRun: 'preMessageCommandRun' as const,\n\n\t/**\n\t * Emitted when a precondition denies a message command from being run.\n\t * @param {UserError} error The error reported by the precondition\n\t * @param {MessageCommandDeniedPayload} payload The contextual payload\n\t */\n\tMessageCommandDenied: 'messageCommandDenied' as const,\n\t/**\n\t * Emitted when a message command passes all precondition checks, if any.\n\t * @param {MessageCommandAcceptedPayload} payload The contextual payload\n\t */\n\tMessageCommandAccepted: 'messageCommandAccepted' as const,\n\n\t/**\n\t * Emitted directly before a message command is run.\n\t * @param {Message} message The message that executed the command\n\t * @param {Command} command The command that is being run\n\t * @param {MessageCommandRunPayload} payload The contextual payload\n\t */\n\tMessageCommandRun: 'messageCommandRun' as const,\n\t/**\n\t * Emitted after a message command runs successfully.\n\t * @param {MessageCommandSuccessPayload} payload The contextual payload\n\t */\n\tMessageCommandSuccess: 'messageCommandSuccess' as const,\n\t/**\n\t * Emitted after a message command runs unsuccesfully.\n\t * @param {*} error The error that was thrown\n\t * @param {MessageCommandErrorPayload} payload The contextual payload\n\t */\n\tMessageCommandError: 'messageCommandError' as const,\n\t/**\n\t * Emitted directly after a message command finished running, regardless of the outcome.\n\t * @param {Message} message The message that executed the command\n\t * @param {Command} command The command that finished running\n\t * @param {MessageCommandFinishPayload} payload The contextual payload\n\t */\n\tMessageCommandFinish: 'messageCommandFinish' as const,\n\n\t/**\n\t * Emitted after the bot unsuccessfully tried to start typing when a command is executed.\n\t * @param error The error that was thrown\n\t * @param payload The contextual payload\n\t */\n\tMessageCommandTypingError: 'messageCommandTypingError' as const,\n\n\t// Listener errors\n\t/**\n\t * Emitted when an error is encountered when executing a listener.\n\t * @param {*} error The error that was thrown\n\t * @param {ListenerErrorPayload} payload The contextual payload\n\t */\n\tListenerError: 'listenerError' as const,\n\n\t// Registry errors\n\t/**\n\t * Emitted when an error is encountered when handling the command application command registry.\n\t * @param {*} error The error that was thrown\n\t * @param {Command} command The command whose registry caused the error\n\t */\n\tCommandApplicationCommandRegistryError: 'commandApplicationCommandRegistryError' as const,\n\n\t/**\n\t * Emitted when the application command registries are being initialized.\n\t */\n\tApplicationCommandRegistriesInitialising: 'applicationCommandRegistriesInitialising' as const,\n\n\t/**\n\t * Emitted once the application command registries have been initialized.\n\t * @param {Map<string, ApplicationCommandRegistry>} registries The initialised registries\n\t */\n\tApplicationCommandRegistriesRegistered: 'applicationCommandRegistriesRegistered' as const,\n\n\t/**\n\t * Emitted when an error is encountered when handling the command registries in bulk overwrite mode.\n\t * @param {*} error The error that was thrown\n\t * @param {string|null} guildId The guild id where the error was thrown\n\t */\n\tApplicationCommandRegistriesBulkOverwriteError: 'applicationCommandRegistriesBulkOverwriteError' as const,\n\n\t// Piece store?\n\t/**\n\t * Emitted after a piece is loaded.\n\t * @param {Store<Piece>} store The store in which the piece belongs to\n\t * @param {Piece} piece The piece that was loaded\n\t */\n\tPiecePostLoad: 'piecePostLoad' as const,\n\t/**\n\t * Emitted when a piece is unloaded.\n\t * @param {Store<Piece>} store The store in which the piece belongs to\n\t * @param {Piece} piece The piece that was unloaded\n\t */\n\tPieceUnload: 'pieceUnload' as const,\n\n\t// Plugin\n\t/**\n\t * Emitted when a plugin is loaded.\n\t * @param {PluginHook} hook The plugin hook that was loaded\n\t * @param {string | undefined} name The name of the plugin, if any\n\t */\n\tPluginLoaded: 'pluginLoaded' as const,\n\n\t// Interaction handlers\n\t/**\n\t * Emitted when the `parse` method of an interaction handler passes successfully (no errors are encountered)\n\t * Use the {@link option} parameter to determine if `some` or `none` was passed.\n\t * @param {Option.None | Option.Some<unknown>} option The {@link Option} from the `parse` method.\n\t * @param {InteractionHandlerParseSuccess} payload The contextual payload\n\t */\n\tInteractionHandlerParseSuccess: 'interactionHandlerParseSuccess' as const,\n\t/**\n\t * Emitted when the `parse` method of an interaction handler passes successfully (no errors are encountered) and `some` is returned.\n\t * @param {Option.Some<unknown>} option The {@link Option.Some} from the `parse` method.\n\t * @param {InteractionHandlerParseSome} payload The contextual payload\n\t */\n\tInteractionHandlerParseSome: 'interactionHandlerParseSome' as const,\n\t/**\n\t * Emitted when the `parse` method of an interaction handler passes successfully (no errors are encountered) and `none` is returned.\n\t * @param {Option.None} option The {@link Option.None} from the `parse` method.\n\t * @param {InteractionHandlerParseNone} payload The contextual payload\n\t */\n\tInteractionHandlerParseNone: 'interactionHandlerParseNone' as const,\n\t/**\n\t * Emitted when the `parse` method of an interaction handler encounters an error.\n\t * @param {*} error The error that was encountered\n\t * @param {InteractionHandlerParseError} payload The contextual payload\n\t */\n\tInteractionHandlerParseError: 'interactionHandlerParseError' as const,\n\t/**\n\t * Emitted when an error is encountered when executing an interaction handler.\n\t * @param {*} error The error that was encountered\n\t * @param {InteractionHandlerError} payload The contextual payload\n\t */\n\tInteractionHandlerError: 'interactionHandlerError' as const,\n\n\t// Autocomplete interaction\n\t/**\n\t * Emitted when an autocomplete interaction is recieved.\n\t * @param {AutocompleteInteraction} interaction The interaction that was recieved\n\t */\n\tPossibleAutocompleteInteraction: 'possibleAutocompleteInteraction' as const,\n\t/**\n\t * Emitted after an autocomplete interaction handler runs successfully.\n\t * @param {AutocompleteInteractionPayload} payload The contextual payload\n\t */\n\tCommandAutocompleteInteractionSuccess: 'commandAutocompleteInteractionSuccess' as const,\n\t/**\n\t * Emitted when an error is encountered when executing an autocomplete interaction handler.\n\t * @param {*} error The error that was encountered\n\t * @param {AutocompleteInteractionPayload} payload The contextual payload\n\t */\n\tCommandAutocompleteInteractionError: 'commandAutocompleteInteractionError' as const,\n\n\t// Chat input command chain\n\t/**\n\t * Emitted when a chat input command interaction is recieved.\n\t * @param {ChatInputCommandInteraction} interaction The interaction that was recieved.\n\t */\n\tPossibleChatInputCommand: 'possibleChatInputCommand' as const,\n\t/**\n\t * Emitted when the name of a sent chat input command does not match any loaded commands.\n\t * @param {UnknownChatInputCommandPayload} payload The contextual payload\n\t */\n\tUnknownChatInputCommand: 'unknownChatInputCommand' as const,\n\t/**\n\t * Emitted when a chat input command is executed but a `chatInputRun` method is not found.\n\t * @param {CommandDoesNotHaveChatInputCommandHandlerPayload} payload The contextual payload\n\t */\n\tCommandDoesNotHaveChatInputCommandHandler: 'commandDoesNotHaveChatInputCommandHandler' as const,\n\t/**\n\t * Emitted before the `chatInputRun` method of a command is run.\n\t * @param {PreChatInputCommandRunPayload} payload The contextual payload\n\t */\n\tPreChatInputCommandRun: 'preChatInputCommandRun' as const,\n\n\t/**\n\t * Emitted when a precondition denies a chat input command from being run.\n\t * @param {UserError} error The error reported by the precondition\n\t * @param {ChatInputCommandDeniedPayload} payload The contextual payload\n\t */\n\tChatInputCommandDenied: 'chatInputCommandDenied' as const,\n\t/**\n\t * Emitted when a chat input command passes all precondition checks, if any.\n\t * @param {ChatInputCommandAcceptedPayload} payload The contextual payload\n\t */\n\tChatInputCommandAccepted: 'chatInputCommandAccepted' as const,\n\n\t/**\n\t * Emitted directly before a chat input command is run.\n\t * @param {ChatInputCommandInteraction} interaction The interaction that executed the command\n\t * @param {ChatInputCommand} command The command that is being run\n\t * @param {ChatInputCommandRunPayload} payload The contextual payload\n\t */\n\tChatInputCommandRun: 'chatInputCommandRun' as const,\n\t/**\n\t * Emitted after a chat input command runs successfully.\n\t * @param {ChatInputCommandSuccessPayload} payload The contextual payload\n\t */\n\tChatInputCommandSuccess: 'chatInputCommandSuccess' as const,\n\t/**\n\t * Emitted after a chat input command runs unsuccesfully.\n\t * @param {*} error The error that was thrown\n\t * @param {ChatInputCommandErrorPayload} payload The contextual payload\n\t */\n\tChatInputCommandError: 'chatInputCommandError' as const,\n\t/**\n\t * Emitted directly after a chat input command finished running, regardless of the outcome.\n\t * @param {Interaction} interaction The interaction that executed the command\n\t * @param {ChatInputCommand} command The command that finished running\n\t * @param {ChatInputCommandFinishPayload} payload The contextual payload\n\t */\n\tChatInputCommandFinish: 'chatInputCommandFinish' as const,\n\n\t// Context menu chain\n\t/**\n\t * Emitted when a context menu interaction is recieved.\n\t * @param {ContextMenuCommandInteraction} interaction The interaction that was recieved.\n\t */\n\tPossibleContextMenuCommand: 'possibleContextMenuCommand' as const,\n\t/**\n\t * Emitted when the name of a sent context menu command does not match any loaded commands.\n\t * @param {UnknownContextMenuCommandPayload} payload The contextual payload\n\t */\n\tUnknownContextMenuCommand: 'unknownContextMenuCommand' as const,\n\t/**\n\t * Emitted when a chat input command is executed but a `contextMenuRun` method is not found.\n\t * @param {CommandDoesNotHaveContextMenuCommandHandlerPayload} payload The contextual payload\n\t */\n\tCommandDoesNotHaveContextMenuCommandHandler: 'commandDoesNotHaveContextMenuCommandHandler' as const,\n\t/**\n\t * Emitted before the `contextMenuRun` method of a command is run.\n\t * @param {PreContextMenuCommandRunPayload} payload The contextual payload\n\t */\n\tPreContextMenuCommandRun: 'preContextMenuCommandRun' as const,\n\n\t/**\n\t * Emitted when a precondition denies a context menu command from being run.\n\t * @param {UserError} error The error reported by the precondition\n\t * @param {ContextMenuCommandDeniedPayload} payload The contextual payload\n\t */\n\tContextMenuCommandDenied: 'contextMenuCommandDenied' as const,\n\t/**\n\t * Emitted when a context menu command passes all precondition checks, if any.\n\t * @param {ContextMenuCommandAcceptedPayload} payload The contextual payload\n\t */\n\tContextMenuCommandAccepted: 'contextMenuCommandAccepted' as const,\n\n\t/**\n\t * Emitted directly before a context menu command is run.\n\t * @param {ContextMenuCommandInteraction} interaction The interaction that executed the command\n\t * @param {ContextMenuCommand} command The command that is being run\n\t * @param {ContextMenuCommandRunPayload} payload The contextual payload\n\t */\n\tContextMenuCommandRun: 'contextMenuCommandRun' as const,\n\t/**\n\t * Emitted after a context menu command runs successfully.\n\t * @param {ContextMenuCommandSuccessPayload} payload The contextual payload\n\t */\n\tContextMenuCommandSuccess: 'contextMenuCommandSuccess' as const,\n\t/**\n\t * Emitted after a context menu command runs unsuccesfully.\n\t * @param {*} error The error that was thrown\n\t * @param {ContextMenuCommandErrorPayload} payload The contextual payload\n\t */\n\tContextMenuCommandError: 'contextMenuCommandError' as const,\n\t/**\n\t * Emitted directly after a context menu command finished running, regardless of the outcome.\n\t * @param {Interaction} interaction The interaction that executed the command\n\t * @param {ContextMenuCommand} command The command that finished running\n\t * @param {ContextMenuCommandFinishPayload} payload The contextual payload\n\t */\n\tContextMenuCommandFinish: 'contextMenuCommandFinish' as const\n\n\t// #endregion Sapphire events\n} as const;\n\nexport interface IPieceError {\n\tpiece: Piece;\n}\n\nexport interface ListenerErrorPayload extends IPieceError {\n\tpiece: Listener;\n}\n\nexport interface UnknownMessageCommandNamePayload {\n\tmessage: Message;\n\tprefix: string | RegExp;\n\tcommandPrefix: string;\n}\n\nexport interface CommandDoesNotHaveMessageCommandHandler {\n\tmessage: Message;\n\tprefix: string | RegExp;\n\tcommandPrefix: string;\n\tcommand: Command;\n}\n\nexport interface UnknownMessageCommandPayload extends UnknownMessageCommandNamePayload {\n\tcommandName: string;\n}\n\nexport interface IMessageCommandPayload {\n\tmessage: Message;\n\tcommand: MessageCommand;\n}\n\nexport interface PreMessageCommandRunPayload extends MessageCommandDeniedPayload {}\n\nexport interface MessageCommandDeniedPayload extends IMessageCommandPayload {\n\tparameters: string;\n\tcontext: MessageCommand.RunContext;\n}\n\nexport interface MessageCommandAcceptedPayload extends IMessageCommandPayload {\n\tparameters: string;\n\tcontext: MessageCommand.RunContext;\n}\n\nexport interface MessageCommandRunPayload extends MessageCommandAcceptedPayload {\n\targs: unknown;\n}\n\nexport interface MessageCommandFinishPayload extends MessageCommandRunPayload {\n\tsuccess: boolean;\n\tduration: number;\n}\n\nexport interface MessageCommandErrorPayload extends MessageCommandRunPayload {\n\tduration: number;\n}\n\nexport interface MessageCommandSuccessPayload extends MessageCommandRunPayload {\n\tresult: unknown;\n\tduration: number;\n}\n\nexport interface MessageCommandTypingErrorPayload extends MessageCommandRunPayload {}\n\nexport interface UnknownChatInputCommandPayload {\n\tinteraction: ChatInputCommandInteraction;\n\tcontext: ChatInputCommandContext;\n}\n\nexport interface CommandDoesNotHaveChatInputCommandHandlerPayload {\n\tinteraction: ChatInputCommandInteraction;\n\tcommand: Command;\n\tcontext: ChatInputCommandContext;\n}\n\nexport interface IChatInputCommandPayload {\n\tinteraction: ChatInputCommandInteraction;\n\tcommand: ChatInputCommand;\n}\n\nexport interface PreChatInputCommandRunPayload extends IChatInputCommandPayload {\n\tcontext: ChatInputCommandContext;\n}\n\nexport interface ChatInputCommandDeniedPayload extends IChatInputCommandPayload {\n\tcontext: ChatInputCommandContext;\n}\n\nexport interface ChatInputCommandAcceptedPayload extends PreChatInputCommandRunPayload {}\n\nexport interface ChatInputCommandRunPayload extends ChatInputCommandAcceptedPayload {}\n\nexport interface ChatInputCommandFinishPayload extends ChatInputCommandAcceptedPayload {\n\tsuccess: boolean;\n\tduration: number;\n}\n\nexport interface ChatInputCommandSuccessPayload extends ChatInputCommandRunPayload {\n\tresult: unknown;\n\tduration: number;\n}\n\nexport interface ChatInputCommandErrorPayload extends IChatInputCommandPayload {\n\tduration: number;\n}\n\nexport interface UnknownContextMenuCommandPayload {\n\tinteraction: ContextMenuCommandInteraction;\n\tcontext: ContextMenuCommandContext;\n}\n\nexport interface CommandDoesNotHaveContextMenuCommandHandlerPayload {\n\tinteraction: ContextMenuCommandInteraction;\n\tcontext: ContextMenuCommandContext;\n\tcommand: Command;\n}\n\nexport interface IContextMenuCommandPayload {\n\tinteraction: ContextMenuCommandInteraction;\n\tcommand: ContextMenuCommand;\n}\n\nexport interface PreContextMenuCommandRunPayload extends IContextMenuCommandPayload {\n\tcontext: ContextMenuCommandContext;\n}\n\nexport interface ContextMenuCommandDeniedPayload extends IContextMenuCommandPayload {\n\tcontext: ContextMenuCommandContext;\n}\n\nexport interface ContextMenuCommandAcceptedPayload extends PreContextMenuCommandRunPayload {}\n\nexport interface ContextMenuCommandRunPayload extends ContextMenuCommandAcceptedPayload {}\n\nexport interface ContextMenuCommandFinishPayload extends ContextMenuCommandAcceptedPayload {\n\tsuccess: boolean;\n\tduration: number;\n}\n\nexport interface ContextMenuCommandSuccessPayload extends ContextMenuCommandRunPayload {\n\tresult: unknown;\n\tduration: number;\n}\n\nexport interface ContextMenuCommandErrorPayload extends IContextMenuCommandPayload {\n\tduration: number;\n}\n\nexport interface IInteractionHandlerPayload {\n\tinteraction: Interaction;\n\thandler: InteractionHandler;\n}\n\nexport interface InteractionHandlerParseSuccess extends IInteractionHandlerPayload {}\n\nexport interface InteractionHandlerParseSome<T = unknown> extends IInteractionHandlerPayload {\n\t/**\n\t * The value that was passed to the `some` function.\n\t */\n\tvalue: T;\n}\n\nexport interface InteractionHandlerParseNone extends IInteractionHandlerPayload {}\n\nexport interface InteractionHandlerParseError extends IInteractionHandlerPayload {}\n\nexport interface InteractionHandlerError extends IInteractionHandlerPayload {}\n\nexport interface AutocompleteInteractionPayload {\n\tinteraction: AutocompleteInteraction;\n\tcommand: AutocompleteCommand;\n\tcontext: AutocompleteCommandContext;\n}\n\ndeclare const SapphireEvents: typeof Events;\n\ndeclare module 'discord.js' {\n\tinterface ClientEvents {\n\t\t// #region Sapphire load cycle events\n\t\t[SapphireEvents.PieceUnload]: [store: Store<Piece>, piece: Piece];\n\t\t[SapphireEvents.PiecePostLoad]: [store: Store<Piece>, piece: Piece];\n\n\t\t[SapphireEvents.ListenerError]: [error: unknown, payload: ListenerErrorPayload];\n\t\t[SapphireEvents.CommandApplicationCommandRegistryError]: [error: unknown, command: Command];\n\t\t[SapphireEvents.ApplicationCommandRegistriesInitialising]: [];\n\t\t[SapphireEvents.ApplicationCommandRegistriesRegistered]: [registries: Map<string, ApplicationCommandRegistry>, timeTaken: number];\n\t\t[SapphireEvents.ApplicationCommandRegistriesBulkOverwriteError]: [error: unknown, guildId: string | null];\n\n\t\t[SapphireEvents.PreMessageParsed]: [message: Message];\n\t\t[SapphireEvents.MentionPrefixOnly]: [message: Message];\n\t\t[SapphireEvents.NonPrefixedMessage]: [message: Message];\n\t\t[SapphireEvents.PrefixedMessage]: [message: Message, prefix: string | RegExp];\n\n\t\t[SapphireEvents.UnknownMessageCommandName]: [payload: UnknownMessageCommandNamePayload];\n\t\t[SapphireEvents.UnknownMessageCommand]: [payload: UnknownMessageCommandPayload];\n\t\t[SapphireEvents.CommandDoesNotHaveMessageCommandHandler]: [payload: CommandDoesNotHaveMessageCommandHandler];\n\t\t[SapphireEvents.PreMessageCommandRun]: [payload: PreMessageCommandRunPayload];\n\n\t\t[SapphireEvents.MessageCommandDenied]: [error: UserError, payload: MessageCommandDeniedPayload];\n\t\t[SapphireEvents.MessageCommandAccepted]: [payload: MessageCommandAcceptedPayload];\n\n\t\t[SapphireEvents.MessageCommandRun]: [message: Message, command: Command, payload: MessageCommandRunPayload];\n\t\t[SapphireEvents.MessageCommandSuccess]: [payload: MessageCommandSuccessPayload];\n\t\t[SapphireEvents.MessageCommandError]: [error: unknown, payload: MessageCommandErrorPayload];\n\t\t[SapphireEvents.MessageCommandFinish]: [message: Message, command: Command, payload: MessageCommandFinishPayload];\n\n\t\t[SapphireEvents.MessageCommandTypingError]: [error: Error, payload: MessageCommandTypingErrorPayload];\n\n\t\t[SapphireEvents.PluginLoaded]: [hook: PluginHook, name: string | undefined];\n\n\t\t[SapphireEvents.InteractionHandlerParseSuccess]: [option: Option<unknown>, payload: InteractionHandlerParseSuccess];\n\t\t[SapphireEvents.InteractionHandlerParseSome]: [option: Option.Some<unknown>, payload: InteractionHandlerParseSome];\n\t\t[SapphireEvents.InteractionHandlerParseNone]: [option: Option.None, payload: InteractionHandlerParseNone];\n\t\t[SapphireEvents.InteractionHandlerParseError]: [error: unknown, payload: InteractionHandlerParseError];\n\t\t[SapphireEvents.InteractionHandlerError]: [error: unknown, payload: InteractionHandlerError];\n\n\t\t[SapphireEvents.PossibleAutocompleteInteraction]: [interaction: AutocompleteInteraction];\n\t\t[SapphireEvents.CommandAutocompleteInteractionError]: [error: unknown, payload: AutocompleteInteractionPayload];\n\t\t[SapphireEvents.CommandAutocompleteInteractionSuccess]: [payload: AutocompleteInteractionPayload];\n\n\t\t// Chat input command chain\n\t\t[SapphireEvents.PossibleChatInputCommand]: [interaction: ChatInputCommandInteraction];\n\t\t[SapphireEvents.UnknownChatInputCommand]: [payload: UnknownChatInputCommandPayload];\n\t\t[SapphireEvents.CommandDoesNotHaveChatInputCommandHandler]: [payload: CommandDoesNotHaveChatInputCommandHandlerPayload];\n\t\t[SapphireEvents.PreChatInputCommandRun]: [payload: PreChatInputCommandRunPayload];\n\n\t\t[SapphireEvents.ChatInputCommandDenied]: [error: UserError, payload: ChatInputCommandDeniedPayload];\n\t\t[SapphireEvents.ChatInputCommandAccepted]: [payload: ChatInputCommandAcceptedPayload];\n\n\t\t[SapphireEvents.ChatInputCommandRun]: [\n\t\t\tinteraction: ChatInputCommandInteraction,\n\t\t\tcommand: ChatInputCommand,\n\t\t\tpayload: ChatInputCommandRunPayload\n\t\t];\n\t\t[SapphireEvents.ChatInputCommandSuccess]: [payload: ChatInputCommandSuccessPayload];\n\t\t[SapphireEvents.ChatInputCommandError]: [error: unknown, payload: ChatInputCommandErrorPayload];\n\t\t[SapphireEvents.ChatInputCommandFinish]: [\n\t\t\tinteraction: ChatInputCommandInteraction,\n\t\t\tcommand: ChatInputCommand,\n\t\t\tpayload: ChatInputCommandFinishPayload\n\t\t];\n\n\t\t// Context menu command chain\n\t\t[SapphireEvents.PossibleContextMenuCommand]: [interaction: ContextMenuCommandInteraction];\n\t\t[SapphireEvents.UnknownContextMenuCommand]: [payload: UnknownContextMenuCommandPayload];\n\t\t[SapphireEvents.CommandDoesNotHaveContextMenuCommandHandler]: [payload: CommandDoesNotHaveContextMenuCommandHandlerPayload];\n\t\t[SapphireEvents.PreContextMenuCommandRun]: [payload: PreContextMenuCommandRunPayload];\n\n\t\t[SapphireEvents.ContextMenuCommandDenied]: [error: UserError, payload: ContextMenuCommandDeniedPayload];\n\t\t[SapphireEvents.ContextMenuCommandAccepted]: [payload: ContextMenuCommandAcceptedPayload];\n\n\t\t[SapphireEvents.ContextMenuCommandRun]: [\n\t\t\tinteraction: ContextMenuCommandInteraction,\n\t\t\tcommand: ContextMenuCommand,\n\t\t\tpayload: ContextMenuCommandRunPayload\n\t\t];\n\t\t[SapphireEvents.ContextMenuCommandSuccess]: [payload: ContextMenuCommandSuccessPayload];\n\t\t[SapphireEvents.ContextMenuCommandError]: [error: unknown, payload: ContextMenuCommandErrorPayload];\n\t\t[SapphireEvents.ContextMenuCommandFinish]: [\n\t\t\tinteraction: ContextMenuCommandInteraction,\n\t\t\tcommand: ContextMenuCommand,\n\t\t\tpayload: ContextMenuCommandFinishPayload\n\t\t];\n\n\t\t// #endregion Sapphire load cycle events\n\n\t\t// #region Termination\n\t\t[K: string]: unknown[];\n\t\t// #endregion Termination\n\t}\n}\n"]}