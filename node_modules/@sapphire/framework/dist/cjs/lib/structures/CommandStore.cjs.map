{"version":3,"sources":["../../../../src/lib/structures/CommandStore.ts"],"names":[],"mappings":";;;;AAAA,SAAS,kBAAkB;AAC3B,SAAS,wBAAwB;AACjC;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AACP,SAAS,mCAAmC;AAC5C,SAAS,4BAA4B;AACrC,SAAS,eAAe;AAMjB,IAAM,gBAAN,MAAM,sBAAqB,WAAgC;AAAA,EAC1D,cAAc;AACpB,UAAM,SAAS,EAAE,MAAM,WAAW,CAAC;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,aAAuB;AACjC,UAAM,aAAa,IAAI,IAAI,KAAK,IAAI,CAAC,YAAY,QAAQ,QAAQ,CAAC;AAClE,eAAW,OAAO,IAAI;AACtB,WAAO,CAAC,GAAG,UAAU;AAAA,EACtB;AAAA,EAEgB,OAAO,MAAwB;AAC9C,UAAM,QAAQ,KAAK,QAAQ,IAAI;AAG/B,eAAW,YAAY,MAAM,2BAA2B,mBAAmB;AAC1E,YAAM,eAAe,KAAK,QAAQ,IAAI,QAAQ;AAC9C,UAAI,iBAAiB,OAAO;AAC3B,aAAK,QAAQ,OAAO,QAAQ;AAAA,MAC7B;AAAA,IACD;AAEA,eAAW,YAAY,MAAM,2BAA2B,qBAAqB;AAC5E,YAAM,eAAe,KAAK,QAAQ,IAAI,QAAQ;AAC9C,UAAI,iBAAiB,OAAO;AAC3B,aAAK,QAAQ,OAAO,QAAQ;AAAA,MAC7B;AAAA,IACD;AAGA,eAAW,OAAO,MAAM,IAAI;AAE5B,WAAO,MAAM,OAAO,IAAI;AAAA,EACzB;AAAA,EAEA,MAAsB,UAAU;AAC/B,UAAM,MAAM,QAAQ;AAGpB,QAAI,CAAC,KAAK,UAAU,OAAO;AAAa;AAIxC,eAAW,WAAW,KAAK,OAAO,GAAG;AACpC,UAAI,QAAQ,6BAA6B;AACxC,YAAI;AACH,gBAAM,QAAQ,4BAA4B,QAAQ,0BAA0B;AAAA,QAC7E,SAAS,OAAO;AACf,+BAAqB,OAAO,OAAO;AAAA,QACpC;AAAA,MACD;AAAA,IACD;AAGA,QAAI,mCAAmC,MAAM,iBAAiB,eAAe;AAC5E,YAAM,oBAAoB,MAAM,KAAK,UAAU,OAAO,YAAY,QAAQ;AAC1E;AAAA,IACD;AAEA,UAAM,EAAE,qBAAqB,gBAAgB,cAAc,IAAI,MAAM,4BAA4B,6BAA6B;AAE9H,eAAW,WAAW,KAAK,OAAO,GAAG;AAEpC,YAAM,QAAQ,2BAA2B,aAAa,EAAE,qBAAqB,gBAAgB,aAAa;AAG1G,iBAAW,YAAY,QAAQ,2BAA2B,mBAAmB;AAC5E,aAAK,QAAQ,IAAI,UAAU,OAAO;AAAA,MACnC;AAEA,iBAAW,YAAY,QAAQ,2BAA2B,qBAAqB;AAC9E,aAAK,QAAQ,IAAI,UAAU,OAAO;AAAA,MACnC;AAAA,IACD;AAAA,EACD;AACD;AA9EkE;AAA3D,IAAM,eAAN","sourcesContent":["import { AliasStore } from '@sapphire/pieces';\nimport { RegisterBehavior } from '../types/Enums';\nimport {\n\tallGuildIdsToFetchCommandsFor,\n\tgetDefaultBehaviorWhenNotIdentical,\n\thandleBulkOverwrite,\n\tregistries\n} from '../utils/application-commands/ApplicationCommandRegistries';\nimport { getNeededRegistryParameters } from '../utils/application-commands/getNeededParameters';\nimport { emitPerRegistryError } from '../utils/application-commands/registriesErrors';\nimport { Command } from './Command';\n\n/**\n * Stores all Command pieces\n * @since 1.0.0\n */\nexport class CommandStore extends AliasStore<Command, 'commands'> {\n\tpublic constructor() {\n\t\tsuper(Command, { name: 'commands' });\n\t}\n\n\t/**\n\t * Get all the command categories.\n\t */\n\tpublic get categories(): string[] {\n\t\tconst categories = new Set(this.map((command) => command.category));\n\t\tcategories.delete(null);\n\t\treturn [...categories] as string[];\n\t}\n\n\tpublic override unload(name: string | Command) {\n\t\tconst piece = this.resolve(name);\n\n\t\t// Remove the aliases from the store\n\t\tfor (const nameOrId of piece.applicationCommandRegistry.chatInputCommands) {\n\t\t\tconst aliasedPiece = this.aliases.get(nameOrId);\n\t\t\tif (aliasedPiece === piece) {\n\t\t\t\tthis.aliases.delete(nameOrId);\n\t\t\t}\n\t\t}\n\n\t\tfor (const nameOrId of piece.applicationCommandRegistry.contextMenuCommands) {\n\t\t\tconst aliasedPiece = this.aliases.get(nameOrId);\n\t\t\tif (aliasedPiece === piece) {\n\t\t\t\tthis.aliases.delete(nameOrId);\n\t\t\t}\n\t\t}\n\n\t\t// Remove the registry from the application command registries\n\t\tregistries.delete(piece.name);\n\n\t\treturn super.unload(name);\n\t}\n\n\tpublic override async loadAll() {\n\t\tawait super.loadAll();\n\n\t\t// If we don't have an application, that means this was called on login...\n\t\tif (!this.container.client.application) return;\n\n\t\t// super.loadAll() currently deletes all application command registries while unloading old pieces,\n\t\t// re-register application commands to ensure allGuildIdsToFetchCommandsFor has new guild ids for getNeededRegistryParameters\n\t\tfor (const command of this.values()) {\n\t\t\tif (command.registerApplicationCommands) {\n\t\t\t\ttry {\n\t\t\t\t\tawait command.registerApplicationCommands(command.applicationCommandRegistry);\n\t\t\t\t} catch (error) {\n\t\t\t\t\temitPerRegistryError(error, command);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If the default behavior is set to bulk overwrite, handle it as such and return.\n\t\tif (getDefaultBehaviorWhenNotIdentical() === RegisterBehavior.BulkOverwrite) {\n\t\t\tawait handleBulkOverwrite(this, this.container.client.application.commands);\n\t\t\treturn;\n\t\t}\n\n\t\tconst { applicationCommands, globalCommands, guildCommands } = await getNeededRegistryParameters(allGuildIdsToFetchCommandsFor);\n\n\t\tfor (const command of this.values()) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/dot-notation\n\t\t\tawait command.applicationCommandRegistry['runAPICalls'](applicationCommands, globalCommands, guildCommands);\n\n\t\t\t// Reinitialize the aliases\n\t\t\tfor (const nameOrId of command.applicationCommandRegistry.chatInputCommands) {\n\t\t\t\tthis.aliases.set(nameOrId, command);\n\t\t\t}\n\n\t\t\tfor (const nameOrId of command.applicationCommandRegistry.contextMenuCommands) {\n\t\t\t\tthis.aliases.set(nameOrId, command);\n\t\t\t}\n\t\t}\n\t}\n}\n"]}