{"version":3,"sources":["../../../../src/lib/errors/UserError.ts"],"names":[],"mappings":";;;;AAIO,IAAM,aAAN,MAAM,mBAAkB,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,EAe7B,YAAY,SAA4B;AAC9C,UAAM,QAAQ,OAAO;AACrB,SAAK,aAAa,QAAQ;AAC1B,SAAK,UAAU,QAAQ,WAAW;AAAA,EACnC;AAAA;AAAA,EAGA,IAAoB,OAAe;AAClC,WAAO;AAAA,EACR;AACD;AAzBqC;AAA9B,IAAM,YAAN","sourcesContent":["/**\n * The UserError class to be emitted in the pieces.\n * @property name This will be `'UserError'` and can be used to distinguish the type of error when any error gets thrown\n */\nexport class UserError extends Error {\n\t/**\n\t * An identifier, useful to localize emitted errors.\n\t */\n\tpublic readonly identifier: string;\n\n\t/**\n\t * User-provided context.\n\t */\n\tpublic readonly context: unknown;\n\n\t/**\n\t * Constructs an UserError.\n\t * @param options The UserError options\n\t */\n\tpublic constructor(options: UserError.Options) {\n\t\tsuper(options.message);\n\t\tthis.identifier = options.identifier;\n\t\tthis.context = options.context ?? null;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/class-literal-property-style\n\tpublic override get name(): string {\n\t\treturn 'UserError';\n\t}\n}\n\nexport namespace UserError {\n\t/**\n\t * The options for {@link UserError}.\n\t * @since 1.0.0\n\t */\n\texport interface Options {\n\t\t/**\n\t\t * The identifier for this error.\n\t\t * @since 1.0.0\n\t\t */\n\t\tidentifier: string;\n\n\t\t/**\n\t\t * The message to be passed to the Error constructor.\n\t\t * @since 1.0.0\n\t\t */\n\t\tmessage?: string;\n\n\t\t/**\n\t\t * The extra context to provide more information about this error.\n\t\t * @since 1.0.0\n\t\t * @default null\n\t\t */\n\t\tcontext?: unknown;\n\t}\n}\n"]}