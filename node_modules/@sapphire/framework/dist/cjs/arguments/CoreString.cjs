'use strict';

var pieces = require('@sapphire/pieces');
var Identifiers_cjs = require('../lib/errors/Identifiers.cjs');
var string_cjs = require('../lib/resolvers/string.cjs');
var Argument_cjs = require('../lib/structures/Argument.cjs');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var _CoreArgument = class _CoreArgument extends Argument_cjs.Argument {
  constructor(context) {
    super(context, { name: "string" });
    this.messages = {
      [Identifiers_cjs.Identifiers.ArgumentStringTooShort]: ({ minimum }) => `The argument must be longer than ${minimum} characters.`,
      [Identifiers_cjs.Identifiers.ArgumentStringTooLong]: ({ maximum }) => `The argument must be shorter than ${maximum} characters.`
    };
  }
  run(parameter, context) {
    const resolved = string_cjs.resolveString(parameter, { minimum: context?.minimum, maximum: context?.maximum });
    return resolved.mapErrInto(
      (identifier) => this.error({
        parameter,
        identifier,
        message: this.messages[identifier](context),
        context
      })
    );
  }
};
__name(_CoreArgument, "CoreArgument");
var CoreArgument = _CoreArgument;
void pieces.container.stores.loadPiece({
  name: "string",
  piece: CoreArgument,
  store: "arguments"
});

exports.CoreArgument = CoreArgument;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=CoreString.cjs.map