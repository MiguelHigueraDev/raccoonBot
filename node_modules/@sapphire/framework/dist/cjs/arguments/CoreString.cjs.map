{"version":3,"sources":["../../../src/arguments/CoreString.ts"],"names":[],"mappings":";;;;AAAA,SAAS,iBAAiB;AAC1B,SAAS,mBAAmB;AAC5B,SAAS,qBAAqB;AAC9B,SAAS,gBAAgB;AAElB,IAAM,gBAAN,MAAM,sBAAqB,SAAiB;AAAA,EAM3C,YAAY,SAAiC;AACnD,UAAM,SAAS,EAAE,MAAM,SAAS,CAAC;AANlC,SAAiB,WAAW;AAAA,MAC3B,CAAC,YAAY,sBAAsB,GAAG,CAAC,EAAE,QAAQ,MAAwB,oCAAoC,OAAO;AAAA,MACpH,CAAC,YAAY,qBAAqB,GAAG,CAAC,EAAE,QAAQ,MAAwB,qCAAqC,OAAO;AAAA,IACrH;AAAA,EAIA;AAAA,EAEO,IAAI,WAAmB,SAAoD;AACjF,UAAM,WAAW,cAAc,WAAW,EAAE,SAAS,SAAS,SAAS,SAAS,SAAS,QAAQ,CAAC;AAClG,WAAO,SAAS;AAAA,MAAW,CAAC,eAC3B,KAAK,MAAM;AAAA,QACV;AAAA,QACA;AAAA,QACA,SAAS,KAAK,SAAS,UAAU,EAAE,OAAO;AAAA,QAC1C;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AACD;AArBmD;AAA5C,IAAM,eAAN;AAuBP,KAAK,UAAU,OAAO,UAAU;AAAA,EAC/B,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AACR,CAAC","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { Identifiers } from '../lib/errors/Identifiers';\nimport { resolveString } from '../lib/resolvers/string';\nimport { Argument } from '../lib/structures/Argument';\n\nexport class CoreArgument extends Argument<string> {\n\tprivate readonly messages = {\n\t\t[Identifiers.ArgumentStringTooShort]: ({ minimum }: Argument.Context) => `The argument must be longer than ${minimum} characters.`,\n\t\t[Identifiers.ArgumentStringTooLong]: ({ maximum }: Argument.Context) => `The argument must be shorter than ${maximum} characters.`\n\t} as const;\n\n\tpublic constructor(context: Argument.LoaderContext) {\n\t\tsuper(context, { name: 'string' });\n\t}\n\n\tpublic run(parameter: string, context: Argument.Context): Argument.Result<string> {\n\t\tconst resolved = resolveString(parameter, { minimum: context?.minimum, maximum: context?.maximum });\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: this.messages[identifier](context),\n\t\t\t\tcontext\n\t\t\t})\n\t\t);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'string',\n\tpiece: CoreArgument,\n\tstore: 'arguments'\n});\n"]}