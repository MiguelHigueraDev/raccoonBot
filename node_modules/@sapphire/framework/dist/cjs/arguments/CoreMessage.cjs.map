{"version":3,"sources":["../../../src/arguments/CoreMessage.ts"],"names":[],"mappings":";;;;AAAA,SAAS,iBAAiB;AAE1B,SAAS,sBAAsB;AAC/B,SAAS,gBAAgB;AAGlB,IAAM,gBAAN,MAAM,sBAAqB,SAAkB;AAAA,EAC5C,YAAY,SAAiC;AACnD,UAAM,SAAS,EAAE,MAAM,UAAU,CAAC;AAAA,EACnC;AAAA,EAEA,MAAa,IAAI,WAAmB,SAAgE;AACnG,UAAM,UAAU,QAAQ,WAAW,QAAQ,QAAQ;AACnD,UAAM,WAAW,MAAM,eAAe,WAAW;AAAA,MAChD,sBAAsB,QAAQ;AAAA,MAC9B,SAAS,QAAQ;AAAA,MACjB,MAAM,QAAQ,QAAQ;AAAA,IACvB,CAAC;AAED,WAAO,SAAS;AAAA,MAAW,CAAC,eAC3B,KAAK,MAAM;AAAA,QACV;AAAA,QACA;AAAA,QACA,SAAS;AAAA,QACT,SAAS,EAAE,GAAG,SAAS,QAAQ;AAAA,MAChC,CAAC;AAAA,IACF;AAAA,EACD;AACD;AAtBoD;AAA7C,IAAM,eAAN;AAwBP,KAAK,UAAU,OAAO,UAAU;AAAA,EAC/B,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AACR,CAAC","sourcesContent":["import { container } from '@sapphire/pieces';\nimport type { Message } from 'discord.js';\nimport { resolveMessage } from '../lib/resolvers/message';\nimport { Argument } from '../lib/structures/Argument';\nimport type { MessageArgumentContext } from '../lib/types/ArgumentContexts';\n\nexport class CoreArgument extends Argument<Message> {\n\tpublic constructor(context: Argument.LoaderContext) {\n\t\tsuper(context, { name: 'message' });\n\t}\n\n\tpublic async run(parameter: string, context: MessageArgumentContext): Argument.AsyncResult<Message> {\n\t\tconst channel = context.channel ?? context.message.channel;\n\t\tconst resolved = await resolveMessage(parameter, {\n\t\t\tmessageOrInteraction: context.message,\n\t\t\tchannel: context.channel,\n\t\t\tscan: context.scan ?? false\n\t\t});\n\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: 'The given argument did not resolve to a message.',\n\t\t\t\tcontext: { ...context, channel }\n\t\t\t})\n\t\t);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'message',\n\tpiece: CoreArgument,\n\tstore: 'arguments'\n});\n"]}