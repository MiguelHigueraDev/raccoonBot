{"version":3,"sources":["../../../src/arguments/CoreBoolean.ts"],"names":[],"mappings":";;;;AAAA,SAAS,iBAAiB;AAC1B,SAAS,sBAAsB;AAC/B,SAAS,gBAAgB;AAGlB,IAAM,gBAAN,MAAM,sBAAqB,SAAkB;AAAA,EAC5C,YAAY,SAAiC;AACnD,UAAM,SAAS,EAAE,MAAM,UAAU,CAAC;AAAA,EACnC;AAAA,EAEO,IAAI,WAAmB,SAA2D;AACxF,UAAM,WAAW,eAAe,WAAW,EAAE,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,CAAC;AAC7F,WAAO,SAAS;AAAA,MAAW,CAAC,eAC3B,KAAK,MAAM;AAAA,QACV;AAAA,QACA;AAAA,QACA,SAAS;AAAA,QACT;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AACD;AAhBoD;AAA7C,IAAM,eAAN;AAkBP,KAAK,UAAU,OAAO,UAAU;AAAA,EAC/B,MAAM;AAAA,EACN,OAAO;AAAA,EACP,OAAO;AACR,CAAC","sourcesContent":["import { container } from '@sapphire/pieces';\nimport { resolveBoolean } from '../lib/resolvers/boolean';\nimport { Argument } from '../lib/structures/Argument';\nimport type { BooleanArgumentContext } from '../lib/types/ArgumentContexts';\n\nexport class CoreArgument extends Argument<boolean> {\n\tpublic constructor(context: Argument.LoaderContext) {\n\t\tsuper(context, { name: 'boolean' });\n\t}\n\n\tpublic run(parameter: string, context: BooleanArgumentContext): Argument.Result<boolean> {\n\t\tconst resolved = resolveBoolean(parameter, { truths: context.truths, falses: context.falses });\n\t\treturn resolved.mapErrInto((identifier) =>\n\t\t\tthis.error({\n\t\t\t\tparameter,\n\t\t\t\tidentifier,\n\t\t\t\tmessage: 'The argument did not resolve to a boolean.',\n\t\t\t\tcontext\n\t\t\t})\n\t\t);\n\t}\n}\n\nvoid container.stores.loadPiece({\n\tname: 'boolean',\n\tpiece: CoreArgument,\n\tstore: 'arguments'\n});\n"]}