var SapphireDiscordUtilities = (function (exports) {
  'use strict';

  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
  var __commonJS = (cb, mod2) => function __require() {
    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
    mod2
  ));
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // ../../node_modules/discord-api-types/gateway/common.js
  var require_common = __commonJS({
    "../../node_modules/discord-api-types/gateway/common.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/gateway/v10.js
  var require_v10 = __commonJS({
    "../../node_modules/discord-api-types/gateway/v10.js"(exports) {
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GatewayDispatchEvents = exports.GatewayIntentBits = exports.GatewayCloseCodes = exports.GatewayOpcodes = exports.GatewayVersion = void 0;
      __exportStar(require_common(), exports);
      exports.GatewayVersion = "10";
      (function(GatewayOpcodes3) {
        GatewayOpcodes3[GatewayOpcodes3["Dispatch"] = 0] = "Dispatch";
        GatewayOpcodes3[GatewayOpcodes3["Heartbeat"] = 1] = "Heartbeat";
        GatewayOpcodes3[GatewayOpcodes3["Identify"] = 2] = "Identify";
        GatewayOpcodes3[GatewayOpcodes3["PresenceUpdate"] = 3] = "PresenceUpdate";
        GatewayOpcodes3[GatewayOpcodes3["VoiceStateUpdate"] = 4] = "VoiceStateUpdate";
        GatewayOpcodes3[GatewayOpcodes3["Resume"] = 6] = "Resume";
        GatewayOpcodes3[GatewayOpcodes3["Reconnect"] = 7] = "Reconnect";
        GatewayOpcodes3[GatewayOpcodes3["RequestGuildMembers"] = 8] = "RequestGuildMembers";
        GatewayOpcodes3[GatewayOpcodes3["InvalidSession"] = 9] = "InvalidSession";
        GatewayOpcodes3[GatewayOpcodes3["Hello"] = 10] = "Hello";
        GatewayOpcodes3[GatewayOpcodes3["HeartbeatAck"] = 11] = "HeartbeatAck";
      })(exports.GatewayOpcodes || (exports.GatewayOpcodes = {}));
      (function(GatewayCloseCodes3) {
        GatewayCloseCodes3[GatewayCloseCodes3["UnknownError"] = 4e3] = "UnknownError";
        GatewayCloseCodes3[GatewayCloseCodes3["UnknownOpcode"] = 4001] = "UnknownOpcode";
        GatewayCloseCodes3[GatewayCloseCodes3["DecodeError"] = 4002] = "DecodeError";
        GatewayCloseCodes3[GatewayCloseCodes3["NotAuthenticated"] = 4003] = "NotAuthenticated";
        GatewayCloseCodes3[GatewayCloseCodes3["AuthenticationFailed"] = 4004] = "AuthenticationFailed";
        GatewayCloseCodes3[GatewayCloseCodes3["AlreadyAuthenticated"] = 4005] = "AlreadyAuthenticated";
        GatewayCloseCodes3[GatewayCloseCodes3["InvalidSeq"] = 4007] = "InvalidSeq";
        GatewayCloseCodes3[GatewayCloseCodes3["RateLimited"] = 4008] = "RateLimited";
        GatewayCloseCodes3[GatewayCloseCodes3["SessionTimedOut"] = 4009] = "SessionTimedOut";
        GatewayCloseCodes3[GatewayCloseCodes3["InvalidShard"] = 4010] = "InvalidShard";
        GatewayCloseCodes3[GatewayCloseCodes3["ShardingRequired"] = 4011] = "ShardingRequired";
        GatewayCloseCodes3[GatewayCloseCodes3["InvalidAPIVersion"] = 4012] = "InvalidAPIVersion";
        GatewayCloseCodes3[GatewayCloseCodes3["InvalidIntents"] = 4013] = "InvalidIntents";
        GatewayCloseCodes3[GatewayCloseCodes3["DisallowedIntents"] = 4014] = "DisallowedIntents";
      })(exports.GatewayCloseCodes || (exports.GatewayCloseCodes = {}));
      (function(GatewayIntentBits3) {
        GatewayIntentBits3[GatewayIntentBits3["Guilds"] = 1] = "Guilds";
        GatewayIntentBits3[GatewayIntentBits3["GuildMembers"] = 2] = "GuildMembers";
        GatewayIntentBits3[GatewayIntentBits3["GuildModeration"] = 4] = "GuildModeration";
        GatewayIntentBits3[GatewayIntentBits3["GuildBans"] = 4] = "GuildBans";
        GatewayIntentBits3[GatewayIntentBits3["GuildEmojisAndStickers"] = 8] = "GuildEmojisAndStickers";
        GatewayIntentBits3[GatewayIntentBits3["GuildIntegrations"] = 16] = "GuildIntegrations";
        GatewayIntentBits3[GatewayIntentBits3["GuildWebhooks"] = 32] = "GuildWebhooks";
        GatewayIntentBits3[GatewayIntentBits3["GuildInvites"] = 64] = "GuildInvites";
        GatewayIntentBits3[GatewayIntentBits3["GuildVoiceStates"] = 128] = "GuildVoiceStates";
        GatewayIntentBits3[GatewayIntentBits3["GuildPresences"] = 256] = "GuildPresences";
        GatewayIntentBits3[GatewayIntentBits3["GuildMessages"] = 512] = "GuildMessages";
        GatewayIntentBits3[GatewayIntentBits3["GuildMessageReactions"] = 1024] = "GuildMessageReactions";
        GatewayIntentBits3[GatewayIntentBits3["GuildMessageTyping"] = 2048] = "GuildMessageTyping";
        GatewayIntentBits3[GatewayIntentBits3["DirectMessages"] = 4096] = "DirectMessages";
        GatewayIntentBits3[GatewayIntentBits3["DirectMessageReactions"] = 8192] = "DirectMessageReactions";
        GatewayIntentBits3[GatewayIntentBits3["DirectMessageTyping"] = 16384] = "DirectMessageTyping";
        GatewayIntentBits3[GatewayIntentBits3["MessageContent"] = 32768] = "MessageContent";
        GatewayIntentBits3[GatewayIntentBits3["GuildScheduledEvents"] = 65536] = "GuildScheduledEvents";
        GatewayIntentBits3[GatewayIntentBits3["AutoModerationConfiguration"] = 1048576] = "AutoModerationConfiguration";
        GatewayIntentBits3[GatewayIntentBits3["AutoModerationExecution"] = 2097152] = "AutoModerationExecution";
      })(exports.GatewayIntentBits || (exports.GatewayIntentBits = {}));
      (function(GatewayDispatchEvents3) {
        GatewayDispatchEvents3["ApplicationCommandPermissionsUpdate"] = "APPLICATION_COMMAND_PERMISSIONS_UPDATE";
        GatewayDispatchEvents3["ChannelCreate"] = "CHANNEL_CREATE";
        GatewayDispatchEvents3["ChannelDelete"] = "CHANNEL_DELETE";
        GatewayDispatchEvents3["ChannelPinsUpdate"] = "CHANNEL_PINS_UPDATE";
        GatewayDispatchEvents3["ChannelUpdate"] = "CHANNEL_UPDATE";
        GatewayDispatchEvents3["GuildBanAdd"] = "GUILD_BAN_ADD";
        GatewayDispatchEvents3["GuildBanRemove"] = "GUILD_BAN_REMOVE";
        GatewayDispatchEvents3["GuildCreate"] = "GUILD_CREATE";
        GatewayDispatchEvents3["GuildDelete"] = "GUILD_DELETE";
        GatewayDispatchEvents3["GuildEmojisUpdate"] = "GUILD_EMOJIS_UPDATE";
        GatewayDispatchEvents3["GuildIntegrationsUpdate"] = "GUILD_INTEGRATIONS_UPDATE";
        GatewayDispatchEvents3["GuildMemberAdd"] = "GUILD_MEMBER_ADD";
        GatewayDispatchEvents3["GuildMemberRemove"] = "GUILD_MEMBER_REMOVE";
        GatewayDispatchEvents3["GuildMembersChunk"] = "GUILD_MEMBERS_CHUNK";
        GatewayDispatchEvents3["GuildMemberUpdate"] = "GUILD_MEMBER_UPDATE";
        GatewayDispatchEvents3["GuildRoleCreate"] = "GUILD_ROLE_CREATE";
        GatewayDispatchEvents3["GuildRoleDelete"] = "GUILD_ROLE_DELETE";
        GatewayDispatchEvents3["GuildRoleUpdate"] = "GUILD_ROLE_UPDATE";
        GatewayDispatchEvents3["GuildStickersUpdate"] = "GUILD_STICKERS_UPDATE";
        GatewayDispatchEvents3["GuildUpdate"] = "GUILD_UPDATE";
        GatewayDispatchEvents3["IntegrationCreate"] = "INTEGRATION_CREATE";
        GatewayDispatchEvents3["IntegrationDelete"] = "INTEGRATION_DELETE";
        GatewayDispatchEvents3["IntegrationUpdate"] = "INTEGRATION_UPDATE";
        GatewayDispatchEvents3["InteractionCreate"] = "INTERACTION_CREATE";
        GatewayDispatchEvents3["InviteCreate"] = "INVITE_CREATE";
        GatewayDispatchEvents3["InviteDelete"] = "INVITE_DELETE";
        GatewayDispatchEvents3["MessageCreate"] = "MESSAGE_CREATE";
        GatewayDispatchEvents3["MessageDelete"] = "MESSAGE_DELETE";
        GatewayDispatchEvents3["MessageDeleteBulk"] = "MESSAGE_DELETE_BULK";
        GatewayDispatchEvents3["MessageReactionAdd"] = "MESSAGE_REACTION_ADD";
        GatewayDispatchEvents3["MessageReactionRemove"] = "MESSAGE_REACTION_REMOVE";
        GatewayDispatchEvents3["MessageReactionRemoveAll"] = "MESSAGE_REACTION_REMOVE_ALL";
        GatewayDispatchEvents3["MessageReactionRemoveEmoji"] = "MESSAGE_REACTION_REMOVE_EMOJI";
        GatewayDispatchEvents3["MessageUpdate"] = "MESSAGE_UPDATE";
        GatewayDispatchEvents3["PresenceUpdate"] = "PRESENCE_UPDATE";
        GatewayDispatchEvents3["StageInstanceCreate"] = "STAGE_INSTANCE_CREATE";
        GatewayDispatchEvents3["StageInstanceDelete"] = "STAGE_INSTANCE_DELETE";
        GatewayDispatchEvents3["StageInstanceUpdate"] = "STAGE_INSTANCE_UPDATE";
        GatewayDispatchEvents3["Ready"] = "READY";
        GatewayDispatchEvents3["Resumed"] = "RESUMED";
        GatewayDispatchEvents3["ThreadCreate"] = "THREAD_CREATE";
        GatewayDispatchEvents3["ThreadDelete"] = "THREAD_DELETE";
        GatewayDispatchEvents3["ThreadListSync"] = "THREAD_LIST_SYNC";
        GatewayDispatchEvents3["ThreadMembersUpdate"] = "THREAD_MEMBERS_UPDATE";
        GatewayDispatchEvents3["ThreadMemberUpdate"] = "THREAD_MEMBER_UPDATE";
        GatewayDispatchEvents3["ThreadUpdate"] = "THREAD_UPDATE";
        GatewayDispatchEvents3["TypingStart"] = "TYPING_START";
        GatewayDispatchEvents3["UserUpdate"] = "USER_UPDATE";
        GatewayDispatchEvents3["VoiceServerUpdate"] = "VOICE_SERVER_UPDATE";
        GatewayDispatchEvents3["VoiceStateUpdate"] = "VOICE_STATE_UPDATE";
        GatewayDispatchEvents3["WebhooksUpdate"] = "WEBHOOKS_UPDATE";
        GatewayDispatchEvents3["GuildScheduledEventCreate"] = "GUILD_SCHEDULED_EVENT_CREATE";
        GatewayDispatchEvents3["GuildScheduledEventUpdate"] = "GUILD_SCHEDULED_EVENT_UPDATE";
        GatewayDispatchEvents3["GuildScheduledEventDelete"] = "GUILD_SCHEDULED_EVENT_DELETE";
        GatewayDispatchEvents3["GuildScheduledEventUserAdd"] = "GUILD_SCHEDULED_EVENT_USER_ADD";
        GatewayDispatchEvents3["GuildScheduledEventUserRemove"] = "GUILD_SCHEDULED_EVENT_USER_REMOVE";
        GatewayDispatchEvents3["AutoModerationRuleCreate"] = "AUTO_MODERATION_RULE_CREATE";
        GatewayDispatchEvents3["AutoModerationRuleUpdate"] = "AUTO_MODERATION_RULE_UPDATE";
        GatewayDispatchEvents3["AutoModerationRuleDelete"] = "AUTO_MODERATION_RULE_DELETE";
        GatewayDispatchEvents3["AutoModerationActionExecution"] = "AUTO_MODERATION_ACTION_EXECUTION";
        GatewayDispatchEvents3["GuildAuditLogEntryCreate"] = "GUILD_AUDIT_LOG_ENTRY_CREATE";
        GatewayDispatchEvents3["EntitlementCreate"] = "ENTITLEMENT_CREATE";
        GatewayDispatchEvents3["EntitlementUpdate"] = "ENTITLEMENT_UPDATE";
        GatewayDispatchEvents3["EntitlementDelete"] = "ENTITLEMENT_DELETE";
      })(exports.GatewayDispatchEvents || (exports.GatewayDispatchEvents = {}));
    }
  });

  // ../../node_modules/discord-api-types/globals.js
  var require_globals = __commonJS({
    "../../node_modules/discord-api-types/globals.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FormattingPatterns = void 0;
      exports.FormattingPatterns = {
        /**
         * Regular expression for matching a user mention, strictly without a nickname
         *
         * The `id` group property is present on the `exec` result of this expression
         */
        User: /<@(?<id>\d{17,20})>/,
        /**
         * Regular expression for matching a user mention, strictly with a nickname
         *
         * The `id` group property is present on the `exec` result of this expression
         *
         * @deprecated Passing `!` in user mentions is no longer necessary / supported, and future message contents won't have it
         */
        UserWithNickname: /<@!(?<id>\d{17,20})>/,
        /**
         * Regular expression for matching a user mention, with or without a nickname
         *
         * The `id` group property is present on the `exec` result of this expression
         *
         * @deprecated Passing `!` in user mentions is no longer necessary / supported, and future message contents won't have it
         */
        UserWithOptionalNickname: /<@!?(?<id>\d{17,20})>/,
        /**
         * Regular expression for matching a channel mention
         *
         * The `id` group property is present on the `exec` result of this expression
         */
        Channel: /<#(?<id>\d{17,20})>/,
        /**
         * Regular expression for matching a role mention
         *
         * The `id` group property is present on the `exec` result of this expression
         */
        Role: /<@&(?<id>\d{17,20})>/,
        /**
         * Regular expression for matching a application command mention
         *
         * The `fullName` (possibly including `name`, `subcommandOrGroup` and `subcommand`) and `id` group properties are present on the `exec` result of this expression
         */
        SlashCommand: (
          // eslint-disable-next-line unicorn/no-unsafe-regex
          /<\/(?<fullName>(?<name>[-_\p{Letter}\p{Number}\p{sc=Deva}\p{sc=Thai}]{1,32})(?: (?<subcommandOrGroup>[-_\p{Letter}\p{Number}\p{sc=Deva}\p{sc=Thai}]{1,32}))?(?: (?<subcommand>[-_\p{Letter}\p{Number}\p{sc=Deva}\p{sc=Thai}]{1,32}))?):(?<id>\d{17,20})>/u
        ),
        /**
         * Regular expression for matching a custom emoji, either static or animated
         *
         * The `animated`, `name` and `id` group properties are present on the `exec` result of this expression
         */
        Emoji: /<(?<animated>a)?:(?<name>\w{2,32}):(?<id>\d{17,20})>/,
        /**
         * Regular expression for matching strictly an animated custom emoji
         *
         * The `animated`, `name` and `id` group properties are present on the `exec` result of this expression
         */
        AnimatedEmoji: /<(?<animated>a):(?<name>\w{2,32}):(?<id>\d{17,20})>/,
        /**
         * Regular expression for matching strictly a static custom emoji
         *
         * The `name` and `id` group properties are present on the `exec` result of this expression
         */
        StaticEmoji: /<:(?<name>\w{2,32}):(?<id>\d{17,20})>/,
        /**
         * Regular expression for matching a timestamp, either default or custom styled
         *
         * The `timestamp` and `style` group properties are present on the `exec` result of this expression
         */
        // eslint-disable-next-line prefer-named-capture-group
        Timestamp: /<t:(?<timestamp>-?\d{1,13})(:(?<style>[DFRTdft]))?>/,
        /**
         * Regular expression for matching strictly default styled timestamps
         *
         * The `timestamp` group property is present on the `exec` result of this expression
         */
        DefaultStyledTimestamp: /<t:(?<timestamp>-?\d{1,13})>/,
        /**
         * Regular expression for matching strictly custom styled timestamps
         *
         * The `timestamp` and `style` group properties are present on the `exec` result of this expression
         */
        StyledTimestamp: /<t:(?<timestamp>-?\d{1,13}):(?<style>[DFRTdft])>/
      };
      Object.freeze(exports.FormattingPatterns);
    }
  });

  // ../../node_modules/discord-api-types/payloads/common.js
  var require_common2 = __commonJS({
    "../../node_modules/discord-api-types/payloads/common.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PermissionFlagsBits = void 0;
      exports.PermissionFlagsBits = {
        /**
         * Allows creation of instant invites
         *
         * Applies to channel types: Text, Voice, Stage
         */
        CreateInstantInvite: 1n << 0n,
        /**
         * Allows kicking members
         */
        // eslint-disable-next-line sonarjs/no-identical-expressions
        KickMembers: 1n << 1n,
        /**
         * Allows banning members
         */
        BanMembers: 1n << 2n,
        /**
         * Allows all permissions and bypasses channel permission overwrites
         */
        Administrator: 1n << 3n,
        /**
         * Allows management and editing of channels
         *
         * Applies to channel types: Text, Voice, Stage
         */
        ManageChannels: 1n << 4n,
        /**
         * Allows management and editing of the guild
         */
        ManageGuild: 1n << 5n,
        /**
         * Allows for the addition of reactions to messages
         *
         * Applies to channel types: Text, Voice, Stage
         */
        AddReactions: 1n << 6n,
        /**
         * Allows for viewing of audit logs
         */
        ViewAuditLog: 1n << 7n,
        /**
         * Allows for using priority speaker in a voice channel
         *
         * Applies to channel types: Voice
         */
        PrioritySpeaker: 1n << 8n,
        /**
         * Allows the user to go live
         *
         * Applies to channel types: Voice, Stage
         */
        Stream: 1n << 9n,
        /**
         * Allows guild members to view a channel, which includes reading messages in text channels and joining voice channels
         *
         * Applies to channel types: Text, Voice, Stage
         */
        ViewChannel: 1n << 10n,
        /**
         * Allows for sending messages in a channel and creating threads in a forum
         * (does not allow sending messages in threads)
         *
         * Applies to channel types: Text, Voice, Stage
         */
        SendMessages: 1n << 11n,
        /**
         * Allows for sending of `/tts` messages
         *
         * Applies to channel types: Text, Voice, Stage
         */
        SendTTSMessages: 1n << 12n,
        /**
         * Allows for deletion of other users messages
         *
         * Applies to channel types: Text, Voice, Stage
         */
        ManageMessages: 1n << 13n,
        /**
         * Links sent by users with this permission will be auto-embedded
         *
         * Applies to channel types: Text, Voice, Stage
         */
        EmbedLinks: 1n << 14n,
        /**
         * Allows for uploading images and files
         *
         * Applies to channel types: Text, Voice, Stage
         */
        AttachFiles: 1n << 15n,
        /**
         * Allows for reading of message history
         *
         * Applies to channel types: Text, Voice, Stage
         */
        ReadMessageHistory: 1n << 16n,
        /**
         * Allows for using the `@everyone` tag to notify all users in a channel,
         * and the `@here` tag to notify all online users in a channel
         *
         * Applies to channel types: Text, Voice, Stage
         */
        MentionEveryone: 1n << 17n,
        /**
         * Allows the usage of custom emojis from other servers
         *
         * Applies to channel types: Text, Voice, Stage
         */
        UseExternalEmojis: 1n << 18n,
        /**
         * Allows for viewing guild insights
         */
        ViewGuildInsights: 1n << 19n,
        /**
         * Allows for joining of a voice channel
         *
         * Applies to channel types: Voice, Stage
         */
        Connect: 1n << 20n,
        /**
         * Allows for speaking in a voice channel
         *
         * Applies to channel types: Voice
         */
        Speak: 1n << 21n,
        /**
         * Allows for muting members in a voice channel
         *
         * Applies to channel types: Voice, Stage
         */
        MuteMembers: 1n << 22n,
        /**
         * Allows for deafening of members in a voice channel
         *
         * Applies to channel types: Voice
         */
        DeafenMembers: 1n << 23n,
        /**
         * Allows for moving of members between voice channels
         *
         * Applies to channel types: Voice, Stage
         */
        MoveMembers: 1n << 24n,
        /**
         * Allows for using voice-activity-detection in a voice channel
         *
         * Applies to channel types: Voice
         */
        UseVAD: 1n << 25n,
        /**
         * Allows for modification of own nickname
         */
        ChangeNickname: 1n << 26n,
        /**
         * Allows for modification of other users nicknames
         */
        ManageNicknames: 1n << 27n,
        /**
         * Allows management and editing of roles
         *
         * Applies to channel types: Text, Voice, Stage
         */
        ManageRoles: 1n << 28n,
        /**
         * Allows management and editing of webhooks
         *
         * Applies to channel types: Text, Voice, Stage
         */
        ManageWebhooks: 1n << 29n,
        /**
         * Allows management and editing of emojis, stickers, and soundboard sounds
         *
         * @deprecated This is the old name for {@apilink PermissionFlagsBits#ManageGuildExpressions}
         */
        ManageEmojisAndStickers: 1n << 30n,
        /**
         * Allows for editing and deleting emojis, stickers, and soundboard sounds created by all users
         */
        ManageGuildExpressions: 1n << 30n,
        /**
         * Allows members to use application commands, including slash commands and context menu commands
         *
         * Applies to channel types: Text, Voice, Stage
         */
        UseApplicationCommands: 1n << 31n,
        /**
         * Allows for requesting to speak in stage channels
         *
         * Applies to channel types: Stage
         */
        RequestToSpeak: 1n << 32n,
        /**
         * Allows for editing and deleting scheduled events created by all users
         *
         * Applies to channel types: Voice, Stage
         */
        ManageEvents: 1n << 33n,
        /**
         * Allows for deleting and archiving threads, and viewing all private threads
         *
         * Applies to channel types: Text
         */
        ManageThreads: 1n << 34n,
        /**
         * Allows for creating public and announcement threads
         *
         * Applies to channel types: Text
         */
        CreatePublicThreads: 1n << 35n,
        /**
         * Allows for creating private threads
         *
         * Applies to channel types: Text
         */
        CreatePrivateThreads: 1n << 36n,
        /**
         * Allows the usage of custom stickers from other servers
         *
         * Applies to channel types: Text, Voice, Stage
         */
        UseExternalStickers: 1n << 37n,
        /**
         * Allows for sending messages in threads
         *
         * Applies to channel types: Text
         */
        SendMessagesInThreads: 1n << 38n,
        /**
         * Allows for using Activities (applications with the {@apilink ApplicationFlags.Embedded} flag) in a voice channel
         *
         * Applies to channel types: Voice
         */
        UseEmbeddedActivities: 1n << 39n,
        /**
         * Allows for timing out users to prevent them from sending or reacting to messages in chat and threads,
         * and from speaking in voice and stage channels
         */
        ModerateMembers: 1n << 40n,
        /**
         * Allows for viewing role subscription insights
         */
        ViewCreatorMonetizationAnalytics: 1n << 41n,
        /**
         * Allows for using soundboard in a voice channel
         *
         * Applies to channel types: Voice
         */
        UseSoundboard: 1n << 42n,
        /**
         * Allows for creating emojis, stickers, and soundboard sounds, and editing and deleting those created by the current user
         */
        CreateGuildExpressions: 1n << 43n,
        /**
         * Allows for creating scheduled events, and editing and deleting those created by the current user
         *
         * Applies to channel types: Voice, Stage
         */
        CreateEvents: 1n << 44n,
        /**
         * Allows the usage of custom soundboard sounds from other servers
         *
         * Applies to channel types: Voice
         */
        UseExternalSounds: 1n << 45n,
        /**
         * Allows sending voice messages
         *
         * Applies to channel types: Text, Voice, Stage
         */
        SendVoiceMessages: 1n << 46n
      };
      Object.freeze(exports.PermissionFlagsBits);
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/application.js
  var require_application = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/application.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ApplicationRoleConnectionMetadataType = exports.ApplicationFlags = void 0;
      (function(ApplicationFlags3) {
        ApplicationFlags3[ApplicationFlags3["EmbeddedReleased"] = 2] = "EmbeddedReleased";
        ApplicationFlags3[ApplicationFlags3["ManagedEmoji"] = 4] = "ManagedEmoji";
        ApplicationFlags3[ApplicationFlags3["EmbeddedIAP"] = 8] = "EmbeddedIAP";
        ApplicationFlags3[ApplicationFlags3["GroupDMCreate"] = 16] = "GroupDMCreate";
        ApplicationFlags3[ApplicationFlags3["ApplicationAutoModerationRuleCreateBadge"] = 64] = "ApplicationAutoModerationRuleCreateBadge";
        ApplicationFlags3[ApplicationFlags3["RPCHasConnected"] = 2048] = "RPCHasConnected";
        ApplicationFlags3[ApplicationFlags3["GatewayPresence"] = 4096] = "GatewayPresence";
        ApplicationFlags3[ApplicationFlags3["GatewayPresenceLimited"] = 8192] = "GatewayPresenceLimited";
        ApplicationFlags3[ApplicationFlags3["GatewayGuildMembers"] = 16384] = "GatewayGuildMembers";
        ApplicationFlags3[ApplicationFlags3["GatewayGuildMembersLimited"] = 32768] = "GatewayGuildMembersLimited";
        ApplicationFlags3[ApplicationFlags3["VerificationPendingGuildLimit"] = 65536] = "VerificationPendingGuildLimit";
        ApplicationFlags3[ApplicationFlags3["Embedded"] = 131072] = "Embedded";
        ApplicationFlags3[ApplicationFlags3["GatewayMessageContent"] = 262144] = "GatewayMessageContent";
        ApplicationFlags3[ApplicationFlags3["GatewayMessageContentLimited"] = 524288] = "GatewayMessageContentLimited";
        ApplicationFlags3[ApplicationFlags3["EmbeddedFirstParty"] = 1048576] = "EmbeddedFirstParty";
        ApplicationFlags3[ApplicationFlags3["ApplicationCommandBadge"] = 8388608] = "ApplicationCommandBadge";
      })(exports.ApplicationFlags || (exports.ApplicationFlags = {}));
      (function(ApplicationRoleConnectionMetadataType3) {
        ApplicationRoleConnectionMetadataType3[ApplicationRoleConnectionMetadataType3["IntegerLessThanOrEqual"] = 1] = "IntegerLessThanOrEqual";
        ApplicationRoleConnectionMetadataType3[ApplicationRoleConnectionMetadataType3["IntegerGreaterThanOrEqual"] = 2] = "IntegerGreaterThanOrEqual";
        ApplicationRoleConnectionMetadataType3[ApplicationRoleConnectionMetadataType3["IntegerEqual"] = 3] = "IntegerEqual";
        ApplicationRoleConnectionMetadataType3[ApplicationRoleConnectionMetadataType3["IntegerNotEqual"] = 4] = "IntegerNotEqual";
        ApplicationRoleConnectionMetadataType3[ApplicationRoleConnectionMetadataType3["DatetimeLessThanOrEqual"] = 5] = "DatetimeLessThanOrEqual";
        ApplicationRoleConnectionMetadataType3[ApplicationRoleConnectionMetadataType3["DatetimeGreaterThanOrEqual"] = 6] = "DatetimeGreaterThanOrEqual";
        ApplicationRoleConnectionMetadataType3[ApplicationRoleConnectionMetadataType3["BooleanEqual"] = 7] = "BooleanEqual";
        ApplicationRoleConnectionMetadataType3[ApplicationRoleConnectionMetadataType3["BooleanNotEqual"] = 8] = "BooleanNotEqual";
      })(exports.ApplicationRoleConnectionMetadataType || (exports.ApplicationRoleConnectionMetadataType = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/auditLog.js
  var require_auditLog = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/auditLog.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AuditLogOptionsType = exports.AuditLogEvent = void 0;
      (function(AuditLogEvent3) {
        AuditLogEvent3[AuditLogEvent3["GuildUpdate"] = 1] = "GuildUpdate";
        AuditLogEvent3[AuditLogEvent3["ChannelCreate"] = 10] = "ChannelCreate";
        AuditLogEvent3[AuditLogEvent3["ChannelUpdate"] = 11] = "ChannelUpdate";
        AuditLogEvent3[AuditLogEvent3["ChannelDelete"] = 12] = "ChannelDelete";
        AuditLogEvent3[AuditLogEvent3["ChannelOverwriteCreate"] = 13] = "ChannelOverwriteCreate";
        AuditLogEvent3[AuditLogEvent3["ChannelOverwriteUpdate"] = 14] = "ChannelOverwriteUpdate";
        AuditLogEvent3[AuditLogEvent3["ChannelOverwriteDelete"] = 15] = "ChannelOverwriteDelete";
        AuditLogEvent3[AuditLogEvent3["MemberKick"] = 20] = "MemberKick";
        AuditLogEvent3[AuditLogEvent3["MemberPrune"] = 21] = "MemberPrune";
        AuditLogEvent3[AuditLogEvent3["MemberBanAdd"] = 22] = "MemberBanAdd";
        AuditLogEvent3[AuditLogEvent3["MemberBanRemove"] = 23] = "MemberBanRemove";
        AuditLogEvent3[AuditLogEvent3["MemberUpdate"] = 24] = "MemberUpdate";
        AuditLogEvent3[AuditLogEvent3["MemberRoleUpdate"] = 25] = "MemberRoleUpdate";
        AuditLogEvent3[AuditLogEvent3["MemberMove"] = 26] = "MemberMove";
        AuditLogEvent3[AuditLogEvent3["MemberDisconnect"] = 27] = "MemberDisconnect";
        AuditLogEvent3[AuditLogEvent3["BotAdd"] = 28] = "BotAdd";
        AuditLogEvent3[AuditLogEvent3["RoleCreate"] = 30] = "RoleCreate";
        AuditLogEvent3[AuditLogEvent3["RoleUpdate"] = 31] = "RoleUpdate";
        AuditLogEvent3[AuditLogEvent3["RoleDelete"] = 32] = "RoleDelete";
        AuditLogEvent3[AuditLogEvent3["InviteCreate"] = 40] = "InviteCreate";
        AuditLogEvent3[AuditLogEvent3["InviteUpdate"] = 41] = "InviteUpdate";
        AuditLogEvent3[AuditLogEvent3["InviteDelete"] = 42] = "InviteDelete";
        AuditLogEvent3[AuditLogEvent3["WebhookCreate"] = 50] = "WebhookCreate";
        AuditLogEvent3[AuditLogEvent3["WebhookUpdate"] = 51] = "WebhookUpdate";
        AuditLogEvent3[AuditLogEvent3["WebhookDelete"] = 52] = "WebhookDelete";
        AuditLogEvent3[AuditLogEvent3["EmojiCreate"] = 60] = "EmojiCreate";
        AuditLogEvent3[AuditLogEvent3["EmojiUpdate"] = 61] = "EmojiUpdate";
        AuditLogEvent3[AuditLogEvent3["EmojiDelete"] = 62] = "EmojiDelete";
        AuditLogEvent3[AuditLogEvent3["MessageDelete"] = 72] = "MessageDelete";
        AuditLogEvent3[AuditLogEvent3["MessageBulkDelete"] = 73] = "MessageBulkDelete";
        AuditLogEvent3[AuditLogEvent3["MessagePin"] = 74] = "MessagePin";
        AuditLogEvent3[AuditLogEvent3["MessageUnpin"] = 75] = "MessageUnpin";
        AuditLogEvent3[AuditLogEvent3["IntegrationCreate"] = 80] = "IntegrationCreate";
        AuditLogEvent3[AuditLogEvent3["IntegrationUpdate"] = 81] = "IntegrationUpdate";
        AuditLogEvent3[AuditLogEvent3["IntegrationDelete"] = 82] = "IntegrationDelete";
        AuditLogEvent3[AuditLogEvent3["StageInstanceCreate"] = 83] = "StageInstanceCreate";
        AuditLogEvent3[AuditLogEvent3["StageInstanceUpdate"] = 84] = "StageInstanceUpdate";
        AuditLogEvent3[AuditLogEvent3["StageInstanceDelete"] = 85] = "StageInstanceDelete";
        AuditLogEvent3[AuditLogEvent3["StickerCreate"] = 90] = "StickerCreate";
        AuditLogEvent3[AuditLogEvent3["StickerUpdate"] = 91] = "StickerUpdate";
        AuditLogEvent3[AuditLogEvent3["StickerDelete"] = 92] = "StickerDelete";
        AuditLogEvent3[AuditLogEvent3["GuildScheduledEventCreate"] = 100] = "GuildScheduledEventCreate";
        AuditLogEvent3[AuditLogEvent3["GuildScheduledEventUpdate"] = 101] = "GuildScheduledEventUpdate";
        AuditLogEvent3[AuditLogEvent3["GuildScheduledEventDelete"] = 102] = "GuildScheduledEventDelete";
        AuditLogEvent3[AuditLogEvent3["ThreadCreate"] = 110] = "ThreadCreate";
        AuditLogEvent3[AuditLogEvent3["ThreadUpdate"] = 111] = "ThreadUpdate";
        AuditLogEvent3[AuditLogEvent3["ThreadDelete"] = 112] = "ThreadDelete";
        AuditLogEvent3[AuditLogEvent3["ApplicationCommandPermissionUpdate"] = 121] = "ApplicationCommandPermissionUpdate";
        AuditLogEvent3[AuditLogEvent3["AutoModerationRuleCreate"] = 140] = "AutoModerationRuleCreate";
        AuditLogEvent3[AuditLogEvent3["AutoModerationRuleUpdate"] = 141] = "AutoModerationRuleUpdate";
        AuditLogEvent3[AuditLogEvent3["AutoModerationRuleDelete"] = 142] = "AutoModerationRuleDelete";
        AuditLogEvent3[AuditLogEvent3["AutoModerationBlockMessage"] = 143] = "AutoModerationBlockMessage";
        AuditLogEvent3[AuditLogEvent3["AutoModerationFlagToChannel"] = 144] = "AutoModerationFlagToChannel";
        AuditLogEvent3[AuditLogEvent3["AutoModerationUserCommunicationDisabled"] = 145] = "AutoModerationUserCommunicationDisabled";
        AuditLogEvent3[AuditLogEvent3["CreatorMonetizationRequestCreated"] = 150] = "CreatorMonetizationRequestCreated";
        AuditLogEvent3[AuditLogEvent3["CreatorMonetizationTermsAccepted"] = 151] = "CreatorMonetizationTermsAccepted";
      })(exports.AuditLogEvent || (exports.AuditLogEvent = {}));
      (function(AuditLogOptionsType3) {
        AuditLogOptionsType3["Role"] = "0";
        AuditLogOptionsType3["Member"] = "1";
      })(exports.AuditLogOptionsType || (exports.AuditLogOptionsType = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/autoModeration.js
  var require_autoModeration = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/autoModeration.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AutoModerationActionType = exports.AutoModerationRuleEventType = exports.AutoModerationRuleKeywordPresetType = exports.AutoModerationRuleTriggerType = void 0;
      (function(AutoModerationRuleTriggerType3) {
        AutoModerationRuleTriggerType3[AutoModerationRuleTriggerType3["Keyword"] = 1] = "Keyword";
        AutoModerationRuleTriggerType3[AutoModerationRuleTriggerType3["Spam"] = 3] = "Spam";
        AutoModerationRuleTriggerType3[AutoModerationRuleTriggerType3["KeywordPreset"] = 4] = "KeywordPreset";
        AutoModerationRuleTriggerType3[AutoModerationRuleTriggerType3["MentionSpam"] = 5] = "MentionSpam";
      })(exports.AutoModerationRuleTriggerType || (exports.AutoModerationRuleTriggerType = {}));
      (function(AutoModerationRuleKeywordPresetType3) {
        AutoModerationRuleKeywordPresetType3[AutoModerationRuleKeywordPresetType3["Profanity"] = 1] = "Profanity";
        AutoModerationRuleKeywordPresetType3[AutoModerationRuleKeywordPresetType3["SexualContent"] = 2] = "SexualContent";
        AutoModerationRuleKeywordPresetType3[AutoModerationRuleKeywordPresetType3["Slurs"] = 3] = "Slurs";
      })(exports.AutoModerationRuleKeywordPresetType || (exports.AutoModerationRuleKeywordPresetType = {}));
      (function(AutoModerationRuleEventType3) {
        AutoModerationRuleEventType3[AutoModerationRuleEventType3["MessageSend"] = 1] = "MessageSend";
      })(exports.AutoModerationRuleEventType || (exports.AutoModerationRuleEventType = {}));
      (function(AutoModerationActionType3) {
        AutoModerationActionType3[AutoModerationActionType3["BlockMessage"] = 1] = "BlockMessage";
        AutoModerationActionType3[AutoModerationActionType3["SendAlertMessage"] = 2] = "SendAlertMessage";
        AutoModerationActionType3[AutoModerationActionType3["Timeout"] = 3] = "Timeout";
      })(exports.AutoModerationActionType || (exports.AutoModerationActionType = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/channel.js
  var require_channel = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/channel.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ChannelFlags = exports.SelectMenuDefaultValueType = exports.TextInputStyle = exports.ButtonStyle = exports.ComponentType = exports.AllowedMentionsTypes = exports.AttachmentFlags = exports.EmbedType = exports.ThreadMemberFlags = exports.ThreadAutoArchiveDuration = exports.OverwriteType = exports.MessageFlags = exports.MessageActivityType = exports.MessageType = exports.VideoQualityMode = exports.ChannelType = exports.ForumLayoutType = exports.SortOrderType = void 0;
      (function(SortOrderType3) {
        SortOrderType3[SortOrderType3["LatestActivity"] = 0] = "LatestActivity";
        SortOrderType3[SortOrderType3["CreationDate"] = 1] = "CreationDate";
      })(exports.SortOrderType || (exports.SortOrderType = {}));
      (function(ForumLayoutType3) {
        ForumLayoutType3[ForumLayoutType3["NotSet"] = 0] = "NotSet";
        ForumLayoutType3[ForumLayoutType3["ListView"] = 1] = "ListView";
        ForumLayoutType3[ForumLayoutType3["GalleryView"] = 2] = "GalleryView";
      })(exports.ForumLayoutType || (exports.ForumLayoutType = {}));
      (function(ChannelType3) {
        ChannelType3[ChannelType3["GuildText"] = 0] = "GuildText";
        ChannelType3[ChannelType3["DM"] = 1] = "DM";
        ChannelType3[ChannelType3["GuildVoice"] = 2] = "GuildVoice";
        ChannelType3[ChannelType3["GroupDM"] = 3] = "GroupDM";
        ChannelType3[ChannelType3["GuildCategory"] = 4] = "GuildCategory";
        ChannelType3[ChannelType3["GuildAnnouncement"] = 5] = "GuildAnnouncement";
        ChannelType3[ChannelType3["AnnouncementThread"] = 10] = "AnnouncementThread";
        ChannelType3[ChannelType3["PublicThread"] = 11] = "PublicThread";
        ChannelType3[ChannelType3["PrivateThread"] = 12] = "PrivateThread";
        ChannelType3[ChannelType3["GuildStageVoice"] = 13] = "GuildStageVoice";
        ChannelType3[ChannelType3["GuildDirectory"] = 14] = "GuildDirectory";
        ChannelType3[ChannelType3["GuildForum"] = 15] = "GuildForum";
        ChannelType3[ChannelType3["GuildMedia"] = 16] = "GuildMedia";
        ChannelType3[ChannelType3["GuildNews"] = 5] = "GuildNews";
        ChannelType3[ChannelType3["GuildNewsThread"] = 10] = "GuildNewsThread";
        ChannelType3[ChannelType3["GuildPublicThread"] = 11] = "GuildPublicThread";
        ChannelType3[ChannelType3["GuildPrivateThread"] = 12] = "GuildPrivateThread";
      })(exports.ChannelType || (exports.ChannelType = {}));
      (function(VideoQualityMode3) {
        VideoQualityMode3[VideoQualityMode3["Auto"] = 1] = "Auto";
        VideoQualityMode3[VideoQualityMode3["Full"] = 2] = "Full";
      })(exports.VideoQualityMode || (exports.VideoQualityMode = {}));
      (function(MessageType3) {
        MessageType3[MessageType3["Default"] = 0] = "Default";
        MessageType3[MessageType3["RecipientAdd"] = 1] = "RecipientAdd";
        MessageType3[MessageType3["RecipientRemove"] = 2] = "RecipientRemove";
        MessageType3[MessageType3["Call"] = 3] = "Call";
        MessageType3[MessageType3["ChannelNameChange"] = 4] = "ChannelNameChange";
        MessageType3[MessageType3["ChannelIconChange"] = 5] = "ChannelIconChange";
        MessageType3[MessageType3["ChannelPinnedMessage"] = 6] = "ChannelPinnedMessage";
        MessageType3[MessageType3["UserJoin"] = 7] = "UserJoin";
        MessageType3[MessageType3["GuildBoost"] = 8] = "GuildBoost";
        MessageType3[MessageType3["GuildBoostTier1"] = 9] = "GuildBoostTier1";
        MessageType3[MessageType3["GuildBoostTier2"] = 10] = "GuildBoostTier2";
        MessageType3[MessageType3["GuildBoostTier3"] = 11] = "GuildBoostTier3";
        MessageType3[MessageType3["ChannelFollowAdd"] = 12] = "ChannelFollowAdd";
        MessageType3[MessageType3["GuildDiscoveryDisqualified"] = 14] = "GuildDiscoveryDisqualified";
        MessageType3[MessageType3["GuildDiscoveryRequalified"] = 15] = "GuildDiscoveryRequalified";
        MessageType3[MessageType3["GuildDiscoveryGracePeriodInitialWarning"] = 16] = "GuildDiscoveryGracePeriodInitialWarning";
        MessageType3[MessageType3["GuildDiscoveryGracePeriodFinalWarning"] = 17] = "GuildDiscoveryGracePeriodFinalWarning";
        MessageType3[MessageType3["ThreadCreated"] = 18] = "ThreadCreated";
        MessageType3[MessageType3["Reply"] = 19] = "Reply";
        MessageType3[MessageType3["ChatInputCommand"] = 20] = "ChatInputCommand";
        MessageType3[MessageType3["ThreadStarterMessage"] = 21] = "ThreadStarterMessage";
        MessageType3[MessageType3["GuildInviteReminder"] = 22] = "GuildInviteReminder";
        MessageType3[MessageType3["ContextMenuCommand"] = 23] = "ContextMenuCommand";
        MessageType3[MessageType3["AutoModerationAction"] = 24] = "AutoModerationAction";
        MessageType3[MessageType3["RoleSubscriptionPurchase"] = 25] = "RoleSubscriptionPurchase";
        MessageType3[MessageType3["InteractionPremiumUpsell"] = 26] = "InteractionPremiumUpsell";
        MessageType3[MessageType3["StageStart"] = 27] = "StageStart";
        MessageType3[MessageType3["StageEnd"] = 28] = "StageEnd";
        MessageType3[MessageType3["StageSpeaker"] = 29] = "StageSpeaker";
        MessageType3[MessageType3["StageRaiseHand"] = 30] = "StageRaiseHand";
        MessageType3[MessageType3["StageTopic"] = 31] = "StageTopic";
        MessageType3[MessageType3["GuildApplicationPremiumSubscription"] = 32] = "GuildApplicationPremiumSubscription";
      })(exports.MessageType || (exports.MessageType = {}));
      (function(MessageActivityType3) {
        MessageActivityType3[MessageActivityType3["Join"] = 1] = "Join";
        MessageActivityType3[MessageActivityType3["Spectate"] = 2] = "Spectate";
        MessageActivityType3[MessageActivityType3["Listen"] = 3] = "Listen";
        MessageActivityType3[MessageActivityType3["JoinRequest"] = 5] = "JoinRequest";
      })(exports.MessageActivityType || (exports.MessageActivityType = {}));
      (function(MessageFlags3) {
        MessageFlags3[MessageFlags3["Crossposted"] = 1] = "Crossposted";
        MessageFlags3[MessageFlags3["IsCrosspost"] = 2] = "IsCrosspost";
        MessageFlags3[MessageFlags3["SuppressEmbeds"] = 4] = "SuppressEmbeds";
        MessageFlags3[MessageFlags3["SourceMessageDeleted"] = 8] = "SourceMessageDeleted";
        MessageFlags3[MessageFlags3["Urgent"] = 16] = "Urgent";
        MessageFlags3[MessageFlags3["HasThread"] = 32] = "HasThread";
        MessageFlags3[MessageFlags3["Ephemeral"] = 64] = "Ephemeral";
        MessageFlags3[MessageFlags3["Loading"] = 128] = "Loading";
        MessageFlags3[MessageFlags3["FailedToMentionSomeRolesInThread"] = 256] = "FailedToMentionSomeRolesInThread";
        MessageFlags3[MessageFlags3["ShouldShowLinkNotDiscordWarning"] = 1024] = "ShouldShowLinkNotDiscordWarning";
        MessageFlags3[MessageFlags3["SuppressNotifications"] = 4096] = "SuppressNotifications";
        MessageFlags3[MessageFlags3["IsVoiceMessage"] = 8192] = "IsVoiceMessage";
      })(exports.MessageFlags || (exports.MessageFlags = {}));
      (function(OverwriteType3) {
        OverwriteType3[OverwriteType3["Role"] = 0] = "Role";
        OverwriteType3[OverwriteType3["Member"] = 1] = "Member";
      })(exports.OverwriteType || (exports.OverwriteType = {}));
      (function(ThreadAutoArchiveDuration3) {
        ThreadAutoArchiveDuration3[ThreadAutoArchiveDuration3["OneHour"] = 60] = "OneHour";
        ThreadAutoArchiveDuration3[ThreadAutoArchiveDuration3["OneDay"] = 1440] = "OneDay";
        ThreadAutoArchiveDuration3[ThreadAutoArchiveDuration3["ThreeDays"] = 4320] = "ThreeDays";
        ThreadAutoArchiveDuration3[ThreadAutoArchiveDuration3["OneWeek"] = 10080] = "OneWeek";
      })(exports.ThreadAutoArchiveDuration || (exports.ThreadAutoArchiveDuration = {}));
      (function(ThreadMemberFlags3) {
        ThreadMemberFlags3[ThreadMemberFlags3["HasInteracted"] = 1] = "HasInteracted";
        ThreadMemberFlags3[ThreadMemberFlags3["AllMessages"] = 2] = "AllMessages";
        ThreadMemberFlags3[ThreadMemberFlags3["OnlyMentions"] = 4] = "OnlyMentions";
        ThreadMemberFlags3[ThreadMemberFlags3["NoMessages"] = 8] = "NoMessages";
      })(exports.ThreadMemberFlags || (exports.ThreadMemberFlags = {}));
      (function(EmbedType3) {
        EmbedType3["Rich"] = "rich";
        EmbedType3["Image"] = "image";
        EmbedType3["Video"] = "video";
        EmbedType3["GIFV"] = "gifv";
        EmbedType3["Article"] = "article";
        EmbedType3["Link"] = "link";
        EmbedType3["AutoModerationMessage"] = "auto_moderation_message";
      })(exports.EmbedType || (exports.EmbedType = {}));
      (function(AttachmentFlags3) {
        AttachmentFlags3[AttachmentFlags3["IsRemix"] = 4] = "IsRemix";
      })(exports.AttachmentFlags || (exports.AttachmentFlags = {}));
      (function(AllowedMentionsTypes3) {
        AllowedMentionsTypes3["Everyone"] = "everyone";
        AllowedMentionsTypes3["Role"] = "roles";
        AllowedMentionsTypes3["User"] = "users";
      })(exports.AllowedMentionsTypes || (exports.AllowedMentionsTypes = {}));
      (function(ComponentType3) {
        ComponentType3[ComponentType3["ActionRow"] = 1] = "ActionRow";
        ComponentType3[ComponentType3["Button"] = 2] = "Button";
        ComponentType3[ComponentType3["StringSelect"] = 3] = "StringSelect";
        ComponentType3[ComponentType3["TextInput"] = 4] = "TextInput";
        ComponentType3[ComponentType3["UserSelect"] = 5] = "UserSelect";
        ComponentType3[ComponentType3["RoleSelect"] = 6] = "RoleSelect";
        ComponentType3[ComponentType3["MentionableSelect"] = 7] = "MentionableSelect";
        ComponentType3[ComponentType3["ChannelSelect"] = 8] = "ChannelSelect";
        ComponentType3[ComponentType3["SelectMenu"] = 3] = "SelectMenu";
      })(exports.ComponentType || (exports.ComponentType = {}));
      (function(ButtonStyle3) {
        ButtonStyle3[ButtonStyle3["Primary"] = 1] = "Primary";
        ButtonStyle3[ButtonStyle3["Secondary"] = 2] = "Secondary";
        ButtonStyle3[ButtonStyle3["Success"] = 3] = "Success";
        ButtonStyle3[ButtonStyle3["Danger"] = 4] = "Danger";
        ButtonStyle3[ButtonStyle3["Link"] = 5] = "Link";
      })(exports.ButtonStyle || (exports.ButtonStyle = {}));
      (function(TextInputStyle3) {
        TextInputStyle3[TextInputStyle3["Short"] = 1] = "Short";
        TextInputStyle3[TextInputStyle3["Paragraph"] = 2] = "Paragraph";
      })(exports.TextInputStyle || (exports.TextInputStyle = {}));
      (function(SelectMenuDefaultValueType3) {
        SelectMenuDefaultValueType3["Channel"] = "channel";
        SelectMenuDefaultValueType3["Role"] = "role";
        SelectMenuDefaultValueType3["User"] = "user";
      })(exports.SelectMenuDefaultValueType || (exports.SelectMenuDefaultValueType = {}));
      (function(ChannelFlags3) {
        ChannelFlags3[ChannelFlags3["GuildFeedRemoved"] = 1] = "GuildFeedRemoved";
        ChannelFlags3[ChannelFlags3["Pinned"] = 2] = "Pinned";
        ChannelFlags3[ChannelFlags3["ActiveChannelsRemoved"] = 4] = "ActiveChannelsRemoved";
        ChannelFlags3[ChannelFlags3["RequireTag"] = 16] = "RequireTag";
        ChannelFlags3[ChannelFlags3["IsSpam"] = 32] = "IsSpam";
        ChannelFlags3[ChannelFlags3["IsGuildResourceChannel"] = 128] = "IsGuildResourceChannel";
        ChannelFlags3[ChannelFlags3["ClydeAI"] = 256] = "ClydeAI";
        ChannelFlags3[ChannelFlags3["IsScheduledForDeletion"] = 512] = "IsScheduledForDeletion";
        ChannelFlags3[ChannelFlags3["HideMediaDownloadOptions"] = 32768] = "HideMediaDownloadOptions";
      })(exports.ChannelFlags || (exports.ChannelFlags = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/emoji.js
  var require_emoji = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/emoji.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/gateway.js
  var require_gateway = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/gateway.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ActivityFlags = exports.ActivityType = exports.ActivityPlatform = exports.PresenceUpdateStatus = void 0;
      (function(PresenceUpdateStatus3) {
        PresenceUpdateStatus3["Online"] = "online";
        PresenceUpdateStatus3["DoNotDisturb"] = "dnd";
        PresenceUpdateStatus3["Idle"] = "idle";
        PresenceUpdateStatus3["Invisible"] = "invisible";
        PresenceUpdateStatus3["Offline"] = "offline";
      })(exports.PresenceUpdateStatus || (exports.PresenceUpdateStatus = {}));
      (function(ActivityPlatform3) {
        ActivityPlatform3["Desktop"] = "desktop";
        ActivityPlatform3["Xbox"] = "xbox";
        ActivityPlatform3["Samsung"] = "samsung";
        ActivityPlatform3["IOS"] = "ios";
        ActivityPlatform3["Android"] = "android";
        ActivityPlatform3["Embedded"] = "embedded";
        ActivityPlatform3["PS4"] = "ps4";
        ActivityPlatform3["PS5"] = "ps5";
      })(exports.ActivityPlatform || (exports.ActivityPlatform = {}));
      (function(ActivityType3) {
        ActivityType3[ActivityType3["Playing"] = 0] = "Playing";
        ActivityType3[ActivityType3["Streaming"] = 1] = "Streaming";
        ActivityType3[ActivityType3["Listening"] = 2] = "Listening";
        ActivityType3[ActivityType3["Watching"] = 3] = "Watching";
        ActivityType3[ActivityType3["Custom"] = 4] = "Custom";
        ActivityType3[ActivityType3["Competing"] = 5] = "Competing";
      })(exports.ActivityType || (exports.ActivityType = {}));
      (function(ActivityFlags3) {
        ActivityFlags3[ActivityFlags3["Instance"] = 1] = "Instance";
        ActivityFlags3[ActivityFlags3["Join"] = 2] = "Join";
        ActivityFlags3[ActivityFlags3["Spectate"] = 4] = "Spectate";
        ActivityFlags3[ActivityFlags3["JoinRequest"] = 8] = "JoinRequest";
        ActivityFlags3[ActivityFlags3["Sync"] = 16] = "Sync";
        ActivityFlags3[ActivityFlags3["Play"] = 32] = "Play";
        ActivityFlags3[ActivityFlags3["PartyPrivacyFriends"] = 64] = "PartyPrivacyFriends";
        ActivityFlags3[ActivityFlags3["PartyPrivacyVoiceChannel"] = 128] = "PartyPrivacyVoiceChannel";
        ActivityFlags3[ActivityFlags3["Embedded"] = 256] = "Embedded";
      })(exports.ActivityFlags || (exports.ActivityFlags = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/guild.js
  var require_guild = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/guild.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GuildOnboardingPromptType = exports.GuildOnboardingMode = exports.MembershipScreeningFieldType = exports.GuildWidgetStyle = exports.IntegrationExpireBehavior = exports.GuildMemberFlags = exports.GuildFeature = exports.GuildSystemChannelFlags = exports.GuildHubType = exports.GuildPremiumTier = exports.GuildVerificationLevel = exports.GuildNSFWLevel = exports.GuildMFALevel = exports.GuildExplicitContentFilter = exports.GuildDefaultMessageNotifications = void 0;
      (function(GuildDefaultMessageNotifications3) {
        GuildDefaultMessageNotifications3[GuildDefaultMessageNotifications3["AllMessages"] = 0] = "AllMessages";
        GuildDefaultMessageNotifications3[GuildDefaultMessageNotifications3["OnlyMentions"] = 1] = "OnlyMentions";
      })(exports.GuildDefaultMessageNotifications || (exports.GuildDefaultMessageNotifications = {}));
      (function(GuildExplicitContentFilter3) {
        GuildExplicitContentFilter3[GuildExplicitContentFilter3["Disabled"] = 0] = "Disabled";
        GuildExplicitContentFilter3[GuildExplicitContentFilter3["MembersWithoutRoles"] = 1] = "MembersWithoutRoles";
        GuildExplicitContentFilter3[GuildExplicitContentFilter3["AllMembers"] = 2] = "AllMembers";
      })(exports.GuildExplicitContentFilter || (exports.GuildExplicitContentFilter = {}));
      (function(GuildMFALevel3) {
        GuildMFALevel3[GuildMFALevel3["None"] = 0] = "None";
        GuildMFALevel3[GuildMFALevel3["Elevated"] = 1] = "Elevated";
      })(exports.GuildMFALevel || (exports.GuildMFALevel = {}));
      (function(GuildNSFWLevel3) {
        GuildNSFWLevel3[GuildNSFWLevel3["Default"] = 0] = "Default";
        GuildNSFWLevel3[GuildNSFWLevel3["Explicit"] = 1] = "Explicit";
        GuildNSFWLevel3[GuildNSFWLevel3["Safe"] = 2] = "Safe";
        GuildNSFWLevel3[GuildNSFWLevel3["AgeRestricted"] = 3] = "AgeRestricted";
      })(exports.GuildNSFWLevel || (exports.GuildNSFWLevel = {}));
      (function(GuildVerificationLevel3) {
        GuildVerificationLevel3[GuildVerificationLevel3["None"] = 0] = "None";
        GuildVerificationLevel3[GuildVerificationLevel3["Low"] = 1] = "Low";
        GuildVerificationLevel3[GuildVerificationLevel3["Medium"] = 2] = "Medium";
        GuildVerificationLevel3[GuildVerificationLevel3["High"] = 3] = "High";
        GuildVerificationLevel3[GuildVerificationLevel3["VeryHigh"] = 4] = "VeryHigh";
      })(exports.GuildVerificationLevel || (exports.GuildVerificationLevel = {}));
      (function(GuildPremiumTier3) {
        GuildPremiumTier3[GuildPremiumTier3["None"] = 0] = "None";
        GuildPremiumTier3[GuildPremiumTier3["Tier1"] = 1] = "Tier1";
        GuildPremiumTier3[GuildPremiumTier3["Tier2"] = 2] = "Tier2";
        GuildPremiumTier3[GuildPremiumTier3["Tier3"] = 3] = "Tier3";
      })(exports.GuildPremiumTier || (exports.GuildPremiumTier = {}));
      (function(GuildHubType3) {
        GuildHubType3[GuildHubType3["Default"] = 0] = "Default";
        GuildHubType3[GuildHubType3["HighSchool"] = 1] = "HighSchool";
        GuildHubType3[GuildHubType3["College"] = 2] = "College";
      })(exports.GuildHubType || (exports.GuildHubType = {}));
      (function(GuildSystemChannelFlags3) {
        GuildSystemChannelFlags3[GuildSystemChannelFlags3["SuppressJoinNotifications"] = 1] = "SuppressJoinNotifications";
        GuildSystemChannelFlags3[GuildSystemChannelFlags3["SuppressPremiumSubscriptions"] = 2] = "SuppressPremiumSubscriptions";
        GuildSystemChannelFlags3[GuildSystemChannelFlags3["SuppressGuildReminderNotifications"] = 4] = "SuppressGuildReminderNotifications";
        GuildSystemChannelFlags3[GuildSystemChannelFlags3["SuppressJoinNotificationReplies"] = 8] = "SuppressJoinNotificationReplies";
        GuildSystemChannelFlags3[GuildSystemChannelFlags3["SuppressRoleSubscriptionPurchaseNotifications"] = 16] = "SuppressRoleSubscriptionPurchaseNotifications";
        GuildSystemChannelFlags3[GuildSystemChannelFlags3["SuppressRoleSubscriptionPurchaseNotificationReplies"] = 32] = "SuppressRoleSubscriptionPurchaseNotificationReplies";
      })(exports.GuildSystemChannelFlags || (exports.GuildSystemChannelFlags = {}));
      (function(GuildFeature3) {
        GuildFeature3["AnimatedBanner"] = "ANIMATED_BANNER";
        GuildFeature3["AnimatedIcon"] = "ANIMATED_ICON";
        GuildFeature3["ApplicationCommandPermissionsV2"] = "APPLICATION_COMMAND_PERMISSIONS_V2";
        GuildFeature3["AutoModeration"] = "AUTO_MODERATION";
        GuildFeature3["Banner"] = "BANNER";
        GuildFeature3["Community"] = "COMMUNITY";
        GuildFeature3["CreatorMonetizableProvisional"] = "CREATOR_MONETIZABLE_PROVISIONAL";
        GuildFeature3["CreatorStorePage"] = "CREATOR_STORE_PAGE";
        GuildFeature3["DeveloperSupportServer"] = "DEVELOPER_SUPPORT_SERVER";
        GuildFeature3["Discoverable"] = "DISCOVERABLE";
        GuildFeature3["Featurable"] = "FEATURABLE";
        GuildFeature3["HasDirectoryEntry"] = "HAS_DIRECTORY_ENTRY";
        GuildFeature3["Hub"] = "HUB";
        GuildFeature3["InvitesDisabled"] = "INVITES_DISABLED";
        GuildFeature3["InviteSplash"] = "INVITE_SPLASH";
        GuildFeature3["LinkedToHub"] = "LINKED_TO_HUB";
        GuildFeature3["MemberVerificationGateEnabled"] = "MEMBER_VERIFICATION_GATE_ENABLED";
        GuildFeature3["MonetizationEnabled"] = "MONETIZATION_ENABLED";
        GuildFeature3["MoreStickers"] = "MORE_STICKERS";
        GuildFeature3["News"] = "NEWS";
        GuildFeature3["Partnered"] = "PARTNERED";
        GuildFeature3["PreviewEnabled"] = "PREVIEW_ENABLED";
        GuildFeature3["PrivateThreads"] = "PRIVATE_THREADS";
        GuildFeature3["RaidAlertsDisabled"] = "RAID_ALERTS_DISABLED";
        GuildFeature3["RelayEnabled"] = "RELAY_ENABLED";
        GuildFeature3["RoleIcons"] = "ROLE_ICONS";
        GuildFeature3["RoleSubscriptionsAvailableForPurchase"] = "ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE";
        GuildFeature3["RoleSubscriptionsEnabled"] = "ROLE_SUBSCRIPTIONS_ENABLED";
        GuildFeature3["TicketedEventsEnabled"] = "TICKETED_EVENTS_ENABLED";
        GuildFeature3["VanityURL"] = "VANITY_URL";
        GuildFeature3["Verified"] = "VERIFIED";
        GuildFeature3["VIPRegions"] = "VIP_REGIONS";
        GuildFeature3["WelcomeScreenEnabled"] = "WELCOME_SCREEN_ENABLED";
      })(exports.GuildFeature || (exports.GuildFeature = {}));
      (function(GuildMemberFlags3) {
        GuildMemberFlags3[GuildMemberFlags3["DidRejoin"] = 1] = "DidRejoin";
        GuildMemberFlags3[GuildMemberFlags3["CompletedOnboarding"] = 2] = "CompletedOnboarding";
        GuildMemberFlags3[GuildMemberFlags3["BypassesVerification"] = 4] = "BypassesVerification";
        GuildMemberFlags3[GuildMemberFlags3["StartedOnboarding"] = 8] = "StartedOnboarding";
        GuildMemberFlags3[GuildMemberFlags3["StartedHomeActions"] = 32] = "StartedHomeActions";
        GuildMemberFlags3[GuildMemberFlags3["CompletedHomeActions"] = 64] = "CompletedHomeActions";
        GuildMemberFlags3[GuildMemberFlags3["AutomodQuarantinedUsernameOrGuildNickname"] = 128] = "AutomodQuarantinedUsernameOrGuildNickname";
        GuildMemberFlags3[GuildMemberFlags3["AutomodQuarantinedBio"] = 256] = "AutomodQuarantinedBio";
      })(exports.GuildMemberFlags || (exports.GuildMemberFlags = {}));
      (function(IntegrationExpireBehavior3) {
        IntegrationExpireBehavior3[IntegrationExpireBehavior3["RemoveRole"] = 0] = "RemoveRole";
        IntegrationExpireBehavior3[IntegrationExpireBehavior3["Kick"] = 1] = "Kick";
      })(exports.IntegrationExpireBehavior || (exports.IntegrationExpireBehavior = {}));
      (function(GuildWidgetStyle3) {
        GuildWidgetStyle3["Shield"] = "shield";
        GuildWidgetStyle3["Banner1"] = "banner1";
        GuildWidgetStyle3["Banner2"] = "banner2";
        GuildWidgetStyle3["Banner3"] = "banner3";
        GuildWidgetStyle3["Banner4"] = "banner4";
      })(exports.GuildWidgetStyle || (exports.GuildWidgetStyle = {}));
      (function(MembershipScreeningFieldType3) {
        MembershipScreeningFieldType3["Terms"] = "TERMS";
      })(exports.MembershipScreeningFieldType || (exports.MembershipScreeningFieldType = {}));
      (function(GuildOnboardingMode3) {
        GuildOnboardingMode3[GuildOnboardingMode3["OnboardingDefault"] = 0] = "OnboardingDefault";
        GuildOnboardingMode3[GuildOnboardingMode3["OnboardingAdvanced"] = 1] = "OnboardingAdvanced";
      })(exports.GuildOnboardingMode || (exports.GuildOnboardingMode = {}));
      (function(GuildOnboardingPromptType3) {
        GuildOnboardingPromptType3[GuildOnboardingPromptType3["MultipleChoice"] = 0] = "MultipleChoice";
        GuildOnboardingPromptType3[GuildOnboardingPromptType3["Dropdown"] = 1] = "Dropdown";
      })(exports.GuildOnboardingPromptType || (exports.GuildOnboardingPromptType = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/guildScheduledEvent.js
  var require_guildScheduledEvent = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/guildScheduledEvent.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GuildScheduledEventPrivacyLevel = exports.GuildScheduledEventStatus = exports.GuildScheduledEventEntityType = void 0;
      (function(GuildScheduledEventEntityType3) {
        GuildScheduledEventEntityType3[GuildScheduledEventEntityType3["StageInstance"] = 1] = "StageInstance";
        GuildScheduledEventEntityType3[GuildScheduledEventEntityType3["Voice"] = 2] = "Voice";
        GuildScheduledEventEntityType3[GuildScheduledEventEntityType3["External"] = 3] = "External";
      })(exports.GuildScheduledEventEntityType || (exports.GuildScheduledEventEntityType = {}));
      (function(GuildScheduledEventStatus3) {
        GuildScheduledEventStatus3[GuildScheduledEventStatus3["Scheduled"] = 1] = "Scheduled";
        GuildScheduledEventStatus3[GuildScheduledEventStatus3["Active"] = 2] = "Active";
        GuildScheduledEventStatus3[GuildScheduledEventStatus3["Completed"] = 3] = "Completed";
        GuildScheduledEventStatus3[GuildScheduledEventStatus3["Canceled"] = 4] = "Canceled";
      })(exports.GuildScheduledEventStatus || (exports.GuildScheduledEventStatus = {}));
      (function(GuildScheduledEventPrivacyLevel3) {
        GuildScheduledEventPrivacyLevel3[GuildScheduledEventPrivacyLevel3["GuildOnly"] = 2] = "GuildOnly";
      })(exports.GuildScheduledEventPrivacyLevel || (exports.GuildScheduledEventPrivacyLevel = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/attachment.js
  var require_attachment = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/attachment.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/base.js
  var require_base = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/base.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/boolean.js
  var require_boolean = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/boolean.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/channel.js
  var require_channel2 = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/channel.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/integer.js
  var require_integer = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/integer.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/mentionable.js
  var require_mentionable = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/mentionable.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/number.js
  var require_number = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/number.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/role.js
  var require_role = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/role.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/shared.js
  var require_shared = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/shared.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ApplicationCommandOptionType = void 0;
      (function(ApplicationCommandOptionType3) {
        ApplicationCommandOptionType3[ApplicationCommandOptionType3["Subcommand"] = 1] = "Subcommand";
        ApplicationCommandOptionType3[ApplicationCommandOptionType3["SubcommandGroup"] = 2] = "SubcommandGroup";
        ApplicationCommandOptionType3[ApplicationCommandOptionType3["String"] = 3] = "String";
        ApplicationCommandOptionType3[ApplicationCommandOptionType3["Integer"] = 4] = "Integer";
        ApplicationCommandOptionType3[ApplicationCommandOptionType3["Boolean"] = 5] = "Boolean";
        ApplicationCommandOptionType3[ApplicationCommandOptionType3["User"] = 6] = "User";
        ApplicationCommandOptionType3[ApplicationCommandOptionType3["Channel"] = 7] = "Channel";
        ApplicationCommandOptionType3[ApplicationCommandOptionType3["Role"] = 8] = "Role";
        ApplicationCommandOptionType3[ApplicationCommandOptionType3["Mentionable"] = 9] = "Mentionable";
        ApplicationCommandOptionType3[ApplicationCommandOptionType3["Number"] = 10] = "Number";
        ApplicationCommandOptionType3[ApplicationCommandOptionType3["Attachment"] = 11] = "Attachment";
      })(exports.ApplicationCommandOptionType || (exports.ApplicationCommandOptionType = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/string.js
  var require_string = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/string.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/subcommand.js
  var require_subcommand = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/subcommand.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/subcommandGroup.js
  var require_subcommandGroup = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/subcommandGroup.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/user.js
  var require_user = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/_chatInput/user.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/chatInput.js
  var require_chatInput = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/chatInput.js"(exports) {
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_attachment(), exports);
      __exportStar(require_base(), exports);
      __exportStar(require_boolean(), exports);
      __exportStar(require_channel2(), exports);
      __exportStar(require_integer(), exports);
      __exportStar(require_mentionable(), exports);
      __exportStar(require_number(), exports);
      __exportStar(require_role(), exports);
      __exportStar(require_shared(), exports);
      __exportStar(require_string(), exports);
      __exportStar(require_subcommand(), exports);
      __exportStar(require_subcommandGroup(), exports);
      __exportStar(require_user(), exports);
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/contextMenu.js
  var require_contextMenu = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/contextMenu.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/permissions.js
  var require_permissions = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/_applicationCommands/permissions.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.APIApplicationCommandPermissionsConstant = exports.ApplicationCommandPermissionType = void 0;
      (function(ApplicationCommandPermissionType3) {
        ApplicationCommandPermissionType3[ApplicationCommandPermissionType3["Role"] = 1] = "Role";
        ApplicationCommandPermissionType3[ApplicationCommandPermissionType3["User"] = 2] = "User";
        ApplicationCommandPermissionType3[ApplicationCommandPermissionType3["Channel"] = 3] = "Channel";
      })(exports.ApplicationCommandPermissionType || (exports.ApplicationCommandPermissionType = {}));
      exports.APIApplicationCommandPermissionsConstant = {
        // eslint-disable-next-line unicorn/prefer-native-coercion-functions
        Everyone: (guildId) => String(guildId),
        AllChannels: (guildId) => String(BigInt(guildId) - 1n)
      };
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/applicationCommands.js
  var require_applicationCommands = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/applicationCommands.js"(exports) {
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ApplicationCommandType = void 0;
      __exportStar(require_chatInput(), exports);
      __exportStar(require_contextMenu(), exports);
      __exportStar(require_permissions(), exports);
      (function(ApplicationCommandType3) {
        ApplicationCommandType3[ApplicationCommandType3["ChatInput"] = 1] = "ChatInput";
        ApplicationCommandType3[ApplicationCommandType3["User"] = 2] = "User";
        ApplicationCommandType3[ApplicationCommandType3["Message"] = 3] = "Message";
      })(exports.ApplicationCommandType || (exports.ApplicationCommandType = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/autocomplete.js
  var require_autocomplete = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/autocomplete.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/base.js
  var require_base2 = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/base.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/messageComponents.js
  var require_messageComponents = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/messageComponents.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/modalSubmit.js
  var require_modalSubmit = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/modalSubmit.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/ping.js
  var require_ping = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/ping.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/_interactions/responses.js
  var require_responses = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/_interactions/responses.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InteractionResponseType = exports.InteractionType = void 0;
      (function(InteractionType3) {
        InteractionType3[InteractionType3["Ping"] = 1] = "Ping";
        InteractionType3[InteractionType3["ApplicationCommand"] = 2] = "ApplicationCommand";
        InteractionType3[InteractionType3["MessageComponent"] = 3] = "MessageComponent";
        InteractionType3[InteractionType3["ApplicationCommandAutocomplete"] = 4] = "ApplicationCommandAutocomplete";
        InteractionType3[InteractionType3["ModalSubmit"] = 5] = "ModalSubmit";
      })(exports.InteractionType || (exports.InteractionType = {}));
      (function(InteractionResponseType3) {
        InteractionResponseType3[InteractionResponseType3["Pong"] = 1] = "Pong";
        InteractionResponseType3[InteractionResponseType3["ChannelMessageWithSource"] = 4] = "ChannelMessageWithSource";
        InteractionResponseType3[InteractionResponseType3["DeferredChannelMessageWithSource"] = 5] = "DeferredChannelMessageWithSource";
        InteractionResponseType3[InteractionResponseType3["DeferredMessageUpdate"] = 6] = "DeferredMessageUpdate";
        InteractionResponseType3[InteractionResponseType3["UpdateMessage"] = 7] = "UpdateMessage";
        InteractionResponseType3[InteractionResponseType3["ApplicationCommandAutocompleteResult"] = 8] = "ApplicationCommandAutocompleteResult";
        InteractionResponseType3[InteractionResponseType3["Modal"] = 9] = "Modal";
        InteractionResponseType3[InteractionResponseType3["PremiumRequired"] = 10] = "PremiumRequired";
      })(exports.InteractionResponseType || (exports.InteractionResponseType = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/interactions.js
  var require_interactions = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/interactions.js"(exports) {
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_applicationCommands(), exports);
      __exportStar(require_autocomplete(), exports);
      __exportStar(require_base2(), exports);
      __exportStar(require_messageComponents(), exports);
      __exportStar(require_modalSubmit(), exports);
      __exportStar(require_ping(), exports);
      __exportStar(require_responses(), exports);
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/invite.js
  var require_invite = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/invite.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.InviteTargetType = void 0;
      (function(InviteTargetType3) {
        InviteTargetType3[InviteTargetType3["Stream"] = 1] = "Stream";
        InviteTargetType3[InviteTargetType3["EmbeddedApplication"] = 2] = "EmbeddedApplication";
      })(exports.InviteTargetType || (exports.InviteTargetType = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/oauth2.js
  var require_oauth2 = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/oauth2.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OAuth2Scopes = void 0;
      (function(OAuth2Scopes3) {
        OAuth2Scopes3["Bot"] = "bot";
        OAuth2Scopes3["Connections"] = "connections";
        OAuth2Scopes3["DMChannelsRead"] = "dm_channels.read";
        OAuth2Scopes3["Email"] = "email";
        OAuth2Scopes3["Identify"] = "identify";
        OAuth2Scopes3["Guilds"] = "guilds";
        OAuth2Scopes3["GuildsJoin"] = "guilds.join";
        OAuth2Scopes3["GuildsMembersRead"] = "guilds.members.read";
        OAuth2Scopes3["GroupDMJoins"] = "gdm.join";
        OAuth2Scopes3["MessagesRead"] = "messages.read";
        OAuth2Scopes3["RoleConnectionsWrite"] = "role_connections.write";
        OAuth2Scopes3["RPC"] = "rpc";
        OAuth2Scopes3["RPCNotificationsRead"] = "rpc.notifications.read";
        OAuth2Scopes3["WebhookIncoming"] = "webhook.incoming";
        OAuth2Scopes3["Voice"] = "voice";
        OAuth2Scopes3["ApplicationsBuildsUpload"] = "applications.builds.upload";
        OAuth2Scopes3["ApplicationsBuildsRead"] = "applications.builds.read";
        OAuth2Scopes3["ApplicationsStoreUpdate"] = "applications.store.update";
        OAuth2Scopes3["ApplicationsEntitlements"] = "applications.entitlements";
        OAuth2Scopes3["RelationshipsRead"] = "relationships.read";
        OAuth2Scopes3["ActivitiesRead"] = "activities.read";
        OAuth2Scopes3["ActivitiesWrite"] = "activities.write";
        OAuth2Scopes3["ApplicationsCommands"] = "applications.commands";
        OAuth2Scopes3["ApplicationsCommandsUpdate"] = "applications.commands.update";
        OAuth2Scopes3["ApplicationCommandsPermissionsUpdate"] = "applications.commands.permissions.update";
      })(exports.OAuth2Scopes || (exports.OAuth2Scopes = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/permissions.js
  var require_permissions2 = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/permissions.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RoleFlags = void 0;
      (function(RoleFlags3) {
        RoleFlags3[RoleFlags3["InPrompt"] = 1] = "InPrompt";
      })(exports.RoleFlags || (exports.RoleFlags = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/stageInstance.js
  var require_stageInstance = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/stageInstance.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.StageInstancePrivacyLevel = void 0;
      (function(StageInstancePrivacyLevel3) {
        StageInstancePrivacyLevel3[StageInstancePrivacyLevel3["Public"] = 1] = "Public";
        StageInstancePrivacyLevel3[StageInstancePrivacyLevel3["GuildOnly"] = 2] = "GuildOnly";
      })(exports.StageInstancePrivacyLevel || (exports.StageInstancePrivacyLevel = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/sticker.js
  var require_sticker = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/sticker.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.StickerFormatType = exports.StickerType = void 0;
      (function(StickerType3) {
        StickerType3[StickerType3["Standard"] = 1] = "Standard";
        StickerType3[StickerType3["Guild"] = 2] = "Guild";
      })(exports.StickerType || (exports.StickerType = {}));
      (function(StickerFormatType3) {
        StickerFormatType3[StickerFormatType3["PNG"] = 1] = "PNG";
        StickerFormatType3[StickerFormatType3["APNG"] = 2] = "APNG";
        StickerFormatType3[StickerFormatType3["Lottie"] = 3] = "Lottie";
        StickerFormatType3[StickerFormatType3["GIF"] = 4] = "GIF";
      })(exports.StickerFormatType || (exports.StickerFormatType = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/teams.js
  var require_teams = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/teams.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TeamMemberRole = exports.TeamMemberMembershipState = void 0;
      (function(TeamMemberMembershipState3) {
        TeamMemberMembershipState3[TeamMemberMembershipState3["Invited"] = 1] = "Invited";
        TeamMemberMembershipState3[TeamMemberMembershipState3["Accepted"] = 2] = "Accepted";
      })(exports.TeamMemberMembershipState || (exports.TeamMemberMembershipState = {}));
      (function(TeamMemberRole3) {
        TeamMemberRole3["Admin"] = "admin";
        TeamMemberRole3["Developer"] = "developer";
        TeamMemberRole3["ReadOnly"] = "read_only";
      })(exports.TeamMemberRole || (exports.TeamMemberRole = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/template.js
  var require_template = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/template.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/user.js
  var require_user2 = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/user.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ConnectionVisibility = exports.ConnectionService = exports.UserPremiumType = exports.UserFlags = void 0;
      (function(UserFlags3) {
        UserFlags3[UserFlags3["Staff"] = 1] = "Staff";
        UserFlags3[UserFlags3["Partner"] = 2] = "Partner";
        UserFlags3[UserFlags3["Hypesquad"] = 4] = "Hypesquad";
        UserFlags3[UserFlags3["BugHunterLevel1"] = 8] = "BugHunterLevel1";
        UserFlags3[UserFlags3["MFASMS"] = 16] = "MFASMS";
        UserFlags3[UserFlags3["PremiumPromoDismissed"] = 32] = "PremiumPromoDismissed";
        UserFlags3[UserFlags3["HypeSquadOnlineHouse1"] = 64] = "HypeSquadOnlineHouse1";
        UserFlags3[UserFlags3["HypeSquadOnlineHouse2"] = 128] = "HypeSquadOnlineHouse2";
        UserFlags3[UserFlags3["HypeSquadOnlineHouse3"] = 256] = "HypeSquadOnlineHouse3";
        UserFlags3[UserFlags3["PremiumEarlySupporter"] = 512] = "PremiumEarlySupporter";
        UserFlags3[UserFlags3["TeamPseudoUser"] = 1024] = "TeamPseudoUser";
        UserFlags3[UserFlags3["HasUnreadUrgentMessages"] = 8192] = "HasUnreadUrgentMessages";
        UserFlags3[UserFlags3["BugHunterLevel2"] = 16384] = "BugHunterLevel2";
        UserFlags3[UserFlags3["VerifiedBot"] = 65536] = "VerifiedBot";
        UserFlags3[UserFlags3["VerifiedDeveloper"] = 131072] = "VerifiedDeveloper";
        UserFlags3[UserFlags3["CertifiedModerator"] = 262144] = "CertifiedModerator";
        UserFlags3[UserFlags3["BotHTTPInteractions"] = 524288] = "BotHTTPInteractions";
        UserFlags3[UserFlags3["Spammer"] = 1048576] = "Spammer";
        UserFlags3[UserFlags3["DisablePremium"] = 2097152] = "DisablePremium";
        UserFlags3[UserFlags3["ActiveDeveloper"] = 4194304] = "ActiveDeveloper";
        UserFlags3[UserFlags3["Quarantined"] = 17592186044416] = "Quarantined";
        UserFlags3[UserFlags3["Collaborator"] = 1125899906842624] = "Collaborator";
        UserFlags3[UserFlags3["RestrictedCollaborator"] = 2251799813685248] = "RestrictedCollaborator";
      })(exports.UserFlags || (exports.UserFlags = {}));
      (function(UserPremiumType3) {
        UserPremiumType3[UserPremiumType3["None"] = 0] = "None";
        UserPremiumType3[UserPremiumType3["NitroClassic"] = 1] = "NitroClassic";
        UserPremiumType3[UserPremiumType3["Nitro"] = 2] = "Nitro";
        UserPremiumType3[UserPremiumType3["NitroBasic"] = 3] = "NitroBasic";
      })(exports.UserPremiumType || (exports.UserPremiumType = {}));
      (function(ConnectionService3) {
        ConnectionService3["BattleNet"] = "battlenet";
        ConnectionService3["eBay"] = "ebay";
        ConnectionService3["EpicGames"] = "epicgames";
        ConnectionService3["Facebook"] = "facebook";
        ConnectionService3["GitHub"] = "github";
        ConnectionService3["Instagram"] = "instagram";
        ConnectionService3["LeagueOfLegends"] = "leagueoflegends";
        ConnectionService3["PayPal"] = "paypal";
        ConnectionService3["PlayStationNetwork"] = "playstation";
        ConnectionService3["Reddit"] = "reddit";
        ConnectionService3["RiotGames"] = "riotgames";
        ConnectionService3["Spotify"] = "spotify";
        ConnectionService3["Skype"] = "skype";
        ConnectionService3["Steam"] = "steam";
        ConnectionService3["TikTok"] = "tiktok";
        ConnectionService3["Twitch"] = "twitch";
        ConnectionService3["X"] = "twitter";
        ConnectionService3["Twitter"] = "twitter";
        ConnectionService3["Xbox"] = "xbox";
        ConnectionService3["YouTube"] = "youtube";
      })(exports.ConnectionService || (exports.ConnectionService = {}));
      (function(ConnectionVisibility3) {
        ConnectionVisibility3[ConnectionVisibility3["None"] = 0] = "None";
        ConnectionVisibility3[ConnectionVisibility3["Everyone"] = 1] = "Everyone";
      })(exports.ConnectionVisibility || (exports.ConnectionVisibility = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/voice.js
  var require_voice = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/voice.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/webhook.js
  var require_webhook = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/webhook.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WebhookType = void 0;
      (function(WebhookType3) {
        WebhookType3[WebhookType3["Incoming"] = 1] = "Incoming";
        WebhookType3[WebhookType3["ChannelFollower"] = 2] = "ChannelFollower";
        WebhookType3[WebhookType3["Application"] = 3] = "Application";
      })(exports.WebhookType || (exports.WebhookType = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/monetization.js
  var require_monetization = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/monetization.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SKUType = exports.SKUFlags = exports.EntitlementType = void 0;
      (function(EntitlementType3) {
        EntitlementType3[EntitlementType3["ApplicationSubscription"] = 8] = "ApplicationSubscription";
      })(exports.EntitlementType || (exports.EntitlementType = {}));
      (function(SKUFlags3) {
        SKUFlags3[SKUFlags3["Available"] = 4] = "Available";
        SKUFlags3[SKUFlags3["GuildSubscription"] = 128] = "GuildSubscription";
        SKUFlags3[SKUFlags3["UserSubscription"] = 256] = "UserSubscription";
      })(exports.SKUFlags || (exports.SKUFlags = {}));
      (function(SKUType3) {
        SKUType3[SKUType3["Subscription"] = 5] = "Subscription";
        SKUType3[SKUType3["SubscriptionGroup"] = 6] = "SubscriptionGroup";
      })(exports.SKUType || (exports.SKUType = {}));
    }
  });

  // ../../node_modules/discord-api-types/payloads/v10/index.js
  var require_v102 = __commonJS({
    "../../node_modules/discord-api-types/payloads/v10/index.js"(exports) {
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_common2(), exports);
      __exportStar(require_application(), exports);
      __exportStar(require_auditLog(), exports);
      __exportStar(require_autoModeration(), exports);
      __exportStar(require_channel(), exports);
      __exportStar(require_emoji(), exports);
      __exportStar(require_gateway(), exports);
      __exportStar(require_guild(), exports);
      __exportStar(require_guildScheduledEvent(), exports);
      __exportStar(require_interactions(), exports);
      __exportStar(require_invite(), exports);
      __exportStar(require_oauth2(), exports);
      __exportStar(require_permissions2(), exports);
      __exportStar(require_stageInstance(), exports);
      __exportStar(require_sticker(), exports);
      __exportStar(require_teams(), exports);
      __exportStar(require_template(), exports);
      __exportStar(require_user2(), exports);
      __exportStar(require_voice(), exports);
      __exportStar(require_webhook(), exports);
      __exportStar(require_monetization(), exports);
    }
  });

  // ../../node_modules/discord-api-types/rest/common.js
  var require_common3 = __commonJS({
    "../../node_modules/discord-api-types/rest/common.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Locale = exports.RESTJSONErrorCodes = void 0;
      (function(RESTJSONErrorCodes3) {
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["GeneralError"] = 0] = "GeneralError";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownAccount"] = 10001] = "UnknownAccount";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownApplication"] = 10002] = "UnknownApplication";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownChannel"] = 10003] = "UnknownChannel";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownGuild"] = 10004] = "UnknownGuild";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownIntegration"] = 10005] = "UnknownIntegration";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownInvite"] = 10006] = "UnknownInvite";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownMember"] = 10007] = "UnknownMember";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownMessage"] = 10008] = "UnknownMessage";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownPermissionOverwrite"] = 10009] = "UnknownPermissionOverwrite";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownProvider"] = 10010] = "UnknownProvider";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownRole"] = 10011] = "UnknownRole";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownToken"] = 10012] = "UnknownToken";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownUser"] = 10013] = "UnknownUser";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownEmoji"] = 10014] = "UnknownEmoji";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownWebhook"] = 10015] = "UnknownWebhook";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownWebhookService"] = 10016] = "UnknownWebhookService";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownSession"] = 10020] = "UnknownSession";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownBan"] = 10026] = "UnknownBan";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownSKU"] = 10027] = "UnknownSKU";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownStoreListing"] = 10028] = "UnknownStoreListing";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownEntitlement"] = 10029] = "UnknownEntitlement";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownBuild"] = 10030] = "UnknownBuild";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownLobby"] = 10031] = "UnknownLobby";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownBranch"] = 10032] = "UnknownBranch";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownStoreDirectoryLayout"] = 10033] = "UnknownStoreDirectoryLayout";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownRedistributable"] = 10036] = "UnknownRedistributable";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownGiftCode"] = 10038] = "UnknownGiftCode";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownStream"] = 10049] = "UnknownStream";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownPremiumServerSubscribeCooldown"] = 10050] = "UnknownPremiumServerSubscribeCooldown";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownGuildTemplate"] = 10057] = "UnknownGuildTemplate";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownDiscoverableServerCategory"] = 10059] = "UnknownDiscoverableServerCategory";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownSticker"] = 10060] = "UnknownSticker";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownInteraction"] = 10062] = "UnknownInteraction";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownApplicationCommand"] = 10063] = "UnknownApplicationCommand";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownVoiceState"] = 10065] = "UnknownVoiceState";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownApplicationCommandPermissions"] = 10066] = "UnknownApplicationCommandPermissions";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownStageInstance"] = 10067] = "UnknownStageInstance";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownGuildMemberVerificationForm"] = 10068] = "UnknownGuildMemberVerificationForm";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownGuildWelcomeScreen"] = 10069] = "UnknownGuildWelcomeScreen";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownGuildScheduledEvent"] = 10070] = "UnknownGuildScheduledEvent";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownGuildScheduledEventUser"] = 10071] = "UnknownGuildScheduledEventUser";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnknownTag"] = 10087] = "UnknownTag";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["BotsCannotUseThisEndpoint"] = 20001] = "BotsCannotUseThisEndpoint";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["OnlyBotsCanUseThisEndpoint"] = 20002] = "OnlyBotsCanUseThisEndpoint";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ExplicitContentCannotBeSentToTheDesiredRecipient"] = 20009] = "ExplicitContentCannotBeSentToTheDesiredRecipient";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["NotAuthorizedToPerformThisActionOnThisApplication"] = 20012] = "NotAuthorizedToPerformThisActionOnThisApplication";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ActionCannotBePerformedDueToSlowmodeRateLimit"] = 20016] = "ActionCannotBePerformedDueToSlowmodeRateLimit";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["TheMazeIsntMeantForYou"] = 20017] = "TheMazeIsntMeantForYou";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["OnlyTheOwnerOfThisAccountCanPerformThisAction"] = 20018] = "OnlyTheOwnerOfThisAccountCanPerformThisAction";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["AnnouncementEditLimitExceeded"] = 20022] = "AnnouncementEditLimitExceeded";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UnderMinimumAge"] = 20024] = "UnderMinimumAge";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ChannelSendRateLimit"] = 20028] = "ChannelSendRateLimit";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ServerSendRateLimit"] = 20029] = "ServerSendRateLimit";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["StageTopicServerNameServerDescriptionOrChannelNamesContainDisallowedWords"] = 20031] = "StageTopicServerNameServerDescriptionOrChannelNamesContainDisallowedWords";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["GuildPremiumSubscriptionLevelTooLow"] = 20035] = "GuildPremiumSubscriptionLevelTooLow";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfGuildsReached"] = 30001] = "MaximumNumberOfGuildsReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfFriendsReached"] = 30002] = "MaximumNumberOfFriendsReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfPinsReachedForTheChannel"] = 30003] = "MaximumNumberOfPinsReachedForTheChannel";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfRecipientsReached"] = 30004] = "MaximumNumberOfRecipientsReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfGuildRolesReached"] = 30005] = "MaximumNumberOfGuildRolesReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfWebhooksReached"] = 30007] = "MaximumNumberOfWebhooksReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfEmojisReached"] = 30008] = "MaximumNumberOfEmojisReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfReactionsReached"] = 30010] = "MaximumNumberOfReactionsReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfGroupDMsReached"] = 30011] = "MaximumNumberOfGroupDMsReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfGuildChannelsReached"] = 30013] = "MaximumNumberOfGuildChannelsReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfAttachmentsInAMessageReached"] = 30015] = "MaximumNumberOfAttachmentsInAMessageReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfInvitesReached"] = 30016] = "MaximumNumberOfInvitesReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfAnimatedEmojisReached"] = 30018] = "MaximumNumberOfAnimatedEmojisReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfServerMembersReached"] = 30019] = "MaximumNumberOfServerMembersReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfServerCategoriesReached"] = 30030] = "MaximumNumberOfServerCategoriesReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["GuildAlreadyHasTemplate"] = 30031] = "GuildAlreadyHasTemplate";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfApplicationCommandsReached"] = 30032] = "MaximumNumberOfApplicationCommandsReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumThreadParticipantsReached"] = 30033] = "MaximumThreadParticipantsReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumDailyApplicationCommandCreatesReached"] = 30034] = "MaximumDailyApplicationCommandCreatesReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfNonGuildMemberBansHasBeenExceeded"] = 30035] = "MaximumNumberOfNonGuildMemberBansHasBeenExceeded";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfBanFetchesHasBeenReached"] = 30037] = "MaximumNumberOfBanFetchesHasBeenReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfUncompletedGuildScheduledEventsReached"] = 30038] = "MaximumNumberOfUncompletedGuildScheduledEventsReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfStickersReached"] = 30039] = "MaximumNumberOfStickersReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfPruneRequestsHasBeenReached"] = 30040] = "MaximumNumberOfPruneRequestsHasBeenReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfGuildWidgetSettingsUpdatesHasBeenReached"] = 30042] = "MaximumNumberOfGuildWidgetSettingsUpdatesHasBeenReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfEditsToMessagesOlderThanOneHourReached"] = 30046] = "MaximumNumberOfEditsToMessagesOlderThanOneHourReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfPinnedThreadsInForumHasBeenReached"] = 30047] = "MaximumNumberOfPinnedThreadsInForumHasBeenReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfTagsInForumHasBeenReached"] = 30048] = "MaximumNumberOfTagsInForumHasBeenReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["BitrateIsTooHighForChannelOfThisType"] = 30052] = "BitrateIsTooHighForChannelOfThisType";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfPremiumEmojisReached"] = 30056] = "MaximumNumberOfPremiumEmojisReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfWebhooksPerGuildReached"] = 30058] = "MaximumNumberOfWebhooksPerGuildReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumNumberOfChannelPermissionOverwritesReached"] = 30060] = "MaximumNumberOfChannelPermissionOverwritesReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["TheChannelsForThisGuildAreTooLarge"] = 30061] = "TheChannelsForThisGuildAreTooLarge";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["Unauthorized"] = 40001] = "Unauthorized";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["VerifyYourAccount"] = 40002] = "VerifyYourAccount";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["OpeningDirectMessagesTooFast"] = 40003] = "OpeningDirectMessagesTooFast";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["SendMessagesHasBeenTemporarilyDisabled"] = 40004] = "SendMessagesHasBeenTemporarilyDisabled";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["RequestEntityTooLarge"] = 40005] = "RequestEntityTooLarge";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["FeatureTemporarilyDisabledServerSide"] = 40006] = "FeatureTemporarilyDisabledServerSide";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UserBannedFromThisGuild"] = 40007] = "UserBannedFromThisGuild";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ConnectionHasBeenRevoked"] = 40012] = "ConnectionHasBeenRevoked";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["TargetUserIsNotConnectedToVoice"] = 40032] = "TargetUserIsNotConnectedToVoice";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ThisMessageWasAlreadyCrossposted"] = 40033] = "ThisMessageWasAlreadyCrossposted";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ApplicationCommandWithThatNameAlreadyExists"] = 40041] = "ApplicationCommandWithThatNameAlreadyExists";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ApplicationInteractionFailedToSend"] = 40043] = "ApplicationInteractionFailedToSend";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotSendAMessageInAForumChannel"] = 40058] = "CannotSendAMessageInAForumChannel";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InteractionHasAlreadyBeenAcknowledged"] = 40060] = "InteractionHasAlreadyBeenAcknowledged";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["TagNamesMustBeUnique"] = 40061] = "TagNamesMustBeUnique";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ServiceResourceIsBeingRateLimited"] = 40062] = "ServiceResourceIsBeingRateLimited";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ThereAreNoTagsAvailableThatCanBeSetByNonModerators"] = 40066] = "ThereAreNoTagsAvailableThatCanBeSetByNonModerators";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["TagRequiredToCreateAForumPostInThisChannel"] = 40067] = "TagRequiredToCreateAForumPostInThisChannel";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["AnEntitlementHasAlreadyBeenGrantedForThisResource"] = 40074] = "AnEntitlementHasAlreadyBeenGrantedForThisResource";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MissingAccess"] = 50001] = "MissingAccess";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidAccountType"] = 50002] = "InvalidAccountType";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotExecuteActionOnDMChannel"] = 50003] = "CannotExecuteActionOnDMChannel";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["GuildWidgetDisabled"] = 50004] = "GuildWidgetDisabled";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotEditMessageAuthoredByAnotherUser"] = 50005] = "CannotEditMessageAuthoredByAnotherUser";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotSendAnEmptyMessage"] = 50006] = "CannotSendAnEmptyMessage";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotSendMessagesToThisUser"] = 50007] = "CannotSendMessagesToThisUser";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotSendMessagesInNonTextChannel"] = 50008] = "CannotSendMessagesInNonTextChannel";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ChannelVerificationLevelTooHighForYouToGainAccess"] = 50009] = "ChannelVerificationLevelTooHighForYouToGainAccess";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["OAuth2ApplicationDoesNotHaveBot"] = 50010] = "OAuth2ApplicationDoesNotHaveBot";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["OAuth2ApplicationLimitReached"] = 50011] = "OAuth2ApplicationLimitReached";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidOAuth2State"] = 50012] = "InvalidOAuth2State";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MissingPermissions"] = 50013] = "MissingPermissions";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidToken"] = 50014] = "InvalidToken";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["NoteWasTooLong"] = 50015] = "NoteWasTooLong";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ProvidedTooFewOrTooManyMessagesToDelete"] = 50016] = "ProvidedTooFewOrTooManyMessagesToDelete";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidMFALevel"] = 50017] = "InvalidMFALevel";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MessageCanOnlyBePinnedInTheChannelItWasSentIn"] = 50019] = "MessageCanOnlyBePinnedInTheChannelItWasSentIn";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InviteCodeInvalidOrTaken"] = 50020] = "InviteCodeInvalidOrTaken";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotExecuteActionOnSystemMessage"] = 50021] = "CannotExecuteActionOnSystemMessage";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotExecuteActionOnThisChannelType"] = 50024] = "CannotExecuteActionOnThisChannelType";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidOAuth2AccessToken"] = 50025] = "InvalidOAuth2AccessToken";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MissingRequiredOAuth2Scope"] = 50026] = "MissingRequiredOAuth2Scope";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidWebhookToken"] = 50027] = "InvalidWebhookToken";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidRole"] = 50028] = "InvalidRole";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidRecipients"] = 50033] = "InvalidRecipients";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["OneOfTheMessagesProvidedWasTooOldForBulkDelete"] = 50034] = "OneOfTheMessagesProvidedWasTooOldForBulkDelete";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidFormBodyOrContentType"] = 50035] = "InvalidFormBodyOrContentType";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InviteAcceptedToGuildWithoutTheBotBeingIn"] = 50036] = "InviteAcceptedToGuildWithoutTheBotBeingIn";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidActivityAction"] = 50039] = "InvalidActivityAction";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidAPIVersion"] = 50041] = "InvalidAPIVersion";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["FileUploadedExceedsMaximumSize"] = 50045] = "FileUploadedExceedsMaximumSize";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidFileUploaded"] = 50046] = "InvalidFileUploaded";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotSelfRedeemThisGift"] = 50054] = "CannotSelfRedeemThisGift";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidGuild"] = 50055] = "InvalidGuild";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidSKU"] = 50057] = "InvalidSKU";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidRequestOrigin"] = 50067] = "InvalidRequestOrigin";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidMessageType"] = 50068] = "InvalidMessageType";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["PaymentSourceRequiredToRedeemGift"] = 50070] = "PaymentSourceRequiredToRedeemGift";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotModifyASystemWebhook"] = 50073] = "CannotModifyASystemWebhook";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotDeleteChannelRequiredForCommunityGuilds"] = 50074] = "CannotDeleteChannelRequiredForCommunityGuilds";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotEditStickersWithinMessage"] = 50080] = "CannotEditStickersWithinMessage";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidStickerSent"] = 50081] = "InvalidStickerSent";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidActionOnArchivedThread"] = 50083] = "InvalidActionOnArchivedThread";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidThreadNotificationSettings"] = 50084] = "InvalidThreadNotificationSettings";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ParameterEarlierThanCreation"] = 50085] = "ParameterEarlierThanCreation";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CommunityServerChannelsMustBeTextChannels"] = 50086] = "CommunityServerChannelsMustBeTextChannels";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["TheEntityTypeOfTheEventIsDifferentFromTheEntityYouAreTryingToStartTheEventFor"] = 50091] = "TheEntityTypeOfTheEventIsDifferentFromTheEntityYouAreTryingToStartTheEventFor";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ServerNotAvailableInYourLocation"] = 50095] = "ServerNotAvailableInYourLocation";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ServerNeedsMonetizationEnabledToPerformThisAction"] = 50097] = "ServerNeedsMonetizationEnabledToPerformThisAction";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ServerNeedsMoreBoostsToPerformThisAction"] = 50101] = "ServerNeedsMoreBoostsToPerformThisAction";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["RequestBodyContainsInvalidJSON"] = 50109] = "RequestBodyContainsInvalidJSON";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["OwnerCannotBePendingMember"] = 50131] = "OwnerCannotBePendingMember";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["OwnershipCannotBeMovedToABotUser"] = 50132] = "OwnershipCannotBeMovedToABotUser";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["FailedToResizeAssetBelowTheMinimumSize"] = 50138] = "FailedToResizeAssetBelowTheMinimumSize";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotMixSubscriptionAndNonSubscriptionRolesForAnEmoji"] = 50144] = "CannotMixSubscriptionAndNonSubscriptionRolesForAnEmoji";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotConvertBetweenPremiumEmojiAndNormalEmoji"] = 50145] = "CannotConvertBetweenPremiumEmojiAndNormalEmoji";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UploadedFileNotFound"] = 50146] = "UploadedFileNotFound";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["VoiceMessagesDoNotSupportAdditionalContent"] = 50159] = "VoiceMessagesDoNotSupportAdditionalContent";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["VoiceMessagesMustHaveASingleAudioAttachment"] = 50160] = "VoiceMessagesMustHaveASingleAudioAttachment";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["VoiceMessagesMustHaveSupportingMetadata"] = 50161] = "VoiceMessagesMustHaveSupportingMetadata";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["VoiceMessagesCannotBeEdited"] = 50162] = "VoiceMessagesCannotBeEdited";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotDeleteGuildSubscriptionIntegration"] = 50163] = "CannotDeleteGuildSubscriptionIntegration";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["YouCannotSendVoiceMessagesInThisChannel"] = 50173] = "YouCannotSendVoiceMessagesInThisChannel";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["TheUserAccountMustFirstBeVerified"] = 50178] = "TheUserAccountMustFirstBeVerified";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["YouDoNotHavePermissionToSendThisSticker"] = 50600] = "YouDoNotHavePermissionToSendThisSticker";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["TwoFactorAuthenticationIsRequired"] = 60003] = "TwoFactorAuthenticationIsRequired";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["NoUsersWithDiscordTagExist"] = 80004] = "NoUsersWithDiscordTagExist";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ReactionWasBlocked"] = 90001] = "ReactionWasBlocked";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ApplicationNotYetAvailable"] = 110001] = "ApplicationNotYetAvailable";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["APIResourceOverloaded"] = 13e4] = "APIResourceOverloaded";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["TheStageIsAlreadyOpen"] = 150006] = "TheStageIsAlreadyOpen";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotReplyWithoutPermissionToReadMessageHistory"] = 160002] = "CannotReplyWithoutPermissionToReadMessageHistory";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ThreadAlreadyCreatedForMessage"] = 160004] = "ThreadAlreadyCreatedForMessage";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["ThreadLocked"] = 160005] = "ThreadLocked";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumActiveThreads"] = 160006] = "MaximumActiveThreads";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MaximumActiveAnnouncementThreads"] = 160007] = "MaximumActiveAnnouncementThreads";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["InvalidJSONForUploadedLottieFile"] = 170001] = "InvalidJSONForUploadedLottieFile";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["UploadedLottiesCannotContainRasterizedImages"] = 170002] = "UploadedLottiesCannotContainRasterizedImages";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["StickerMaximumFramerateExceeded"] = 170003] = "StickerMaximumFramerateExceeded";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["StickerFrameCountExceedsMaximumOf1000Frames"] = 170004] = "StickerFrameCountExceedsMaximumOf1000Frames";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["LottieAnimationMaximumDimensionsExceeded"] = 170005] = "LottieAnimationMaximumDimensionsExceeded";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["StickerFramerateIsTooSmallOrTooLarge"] = 170006] = "StickerFramerateIsTooSmallOrTooLarge";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["StickerAnimationDurationExceedsMaximumOf5Seconds"] = 170007] = "StickerAnimationDurationExceedsMaximumOf5Seconds";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotUpdateAFinishedEvent"] = 18e4] = "CannotUpdateAFinishedEvent";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["FailedToCreateStageNeededForStageEvent"] = 180002] = "FailedToCreateStageNeededForStageEvent";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MessageWasBlockedByAutomaticModeration"] = 2e5] = "MessageWasBlockedByAutomaticModeration";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["TitleWasBlockedByAutomaticModeration"] = 200001] = "TitleWasBlockedByAutomaticModeration";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["WebhooksPostedToForumChannelsMustHaveAThreadNameOrThreadId"] = 220001] = "WebhooksPostedToForumChannelsMustHaveAThreadNameOrThreadId";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["WebhooksPostedToForumChannelsCannotHaveBothAThreadNameAndThreadId"] = 220002] = "WebhooksPostedToForumChannelsCannotHaveBothAThreadNameAndThreadId";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["WebhooksCanOnlyCreateThreadsInForumChannels"] = 220003] = "WebhooksCanOnlyCreateThreadsInForumChannels";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["WebhookServicesCannotBeUsedInForumChannels"] = 220004] = "WebhookServicesCannotBeUsedInForumChannels";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["MessageBlockedByHarmfulLinksFilter"] = 24e4] = "MessageBlockedByHarmfulLinksFilter";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotEnableOnboardingRequirementsAreNotMet"] = 35e4] = "CannotEnableOnboardingRequirementsAreNotMet";
        RESTJSONErrorCodes3[RESTJSONErrorCodes3["CannotUpdateOnboardingWhileBelowRequirements"] = 350001] = "CannotUpdateOnboardingWhileBelowRequirements";
      })(exports.RESTJSONErrorCodes || (exports.RESTJSONErrorCodes = {}));
      (function(Locale3) {
        Locale3["Indonesian"] = "id";
        Locale3["EnglishUS"] = "en-US";
        Locale3["EnglishGB"] = "en-GB";
        Locale3["Bulgarian"] = "bg";
        Locale3["ChineseCN"] = "zh-CN";
        Locale3["ChineseTW"] = "zh-TW";
        Locale3["Croatian"] = "hr";
        Locale3["Czech"] = "cs";
        Locale3["Danish"] = "da";
        Locale3["Dutch"] = "nl";
        Locale3["Finnish"] = "fi";
        Locale3["French"] = "fr";
        Locale3["German"] = "de";
        Locale3["Greek"] = "el";
        Locale3["Hindi"] = "hi";
        Locale3["Hungarian"] = "hu";
        Locale3["Italian"] = "it";
        Locale3["Japanese"] = "ja";
        Locale3["Korean"] = "ko";
        Locale3["Lithuanian"] = "lt";
        Locale3["Norwegian"] = "no";
        Locale3["Polish"] = "pl";
        Locale3["PortugueseBR"] = "pt-BR";
        Locale3["Romanian"] = "ro";
        Locale3["Russian"] = "ru";
        Locale3["SpanishES"] = "es-ES";
        Locale3["Swedish"] = "sv-SE";
        Locale3["Thai"] = "th";
        Locale3["Turkish"] = "tr";
        Locale3["Ukrainian"] = "uk";
        Locale3["Vietnamese"] = "vi";
      })(exports.Locale || (exports.Locale = {}));
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/application.js
  var require_application2 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/application.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/auditLog.js
  var require_auditLog2 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/auditLog.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/autoModeration.js
  var require_autoModeration2 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/autoModeration.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/channel.js
  var require_channel3 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/channel.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/emoji.js
  var require_emoji2 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/emoji.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/gateway.js
  var require_gateway2 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/gateway.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/guild.js
  var require_guild2 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/guild.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/guildScheduledEvent.js
  var require_guildScheduledEvent2 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/guildScheduledEvent.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/interactions.js
  var require_interactions2 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/interactions.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/invite.js
  var require_invite2 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/invite.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/oauth2.js
  var require_oauth22 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/oauth2.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/stageInstance.js
  var require_stageInstance2 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/stageInstance.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/sticker.js
  var require_sticker2 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/sticker.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/template.js
  var require_template2 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/template.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/user.js
  var require_user3 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/user.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/voice.js
  var require_voice2 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/voice.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/webhook.js
  var require_webhook2 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/webhook.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/monetization.js
  var require_monetization2 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/monetization.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.EntitlementOwnerType = void 0;
      (function(EntitlementOwnerType3) {
        EntitlementOwnerType3[EntitlementOwnerType3["Guild"] = 1] = "Guild";
        EntitlementOwnerType3[EntitlementOwnerType3["User"] = 2] = "User";
      })(exports.EntitlementOwnerType || (exports.EntitlementOwnerType = {}));
    }
  });

  // ../../node_modules/discord-api-types/rest/v10/index.js
  var require_v103 = __commonJS({
    "../../node_modules/discord-api-types/rest/v10/index.js"(exports) {
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OAuth2Routes = exports.RouteBases = exports.ImageFormat = exports.CDNRoutes = exports.StickerPackApplicationId = exports.Routes = exports.APIVersion = void 0;
      __exportStar(require_common3(), exports);
      __exportStar(require_application2(), exports);
      __exportStar(require_auditLog2(), exports);
      __exportStar(require_autoModeration2(), exports);
      __exportStar(require_channel3(), exports);
      __exportStar(require_emoji2(), exports);
      __exportStar(require_gateway2(), exports);
      __exportStar(require_guild2(), exports);
      __exportStar(require_guildScheduledEvent2(), exports);
      __exportStar(require_interactions2(), exports);
      __exportStar(require_invite2(), exports);
      __exportStar(require_oauth22(), exports);
      __exportStar(require_stageInstance2(), exports);
      __exportStar(require_sticker2(), exports);
      __exportStar(require_template2(), exports);
      __exportStar(require_user3(), exports);
      __exportStar(require_voice2(), exports);
      __exportStar(require_webhook2(), exports);
      __exportStar(require_monetization2(), exports);
      exports.APIVersion = "10";
      exports.Routes = {
        /**
         * Route for:
         * - GET `/applications/{application.id}/role-connections/metadata`
         * - PUT `/applications/{application.id}/role-connections/metadata`
         */
        applicationRoleConnectionMetadata(applicationId) {
          return `/applications/${applicationId}/role-connections/metadata`;
        },
        /**
         * Route for:
         * - GET  `/guilds/{guild.id}/auto-moderation/rules`
         * - POST `/guilds/{guild.id}/auto-moderation/rules`
         */
        guildAutoModerationRules(guildId) {
          return `/guilds/${guildId}/auto-moderation/rules`;
        },
        /**
         * Routes for:
         * - GET    `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`
         * - PATCH  `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`
         * - DELETE `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`
         */
        guildAutoModerationRule(guildId, ruleId) {
          return `/guilds/${guildId}/auto-moderation/rules/${ruleId}`;
        },
        /**
         * Route for:
         * - GET `/guilds/{guild.id}/audit-logs`
         */
        guildAuditLog(guildId) {
          return `/guilds/${guildId}/audit-logs`;
        },
        /**
         * Route for:
         * - GET    `/channels/{channel.id}`
         * - PATCH  `/channels/{channel.id}`
         * - DELETE `/channels/{channel.id}`
         */
        channel(channelId) {
          return `/channels/${channelId}`;
        },
        /**
         * Route for:
         * - GET  `/channels/{channel.id}/messages`
         * - POST `/channels/{channel.id}/messages`
         */
        channelMessages(channelId) {
          return `/channels/${channelId}/messages`;
        },
        /**
         * Route for:
         * - GET    `/channels/{channel.id}/messages/{message.id}`
         * - PATCH  `/channels/{channel.id}/messages/{message.id}`
         * - DELETE `/channels/{channel.id}/messages/{message.id}`
         */
        channelMessage(channelId, messageId) {
          return `/channels/${channelId}/messages/${messageId}`;
        },
        /**
         * Route for:
         * - POST `/channels/{channel.id}/messages/{message.id}/crosspost`
         */
        channelMessageCrosspost(channelId, messageId) {
          return `/channels/${channelId}/messages/${messageId}/crosspost`;
        },
        /**
         * Route for:
         * - PUT    `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me`
         * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me`
         *
         * **Note**: You need to URL encode the emoji yourself
         */
        channelMessageOwnReaction(channelId, messageId, emoji) {
          return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/@me`;
        },
        /**
         * Route for:
         * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/{user.id}`
         *
         * **Note**: You need to URL encode the emoji yourself
         */
        channelMessageUserReaction(channelId, messageId, emoji, userId) {
          return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/${userId}`;
        },
        /**
         * Route for:
         * - GET    `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}`
         * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}`
         *
         * **Note**: You need to URL encode the emoji yourself
         */
        channelMessageReaction(channelId, messageId, emoji) {
          return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}`;
        },
        /**
         * Route for:
         * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions`
         */
        channelMessageAllReactions(channelId, messageId) {
          return `/channels/${channelId}/messages/${messageId}/reactions`;
        },
        /**
         * Route for:
         * - POST `/channels/{channel.id}/messages/bulk-delete`
         */
        channelBulkDelete(channelId) {
          return `/channels/${channelId}/messages/bulk-delete`;
        },
        /**
         * Route for:
         * - PUT    `/channels/{channel.id}/permissions/{overwrite.id}`
         * - DELETE `/channels/{channel.id}/permissions/{overwrite.id}`
         */
        channelPermission(channelId, overwriteId) {
          return `/channels/${channelId}/permissions/${overwriteId}`;
        },
        /**
         * Route for:
         * - GET  `/channels/{channel.id}/invites`
         * - POST `/channels/{channel.id}/invites`
         */
        channelInvites(channelId) {
          return `/channels/${channelId}/invites`;
        },
        /**
         * Route for:
         * - POST `/channels/{channel.id}/followers`
         */
        channelFollowers(channelId) {
          return `/channels/${channelId}/followers`;
        },
        /**
         * Route for:
         * - POST `/channels/{channel.id}/typing`
         */
        channelTyping(channelId) {
          return `/channels/${channelId}/typing`;
        },
        /**
         * Route for:
         * - GET `/channels/{channel.id}/pins`
         */
        channelPins(channelId) {
          return `/channels/${channelId}/pins`;
        },
        /**
         * Route for:
         * - PUT    `/channels/{channel.id}/pins/{message.id}`
         * - DELETE `/channels/{channel.id}/pins/{message.id}`
         */
        channelPin(channelId, messageId) {
          return `/channels/${channelId}/pins/${messageId}`;
        },
        /**
         * Route for:
         * - PUT    `/channels/{channel.id}/recipients/{user.id}`
         * - DELETE `/channels/{channel.id}/recipients/{user.id}`
         */
        channelRecipient(channelId, userId) {
          return `/channels/${channelId}/recipients/${userId}`;
        },
        /**
         * Route for:
         * - GET  `/guilds/{guild.id}/emojis`
         * - POST `/guilds/{guild.id}/emojis`
         */
        guildEmojis(guildId) {
          return `/guilds/${guildId}/emojis`;
        },
        /**
         * Route for:
         * - GET    `/guilds/{guild.id}/emojis/{emoji.id}`
         * - PATCH  `/guilds/{guild.id}/emojis/{emoji.id}`
         * - DELETE `/guilds/{guild.id}/emojis/{emoji.id}`
         */
        guildEmoji(guildId, emojiId) {
          return `/guilds/${guildId}/emojis/${emojiId}`;
        },
        /**
         * Route for:
         * - POST `/guilds`
         */
        guilds() {
          return "/guilds";
        },
        /**
         * Route for:
         * - GET    `/guilds/{guild.id}`
         * - PATCH  `/guilds/{guild.id}`
         * - DELETE `/guilds/{guild.id}`
         */
        guild(guildId) {
          return `/guilds/${guildId}`;
        },
        /**
         * Route for:
         * - GET `/guilds/{guild.id}/preview`
         */
        guildPreview(guildId) {
          return `/guilds/${guildId}/preview`;
        },
        /**
         * Route for:
         * - GET   `/guilds/{guild.id}/channels`
         * - POST  `/guilds/{guild.id}/channels`
         * - PATCH `/guilds/{guild.id}/channels`
         */
        guildChannels(guildId) {
          return `/guilds/${guildId}/channels`;
        },
        /**
         * Route for:
         * - GET    `/guilds/{guild.id}/members/{user.id}`
         * - PUT    `/guilds/{guild.id}/members/{user.id}`
         * - PATCH  `/guilds/{guild.id}/members/@me`
         * - PATCH  `/guilds/{guild.id}/members/{user.id}`
         * - DELETE `/guilds/{guild.id}/members/{user.id}`
         */
        guildMember(guildId, userId = "@me") {
          return `/guilds/${guildId}/members/${userId}`;
        },
        /**
         * Route for:
         * - GET `/guilds/{guild.id}/members`
         */
        guildMembers(guildId) {
          return `/guilds/${guildId}/members`;
        },
        /**
         * Route for:
         * - GET `/guilds/{guild.id}/members/search`
         */
        guildMembersSearch(guildId) {
          return `/guilds/${guildId}/members/search`;
        },
        /**
         * Route for:
         * - PATCH `/guilds/{guild.id}/members/@me/nick`
         *
         * @deprecated Use {@link Routes.guildMember} instead.
         */
        guildCurrentMemberNickname(guildId) {
          return `/guilds/${guildId}/members/@me/nick`;
        },
        /**
         * Route for:
         * - PUT    `/guilds/{guild.id}/members/{user.id}/roles/{role.id}`
         * - DELETE `/guilds/{guild.id}/members/{user.id}/roles/{role.id}`
         */
        guildMemberRole(guildId, memberId, roleId) {
          return `/guilds/${guildId}/members/${memberId}/roles/${roleId}`;
        },
        /**
         * Route for:
         * - POST `/guilds/{guild.id}/mfa`
         */
        guildMFA(guildId) {
          return `/guilds/${guildId}/mfa`;
        },
        /**
         * Route for:
         * - GET `/guilds/{guild.id}/bans`
         */
        guildBans(guildId) {
          return `/guilds/${guildId}/bans`;
        },
        /**
         * Route for:
         * - GET    `/guilds/{guild.id}/bans/{user.id}`
         * - PUT    `/guilds/{guild.id}/bans/{user.id}`
         * - DELETE `/guilds/{guild.id}/bans/{user.id}`
         */
        guildBan(guildId, userId) {
          return `/guilds/${guildId}/bans/${userId}`;
        },
        /**
         * Route for:
         * - GET   `/guilds/{guild.id}/roles`
         * - POST  `/guilds/{guild.id}/roles`
         * - PATCH `/guilds/{guild.id}/roles`
         */
        guildRoles(guildId) {
          return `/guilds/${guildId}/roles`;
        },
        /**
         * Route for:
         * - PATCH  `/guilds/{guild.id}/roles/{role.id}`
         * - DELETE `/guilds/{guild.id}/roles/{role.id}`
         */
        guildRole(guildId, roleId) {
          return `/guilds/${guildId}/roles/${roleId}`;
        },
        /**
         * Route for:
         * - GET  `/guilds/{guild.id}/prune`
         * - POST `/guilds/{guild.id}/prune`
         */
        guildPrune(guildId) {
          return `/guilds/${guildId}/prune`;
        },
        /**
         * Route for:
         * - GET `/guilds/{guild.id}/regions`
         */
        guildVoiceRegions(guildId) {
          return `/guilds/${guildId}/regions`;
        },
        /**
         * Route for:
         * - GET `/guilds/{guild.id}/invites`
         */
        guildInvites(guildId) {
          return `/guilds/${guildId}/invites`;
        },
        /**
         * Route for:
         * - GET  `/guilds/{guild.id}/integrations`
         */
        guildIntegrations(guildId) {
          return `/guilds/${guildId}/integrations`;
        },
        /**
         * Route for:
         * - DELETE `/guilds/{guild.id}/integrations/{integration.id}`
         */
        guildIntegration(guildId, integrationId) {
          return `/guilds/${guildId}/integrations/${integrationId}`;
        },
        /**
         * Route for:
         * - GET   `/guilds/{guild.id}/widget`
         * - PATCH `/guilds/{guild.id}/widget`
         */
        guildWidgetSettings(guildId) {
          return `/guilds/${guildId}/widget`;
        },
        /**
         * Route for:
         * - GET `/guilds/{guild.id}/widget.json`
         */
        guildWidgetJSON(guildId) {
          return `/guilds/${guildId}/widget.json`;
        },
        /**
         * Route for:
         * - GET `/guilds/{guild.id}/vanity-url`
         */
        guildVanityUrl(guildId) {
          return `/guilds/${guildId}/vanity-url`;
        },
        /**
         * Route for:
         * - GET `/guilds/{guild.id}/widget.png`
         */
        guildWidgetImage(guildId) {
          return `/guilds/${guildId}/widget.png`;
        },
        /**
         * Route for:
         * - GET    `/invites/{invite.code}`
         * - DELETE `/invites/{invite.code}`
         */
        invite(code) {
          return `/invites/${code}`;
        },
        /**
         * Route for:
         * - GET  `/guilds/templates/{template.code}`
         * - POST `/guilds/templates/{template.code}`
         */
        template(code) {
          return `/guilds/templates/${code}`;
        },
        /**
         * Route for:
         * - GET  `/guilds/{guild.id}/templates`
         * - POST `/guilds/{guild.id}/templates`
         */
        guildTemplates(guildId) {
          return `/guilds/${guildId}/templates`;
        },
        /**
         * Route for:
         * - PUT    `/guilds/{guild.id}/templates/{template.code}`
         * - PATCH  `/guilds/{guild.id}/templates/{template.code}`
         * - DELETE `/guilds/{guild.id}/templates/{template.code}`
         */
        guildTemplate(guildId, code) {
          return `/guilds/${guildId}/templates/${code}`;
        },
        /**
         * Route for:
         * - POST `/channels/{channel.id}/threads`
         * - POST `/channels/{channel.id}/messages/{message.id}/threads`
         */
        threads(parentId, messageId) {
          const parts = ["", "channels", parentId];
          if (messageId)
            parts.push("messages", messageId);
          parts.push("threads");
          return parts.join("/");
        },
        /**
         * Route for:
         * - GET `/guilds/{guild.id}/threads/active`
         */
        guildActiveThreads(guildId) {
          return `/guilds/${guildId}/threads/active`;
        },
        /**
         * Route for:
         * - GET `/channels/{channel.id}/threads/archived/public`
         * - GET `/channels/{channel.id}/threads/archived/private`
         */
        channelThreads(channelId, archivedStatus) {
          return `/channels/${channelId}/threads/archived/${archivedStatus}`;
        },
        /**
         * Route for:
         * - GET `/channels/{channel.id}/users/@me/threads/archived/private`
         */
        channelJoinedArchivedThreads(channelId) {
          return `/channels/${channelId}/users/@me/threads/archived/private`;
        },
        /**
         * Route for:
         * - GET    `/channels/{thread.id}/thread-members`
         * - GET    `/channels/{thread.id}/thread-members/{user.id}`
         * - PUT    `/channels/{thread.id}/thread-members/@me`
         * - PUT    `/channels/{thread.id}/thread-members/{user.id}`
         * - DELETE `/channels/{thread.id}/thread-members/@me`
         * - DELETE `/channels/{thread.id}/thread-members/{user.id}`
         */
        threadMembers(threadId, userId) {
          const parts = ["", "channels", threadId, "thread-members"];
          if (userId)
            parts.push(userId);
          return parts.join("/");
        },
        /**
         * Route for:
         * - GET   `/users/@me`
         * - GET   `/users/{user.id}`
         * - PATCH `/users/@me`
         *
         * @param [userId] The user ID, defaulted to `@me`
         */
        user(userId = "@me") {
          return `/users/${userId}`;
        },
        /**
         * Route for:
         * - GET `/users/@me/applications/{application.id}/role-connection`
         * - PUT `/users/@me/applications/{application.id}/role-connection`
         */
        userApplicationRoleConnection(applicationId) {
          return `/users/@me/applications/${applicationId}/role-connection`;
        },
        /**
         * Route for:
         * - GET `/users/@me/guilds`
         */
        userGuilds() {
          return `/users/@me/guilds`;
        },
        /**
         * Route for:
         * - GET `/users/@me/guilds/{guild.id}/member`
         */
        userGuildMember(guildId) {
          return `/users/@me/guilds/${guildId}/member`;
        },
        /**
         * Route for:
         * - DELETE `/users/@me/guilds/{guild.id}`
         */
        userGuild(guildId) {
          return `/users/@me/guilds/${guildId}`;
        },
        /**
         * Route for:
         * - POST `/users/@me/channels`
         */
        userChannels() {
          return `/users/@me/channels`;
        },
        /**
         * Route for:
         * - GET `/users/@me/connections`
         */
        userConnections() {
          return `/users/@me/connections`;
        },
        /**
         * Route for:
         * - GET `/voice/regions`
         */
        voiceRegions() {
          return `/voice/regions`;
        },
        /**
         * Route for:
         * - GET  `/channels/{channel.id}/webhooks`
         * - POST `/channels/{channel.id}/webhooks`
         */
        channelWebhooks(channelId) {
          return `/channels/${channelId}/webhooks`;
        },
        /**
         * Route for:
         * - GET `/guilds/{guild.id}/webhooks`
         */
        guildWebhooks(guildId) {
          return `/guilds/${guildId}/webhooks`;
        },
        /**
         * Route for:
         * - GET    `/webhooks/{webhook.id}`
         * - GET    `/webhooks/{webhook.id}/{webhook.token}`
         * - PATCH  `/webhooks/{webhook.id}`
         * - PATCH  `/webhooks/{webhook.id}/{webhook.token}`
         * - DELETE `/webhooks/{webhook.id}`
         * - DELETE `/webhooks/{webhook.id}/{webhook.token}`
         * - POST   `/webhooks/{webhook.id}/{webhook.token}`
         *
         * - POST   `/webhooks/{application.id}/{interaction.token}`
         */
        webhook(webhookId, webhookToken) {
          const parts = ["", "webhooks", webhookId];
          if (webhookToken)
            parts.push(webhookToken);
          return parts.join("/");
        },
        /**
         * Route for:
         * - GET    `/webhooks/{webhook.id}/{webhook.token}/messages/@original`
         * - GET    `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`
         * - PATCH  `/webhooks/{webhook.id}/{webhook.token}/messages/@original`
         * - PATCH  `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`
         * - DELETE `/webhooks/{webhook.id}/{webhook.token}/messages/@original`
         * - DELETE `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`
         *
         * - PATCH  `/webhooks/{application.id}/{interaction.token}/messages/@original`
         * - PATCH  `/webhooks/{application.id}/{interaction.token}/messages/{message.id}`
         * - DELETE `/webhooks/{application.id}/{interaction.token}/messages/{message.id}`
         */
        webhookMessage(webhookId, webhookToken, messageId = "@original") {
          return `/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`;
        },
        /**
         * Route for:
         * - POST `/webhooks/{webhook.id}/{webhook.token}/github`
         * - POST `/webhooks/{webhook.id}/{webhook.token}/slack`
         */
        webhookPlatform(webhookId, webhookToken, platform) {
          return `/webhooks/${webhookId}/${webhookToken}/${platform}`;
        },
        /**
         * Route for:
         * - GET `/gateway`
         */
        gateway() {
          return `/gateway`;
        },
        /**
         * Route for:
         * - GET `/gateway/bot`
         */
        gatewayBot() {
          return `/gateway/bot`;
        },
        /**
         * Route for:
         * - GET `/oauth2/applications/@me`
         */
        oauth2CurrentApplication() {
          return `/oauth2/applications/@me`;
        },
        /**
         * Route for:
         * - GET `/oauth2/@me`
         */
        oauth2CurrentAuthorization() {
          return `/oauth2/@me`;
        },
        /**
         * Route for:
         * - GET `/oauth2/authorize`
         */
        oauth2Authorization() {
          return `/oauth2/authorize`;
        },
        /**
         * Route for:
         * - POST `/oauth2/token`
         */
        oauth2TokenExchange() {
          return `/oauth2/token`;
        },
        /**
         * Route for:
         * - POST `/oauth2/token/revoke`
         */
        oauth2TokenRevocation() {
          return `/oauth2/token/revoke`;
        },
        /**
         * Route for:
         * - GET  `/applications/{application.id}/commands`
         * - PUT  `/applications/{application.id}/commands`
         * - POST `/applications/{application.id}/commands`
         */
        applicationCommands(applicationId) {
          return `/applications/${applicationId}/commands`;
        },
        /**
         * Route for:
         * - GET    `/applications/{application.id}/commands/{command.id}`
         * - PATCH  `/applications/{application.id}/commands/{command.id}`
         * - DELETE `/applications/{application.id}/commands/{command.id}`
         */
        applicationCommand(applicationId, commandId) {
          return `/applications/${applicationId}/commands/${commandId}`;
        },
        /**
         * Route for:
         * - GET  `/applications/{application.id}/guilds/{guild.id}/commands`
         * - PUT  `/applications/{application.id}/guilds/{guild.id}/commands`
         * - POST `/applications/{application.id}/guilds/{guild.id}/commands`
         */
        applicationGuildCommands(applicationId, guildId) {
          return `/applications/${applicationId}/guilds/${guildId}/commands`;
        },
        /**
         * Route for:
         * - GET    `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`
         * - PATCH  `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`
         * - DELETE `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`
         */
        applicationGuildCommand(applicationId, guildId, commandId) {
          return `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`;
        },
        /**
         * Route for:
         * - POST `/interactions/{interaction.id}/{interaction.token}/callback`
         */
        interactionCallback(interactionId, interactionToken) {
          return `/interactions/${interactionId}/${interactionToken}/callback`;
        },
        /**
         * Route for:
         * - GET   `/guilds/{guild.id}/member-verification`
         * - PATCH `/guilds/{guild.id}/member-verification`
         */
        guildMemberVerification(guildId) {
          return `/guilds/${guildId}/member-verification`;
        },
        /**
         * Route for:
         * - PATCH `/guilds/{guild.id}/voice-states/@me`
         * - PATCH `/guilds/{guild.id}/voice-states/{user.id}`
         */
        guildVoiceState(guildId, userId = "@me") {
          return `/guilds/${guildId}/voice-states/${userId}`;
        },
        /**
         * Route for:
         * - GET `/applications/{application.id}/guilds/{guild.id}/commands/permissions`
         * - PUT `/applications/{application.id}/guilds/{guild.id}/commands/permissions`
         */
        guildApplicationCommandsPermissions(applicationId, guildId) {
          return `/applications/${applicationId}/guilds/${guildId}/commands/permissions`;
        },
        /**
         * Route for:
         * - GET `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions`
         * - PUT `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions`
         */
        applicationCommandPermissions(applicationId, guildId, commandId) {
          return `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}/permissions`;
        },
        /**
         * Route for:
         * - GET   `/guilds/{guild.id}/welcome-screen`
         * - PATCH `/guilds/{guild.id}/welcome-screen`
         */
        guildWelcomeScreen(guildId) {
          return `/guilds/${guildId}/welcome-screen`;
        },
        /**
         * Route for:
         * - POST `/stage-instances`
         */
        stageInstances() {
          return `/stage-instances`;
        },
        /**
         * Route for:
         * - GET `/stage-instances/{channel.id}`
         * - PATCH `/stage-instances/{channel.id}`
         * - DELETE `/stage-instances/{channel.id}`
         */
        stageInstance(channelId) {
          return `/stage-instances/${channelId}`;
        },
        /**
         * Route for:
         * - GET `/stickers/{sticker.id}`
         */
        sticker(stickerId) {
          return `/stickers/${stickerId}`;
        },
        /**
         * Route for:
         * - GET `/sticker-packs`
         */
        stickerPacks() {
          return "/sticker-packs";
        },
        /**
         * Route for:
         * - GET `/sticker-packs`
         *
         * @deprecated Use {@link Routes.stickerPacks} instead.
         */
        nitroStickerPacks() {
          return "/sticker-packs";
        },
        /**
         * Route for:
         * - GET  `/guilds/{guild.id}/stickers`
         * - POST `/guilds/{guild.id}/stickers`
         */
        guildStickers(guildId) {
          return `/guilds/${guildId}/stickers`;
        },
        /**
         * Route for:
         * - GET    `/guilds/{guild.id}/stickers/{sticker.id}`
         * - PATCH  `/guilds/{guild.id}/stickers/{sticker.id}`
         * - DELETE `/guilds/{guild.id}/stickers/{sticker.id}`
         */
        guildSticker(guildId, stickerId) {
          return `/guilds/${guildId}/stickers/${stickerId}`;
        },
        /**
         * Route for:
         * - GET  `/guilds/{guild.id}/scheduled-events`
         * - POST `/guilds/{guild.id}/scheduled-events`
         */
        guildScheduledEvents(guildId) {
          return `/guilds/${guildId}/scheduled-events`;
        },
        /**
         * Route for:
         * - GET  `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`
         * - PATCH `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`
         * - DELETE `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`
         */
        guildScheduledEvent(guildId, guildScheduledEventId) {
          return `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}`;
        },
        /**
         * Route for:
         * - GET `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}/users`
         */
        guildScheduledEventUsers(guildId, guildScheduledEventId) {
          return `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}/users`;
        },
        /**
         * Route for:
         * - GET `/guilds/${guild.id}/onboarding`
         * - PUT `/guilds/${guild.id}/onboarding`
         */
        guildOnboarding(guildId) {
          return `/guilds/${guildId}/onboarding`;
        },
        /**
         * Route for:
         * - GET `/applications/@me`
         * - PATCH `/applications/@me`
         */
        currentApplication() {
          return "/applications/@me";
        },
        /**
         * Route for:
         * - GET `/applications/{application.id}/entitlements`
         * - POST `/applications/{application.id}/entitlements`
         */
        entitlements(applicationId) {
          return `/applications/${applicationId}/entitlements`;
        },
        /**
         * Route for:
         * - DELETE `/applications/{application.id}/entitlements/{entitlement.id}`
         */
        entitlement(applicationId, entitlementId) {
          return `/applications/${applicationId}/entitlements/${entitlementId}`;
        },
        /**
         * Route for:
         * - GET `/applications/{application.id}/skus`
         */
        skus(applicationId) {
          return `/applications/${applicationId}/skus`;
        }
      };
      exports.StickerPackApplicationId = "710982414301790216";
      exports.CDNRoutes = {
        /**
         * Route for:
         * - GET `/emojis/{emoji.id}.{png|jpeg|webp|gif}`
         *
         * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
         *
         * This route supports the extensions: PNG, JPEG, WebP, GIF
         */
        emoji(emojiId, format) {
          return `/emojis/${emojiId}.${format}`;
        },
        /**
         * Route for:
         * - GET `/guilds/{guild.id}/icons/{guild.id}.{png|jpeg|webp|gif}`
         *
         * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
         *
         * This route supports the extensions: PNG, JPEG, WebP, GIF
         */
        guildIcon(guildId, guildIcon, format) {
          return `icons/${guildId}/${guildIcon}.${format}`;
        },
        /**
         * Route for:
         * - GET `/splashes/{guild.id}/{guild.splash}.{png|jpeg|webp}`
         *
         * This route supports the extensions: PNG, JPEG, WebP
         */
        guildSplash(guildId, guildSplash, format) {
          return `/splashes/${guildId}/${guildSplash}.${format}`;
        },
        /**
         * Route for:
         * - GET `/discovery-splashes/{guild.id}/{guild.discovery_splash}.{png|jpeg|webp}`
         *
         * This route supports the extensions: PNG, JPEG, WebP
         */
        guildDiscoverySplash(guildId, guildDiscoverySplash, format) {
          return `/discovery-splashes/${guildId}/${guildDiscoverySplash}.${format}`;
        },
        /**
         * Route for:
         * - GET `/banners/{guild.id}/{guild.banner}.{png|jpeg|webp|gif}`
         *
         * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
         *
         * This route supports the extensions: PNG, JPEG, WebP, GIF
         */
        guildBanner(guildId, guildBanner, format) {
          return `/banners/${guildId}/${guildBanner}.${format}`;
        },
        /**
         * Route for:
         * - GET `/banners/{user.id}/{user.banner}.{png|jpeg|webp|gif}`
         *
         * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
         *
         * This route supports the extensions: PNG, JPEG, WebP, GIF
         */
        userBanner(userId, userBanner, format) {
          return `/banners/${userId}/${userBanner}.${format}`;
        },
        /**
         * Route for:
         * - GET `/embed/avatars/{index}.png`
         *
         * The value for `index` parameter depends on whether the user is [migrated to the new username system](https://discord.com/developers/docs/change-log#unique-usernames-on-discord).
         * For users on the new username system, `index` will be `(user.id >> 22) % 6`.
         * For users on the legacy username system, `index` will be `user.discriminator % 5`.
         *
         * This route supports the extension: PNG
         */
        defaultUserAvatar(index) {
          return `/embed/avatars/${index}.png`;
        },
        /**
         * Route for:
         * - GET `/avatars/{user.id}/{user.avatar}.{png|jpeg|webp|gif}`
         *
         * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
         *
         * This route supports the extensions: PNG, JPEG, WebP, GIF
         */
        userAvatar(userId, userAvatar, format) {
          return `/avatars/${userId}/${userAvatar}.${format}`;
        },
        /**
         * Route for:
         * - GET `/guilds/{guild.id}/users/{user.id}/{guild_member.avatar}.{png|jpeg|webp|gif}`
         *
         * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format
         *
         * This route supports the extensions: PNG, JPEG, WebP, GIF
         */
        guildMemberAvatar(guildId, userId, memberAvatar, format) {
          return `/guilds/${guildId}/users/${userId}/avatars/${memberAvatar}.${format}`;
        },
        /**
         * Route for:
         * - GET `/avatar-decorations/{user.id}/{user.avatar_decoration}.png`
         *
         * This route supports the extension: PNG
         */
        userAvatarDecoration(userId, userAvatarDecoration) {
          return `/avatar-decorations/${userId}/${userAvatarDecoration}.png`;
        },
        /**
         * Route for:
         * - GET `/app-icons/{application.id}/{application.icon}.{png|jpeg|webp}`
         *
         * This route supports the extensions: PNG, JPEG, WebP
         */
        applicationIcon(applicationId, applicationIcon, format) {
          return `/app-icons/${applicationId}/${applicationIcon}.${format}`;
        },
        /**
         * Route for:
         * - GET `/app-icons/{application.id}/{application.cover_image}.{png|jpeg|webp}`
         *
         * This route supports the extensions: PNG, JPEG, WebP
         */
        applicationCover(applicationId, applicationCoverImage, format) {
          return `/app-icons/${applicationId}/${applicationCoverImage}.${format}`;
        },
        /**
         * Route for:
         * - GET `/app-assets/{application.id}/{application.asset_id}.{png|jpeg|webp}`
         *
         * This route supports the extensions: PNG, JPEG, WebP
         */
        applicationAsset(applicationId, applicationAssetId, format) {
          return `/app-assets/${applicationId}/${applicationAssetId}.${format}`;
        },
        /**
         * Route for:
         * - GET `/app-assets/{application.id}/achievements/{achievement.id}/icons/{achievement.icon}.{png|jpeg|webp}`
         *
         * This route supports the extensions: PNG, JPEG, WebP
         */
        achievementIcon(applicationId, achievementId, achievementIconHash, format) {
          return `/app-assets/${applicationId}/achievements/${achievementId}/icons/${achievementIconHash}.${format}`;
        },
        /**
         * Route for:
         * - GET `/app-assets/710982414301790216/store/{sticker_pack.banner.asset_id}.{png|jpeg|webp}`
         *
         * This route supports the extensions: PNG, JPEG, WebP
         */
        stickerPackBanner(stickerPackBannerAssetId, format) {
          return `/app-assets/${exports.StickerPackApplicationId}/store/${stickerPackBannerAssetId}.${format}`;
        },
        /**
         * Route for:
         * - GET `/app-assets/${application.id}/store/${asset.id}.{png|jpeg|webp}}`
         *
         * This route supports the extensions: PNG, JPEG, WebP
         */
        storePageAsset(applicationId, assetId) {
          return `/app-assets/${applicationId}/store/${assetId}.png`;
        },
        /**
         * Route for:
         * - GET `team-icons/{team.id}/{team.icon}.{png|jpeg|webp}`
         *
         * This route supports the extensions: PNG, JPEG, WebP
         */
        teamIcon(teamId, teamIcon, format) {
          return `/team-icons/${teamId}/${teamIcon}.${format}`;
        },
        /**
         * Route for:
         * - GET `/stickers/{sticker.id}.{png|json}`
         *
         * This route supports the extensions: PNG, Lottie, GIF
         */
        sticker(stickerId, format) {
          return `/stickers/${stickerId}.${format}`;
        },
        /**
         * Route for:
         * - GET `/role-icons/{role.id}/{role.icon}.{png|jpeg|webp}`
         *
         * This route supports the extensions: PNG, JPEG, WebP
         */
        roleIcon(roleId, roleIcon, format) {
          return `/role-icons/${roleId}/${roleIcon}.${format}`;
        },
        /**
         * Route for:
         * - GET `/guild-events/{guild_scheduled_event.id}/{guild_scheduled_event.image}.{png|jpeg|webp}`
         *
         * This route supports the extensions: PNG, JPEG, WebP
         */
        guildScheduledEventCover(guildScheduledEventId, guildScheduledEventCoverImage, format) {
          return `/guild-events/${guildScheduledEventId}/${guildScheduledEventCoverImage}.${format}`;
        },
        /**
         * Route for:
         * - GET `/guilds/${guild.id}/users/${user.id}/banners/${guild_member.banner}.{png|jpeg|webp|gif}`
         *
         * This route supports the extensions: PNG, JPEG, WebP, GIF
         */
        guildMemberBanner(guildId, userId, guildMemberBanner, format) {
          return `/guilds/${guildId}/users/${userId}/banners/${guildMemberBanner}.${format}`;
        }
      };
      (function(ImageFormat3) {
        ImageFormat3["JPEG"] = "jpeg";
        ImageFormat3["PNG"] = "png";
        ImageFormat3["WebP"] = "webp";
        ImageFormat3["GIF"] = "gif";
        ImageFormat3["Lottie"] = "json";
      })(exports.ImageFormat || (exports.ImageFormat = {}));
      exports.RouteBases = {
        api: `https://discord.com/api/v${exports.APIVersion}`,
        cdn: "https://cdn.discordapp.com",
        invite: "https://discord.gg",
        template: "https://discord.new",
        gift: "https://discord.gift",
        scheduledEvent: "https://discord.com/events"
      };
      Object.freeze(exports.RouteBases);
      exports.OAuth2Routes = {
        authorizationURL: `${exports.RouteBases.api}${exports.Routes.oauth2Authorization()}`,
        tokenURL: `${exports.RouteBases.api}${exports.Routes.oauth2TokenExchange()}`,
        /**
         * See https://tools.ietf.org/html/rfc7009
         */
        tokenRevocationURL: `${exports.RouteBases.api}${exports.Routes.oauth2TokenRevocation()}`
      };
      Object.freeze(exports.OAuth2Routes);
    }
  });

  // ../../node_modules/discord-api-types/rpc/common.js
  var require_common4 = __commonJS({
    "../../node_modules/discord-api-types/rpc/common.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.RPCCloseEventCodes = exports.RPCErrorCodes = void 0;
      (function(RPCErrorCodes3) {
        RPCErrorCodes3[RPCErrorCodes3["UnknownError"] = 1e3] = "UnknownError";
        RPCErrorCodes3[RPCErrorCodes3["InvalidPayload"] = 4e3] = "InvalidPayload";
        RPCErrorCodes3[RPCErrorCodes3["InvalidCommand"] = 4002] = "InvalidCommand";
        RPCErrorCodes3[RPCErrorCodes3["InvalidGuild"] = 4003] = "InvalidGuild";
        RPCErrorCodes3[RPCErrorCodes3["InvalidEvent"] = 4004] = "InvalidEvent";
        RPCErrorCodes3[RPCErrorCodes3["InvalidChannel"] = 4005] = "InvalidChannel";
        RPCErrorCodes3[RPCErrorCodes3["InvalidPermissions"] = 4006] = "InvalidPermissions";
        RPCErrorCodes3[RPCErrorCodes3["InvalidClientId"] = 4007] = "InvalidClientId";
        RPCErrorCodes3[RPCErrorCodes3["InvalidOrigin"] = 4008] = "InvalidOrigin";
        RPCErrorCodes3[RPCErrorCodes3["InvalidToken"] = 4009] = "InvalidToken";
        RPCErrorCodes3[RPCErrorCodes3["InvalidUser"] = 4010] = "InvalidUser";
        RPCErrorCodes3[RPCErrorCodes3["OAuth2Error"] = 5e3] = "OAuth2Error";
        RPCErrorCodes3[RPCErrorCodes3["SelectChannelTimedOut"] = 5001] = "SelectChannelTimedOut";
        RPCErrorCodes3[RPCErrorCodes3["GetGuildTimedOut"] = 5002] = "GetGuildTimedOut";
        RPCErrorCodes3[RPCErrorCodes3["SelectVoiceForceRequired"] = 5003] = "SelectVoiceForceRequired";
        RPCErrorCodes3[RPCErrorCodes3["CaptureShortcutAlreadyListening"] = 5004] = "CaptureShortcutAlreadyListening";
      })(exports.RPCErrorCodes || (exports.RPCErrorCodes = {}));
      (function(RPCCloseEventCodes3) {
        RPCCloseEventCodes3[RPCCloseEventCodes3["InvalidClientId"] = 4e3] = "InvalidClientId";
        RPCCloseEventCodes3[RPCCloseEventCodes3["InvalidOrigin"] = 4001] = "InvalidOrigin";
        RPCCloseEventCodes3[RPCCloseEventCodes3["RateLimited"] = 4002] = "RateLimited";
        RPCCloseEventCodes3[RPCCloseEventCodes3["TokenRevoked"] = 4003] = "TokenRevoked";
        RPCCloseEventCodes3[RPCCloseEventCodes3["InvalidVersion"] = 4004] = "InvalidVersion";
        RPCCloseEventCodes3[RPCCloseEventCodes3["InvalidEncoding"] = 4005] = "InvalidEncoding";
      })(exports.RPCCloseEventCodes || (exports.RPCCloseEventCodes = {}));
    }
  });

  // ../../node_modules/discord-api-types/rpc/v10.js
  var require_v104 = __commonJS({
    "../../node_modules/discord-api-types/rpc/v10.js"(exports) {
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_common4(), exports);
    }
  });

  // ../../node_modules/discord-api-types/utils/v10.js
  var require_v105 = __commonJS({
    "../../node_modules/discord-api-types/utils/v10.js"(exports) {
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isContextMenuApplicationCommandInteraction = exports.isChatInputApplicationCommandInteraction = exports.isMessageComponentSelectMenuInteraction = exports.isMessageComponentButtonInteraction = exports.isMessageComponentInteraction = exports.isInteractionButton = exports.isLinkButton = exports.isMessageComponentGuildInteraction = exports.isMessageComponentDMInteraction = exports.isApplicationCommandGuildInteraction = exports.isApplicationCommandDMInteraction = exports.isGuildInteraction = exports.isDMInteraction = void 0;
      var index_1 = require_v102();
      function isDMInteraction(interaction) {
        return Reflect.has(interaction, "user");
      }
      __name(isDMInteraction, "isDMInteraction");
      exports.isDMInteraction = isDMInteraction;
      function isGuildInteraction(interaction) {
        return Reflect.has(interaction, "guild_id");
      }
      __name(isGuildInteraction, "isGuildInteraction");
      exports.isGuildInteraction = isGuildInteraction;
      function isApplicationCommandDMInteraction(interaction) {
        return isDMInteraction(interaction);
      }
      __name(isApplicationCommandDMInteraction, "isApplicationCommandDMInteraction");
      exports.isApplicationCommandDMInteraction = isApplicationCommandDMInteraction;
      function isApplicationCommandGuildInteraction(interaction) {
        return isGuildInteraction(interaction);
      }
      __name(isApplicationCommandGuildInteraction, "isApplicationCommandGuildInteraction");
      exports.isApplicationCommandGuildInteraction = isApplicationCommandGuildInteraction;
      function isMessageComponentDMInteraction(interaction) {
        return isDMInteraction(interaction);
      }
      __name(isMessageComponentDMInteraction, "isMessageComponentDMInteraction");
      exports.isMessageComponentDMInteraction = isMessageComponentDMInteraction;
      function isMessageComponentGuildInteraction(interaction) {
        return isGuildInteraction(interaction);
      }
      __name(isMessageComponentGuildInteraction, "isMessageComponentGuildInteraction");
      exports.isMessageComponentGuildInteraction = isMessageComponentGuildInteraction;
      function isLinkButton(component) {
        return component.style === index_1.ButtonStyle.Link;
      }
      __name(isLinkButton, "isLinkButton");
      exports.isLinkButton = isLinkButton;
      function isInteractionButton(component) {
        return component.style !== index_1.ButtonStyle.Link;
      }
      __name(isInteractionButton, "isInteractionButton");
      exports.isInteractionButton = isInteractionButton;
      function isMessageComponentInteraction(interaction) {
        return interaction.type === index_1.InteractionType.MessageComponent;
      }
      __name(isMessageComponentInteraction, "isMessageComponentInteraction");
      exports.isMessageComponentInteraction = isMessageComponentInteraction;
      function isMessageComponentButtonInteraction(interaction) {
        return interaction.data.component_type === index_1.ComponentType.Button;
      }
      __name(isMessageComponentButtonInteraction, "isMessageComponentButtonInteraction");
      exports.isMessageComponentButtonInteraction = isMessageComponentButtonInteraction;
      function isMessageComponentSelectMenuInteraction(interaction) {
        return [
          index_1.ComponentType.StringSelect,
          index_1.ComponentType.UserSelect,
          index_1.ComponentType.RoleSelect,
          index_1.ComponentType.MentionableSelect,
          index_1.ComponentType.ChannelSelect
        ].includes(interaction.data.component_type);
      }
      __name(isMessageComponentSelectMenuInteraction, "isMessageComponentSelectMenuInteraction");
      exports.isMessageComponentSelectMenuInteraction = isMessageComponentSelectMenuInteraction;
      function isChatInputApplicationCommandInteraction(interaction) {
        return interaction.data.type === index_1.ApplicationCommandType.ChatInput;
      }
      __name(isChatInputApplicationCommandInteraction, "isChatInputApplicationCommandInteraction");
      exports.isChatInputApplicationCommandInteraction = isChatInputApplicationCommandInteraction;
      function isContextMenuApplicationCommandInteraction(interaction) {
        return interaction.data.type === index_1.ApplicationCommandType.Message || interaction.data.type === index_1.ApplicationCommandType.User;
      }
      __name(isContextMenuApplicationCommandInteraction, "isContextMenuApplicationCommandInteraction");
      exports.isContextMenuApplicationCommandInteraction = isContextMenuApplicationCommandInteraction;
    }
  });

  // ../../node_modules/discord-api-types/v10.js
  var require_v106 = __commonJS({
    "../../node_modules/discord-api-types/v10.js"(exports) {
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Utils = void 0;
      __exportStar(require_v10(), exports);
      __exportStar(require_globals(), exports);
      __exportStar(require_v102(), exports);
      __exportStar(require_v103(), exports);
      __exportStar(require_v104(), exports);
      exports.Utils = require_v105();
    }
  });

  // ../../node_modules/discord-api-types/v10.mjs
  var import_v10 = __toESM(require_v106(), 1);
  import_v10.default.APIApplicationCommandPermissionsConstant;
  import_v10.default.APIVersion;
  import_v10.default.ActivityFlags;
  import_v10.default.ActivityPlatform;
  import_v10.default.ActivityType;
  import_v10.default.AllowedMentionsTypes;
  var ApplicationCommandOptionType = import_v10.default.ApplicationCommandOptionType;
  import_v10.default.ApplicationCommandPermissionType;
  var ApplicationCommandType = import_v10.default.ApplicationCommandType;
  import_v10.default.ApplicationFlags;
  import_v10.default.ApplicationRoleConnectionMetadataType;
  import_v10.default.AttachmentFlags;
  import_v10.default.AuditLogEvent;
  import_v10.default.AuditLogOptionsType;
  import_v10.default.AutoModerationActionType;
  import_v10.default.AutoModerationRuleEventType;
  import_v10.default.AutoModerationRuleKeywordPresetType;
  import_v10.default.AutoModerationRuleTriggerType;
  import_v10.default.ButtonStyle;
  import_v10.default.CDNRoutes;
  import_v10.default.ChannelFlags;
  import_v10.default.ChannelType;
  import_v10.default.ComponentType;
  import_v10.default.ConnectionService;
  import_v10.default.ConnectionVisibility;
  import_v10.default.EmbedType;
  import_v10.default.EntitlementOwnerType;
  import_v10.default.EntitlementType;
  import_v10.default.FormattingPatterns;
  import_v10.default.ForumLayoutType;
  import_v10.default.GatewayCloseCodes;
  import_v10.default.GatewayDispatchEvents;
  import_v10.default.GatewayIntentBits;
  import_v10.default.GatewayOpcodes;
  import_v10.default.GatewayVersion;
  import_v10.default.GuildDefaultMessageNotifications;
  import_v10.default.GuildExplicitContentFilter;
  import_v10.default.GuildFeature;
  import_v10.default.GuildHubType;
  import_v10.default.GuildMFALevel;
  import_v10.default.GuildMemberFlags;
  import_v10.default.GuildNSFWLevel;
  import_v10.default.GuildOnboardingMode;
  import_v10.default.GuildOnboardingPromptType;
  import_v10.default.GuildPremiumTier;
  import_v10.default.GuildScheduledEventEntityType;
  import_v10.default.GuildScheduledEventPrivacyLevel;
  import_v10.default.GuildScheduledEventStatus;
  import_v10.default.GuildSystemChannelFlags;
  import_v10.default.GuildVerificationLevel;
  import_v10.default.GuildWidgetStyle;
  import_v10.default.ImageFormat;
  import_v10.default.IntegrationExpireBehavior;
  import_v10.default.InteractionResponseType;
  var InteractionType = import_v10.default.InteractionType;
  import_v10.default.InviteTargetType;
  import_v10.default.Locale;
  import_v10.default.MembershipScreeningFieldType;
  import_v10.default.MessageActivityType;
  import_v10.default.MessageFlags;
  import_v10.default.MessageType;
  import_v10.default.OAuth2Routes;
  import_v10.default.OAuth2Scopes;
  import_v10.default.OverwriteType;
  import_v10.default.PermissionFlagsBits;
  import_v10.default.PresenceUpdateStatus;
  import_v10.default.RESTJSONErrorCodes;
  import_v10.default.RPCCloseEventCodes;
  import_v10.default.RPCErrorCodes;
  import_v10.default.RoleFlags;
  import_v10.default.RouteBases;
  import_v10.default.Routes;
  import_v10.default.SKUFlags;
  import_v10.default.SKUType;
  import_v10.default.SelectMenuDefaultValueType;
  import_v10.default.SortOrderType;
  import_v10.default.StageInstancePrivacyLevel;
  import_v10.default.StickerFormatType;
  import_v10.default.StickerPackApplicationId;
  import_v10.default.StickerType;
  import_v10.default.TeamMemberMembershipState;
  import_v10.default.TeamMemberRole;
  import_v10.default.TextInputStyle;
  import_v10.default.ThreadAutoArchiveDuration;
  import_v10.default.ThreadMemberFlags;
  import_v10.default.UserFlags;
  import_v10.default.UserPremiumType;
  import_v10.default.Utils;
  import_v10.default.VideoQualityMode;
  import_v10.default.WebhookType;

  // src/lib/InteractionOptionResolver.ts
  var _InteractionOptionResolver = class _InteractionOptionResolver {
    constructor(interaction) {
      __publicField(this, "interaction");
      /**
       * The interaction options array
       */
      __publicField(this, "data", null);
      /**
       * The interaction resolved data
       */
      __publicField(this, "resolved", null);
      /**
       * Bottom-level options for the interaction
       * If there is a subcommand (or subcommand and group), this represents the options for the subcommand.
       */
      __publicField(this, "hoistedOptions", null);
      /**
       * The name of the subcommand group
       */
      __publicField(this, "group", null);
      /**
       * The name of the subcommand
       */
      __publicField(this, "subcommand", null);
      this.interaction = interaction;
      this.data = "options" in interaction.data ? interaction.data.options ?? null : null;
      this.resolved = "resolved" in interaction.data ? interaction.data.resolved ?? null : null;
      this.hoistedOptions = this.data;
      if (this.hoistedOptions?.[0]?.type === ApplicationCommandOptionType.SubcommandGroup) {
        this.group = this.hoistedOptions[0].name;
        this.hoistedOptions = this.hoistedOptions[0].options ?? [];
      }
      if (this.hoistedOptions?.[0]?.type === ApplicationCommandOptionType.Subcommand) {
        this.subcommand = this.hoistedOptions[0].name;
        this.hoistedOptions = this.hoistedOptions[0].options ?? [];
      }
    }
    /**
     * Gets an option by its name
     * @param name The name of the option
     * @param required Whether to throw an error if the option is not found
     */
    get(name, required = false) {
      const option = this.hoistedOptions?.find((opt) => opt.name === name);
      if (!option) {
        if (required) {
          throw new Error(`Missing required option "${name}"`);
        }
        return null;
      }
      return option;
    }
    /**
     * Gets the selected subcommand
     * @param required Whether to throw an error if there is no subcommand
     */
    getSubcommand(required = true) {
      if (required && !this.subcommand) {
        throw new Error("A subcommand was not selected");
      }
      return this.subcommand;
    }
    /**
     * Gets the selected subcommand group
     * @param required Whether to throw an error if there is no subcommand group
     */
    getSubcommandGroup(required = true) {
      if (required && !this.group) {
        throw new Error("A subcommand group was not selected");
      }
      return this.group;
    }
    /**
     * Gets a boolean option
     * @param name The name of the option
     * @param required Whether to throw an error if the option is not found
     */
    getBoolean(name, required = false) {
      const option = this.getTypedOption(name, ApplicationCommandOptionType.Boolean, required);
      return option?.value ?? null;
    }
    /**
     * Gets a channel option
     * @param name The name of the option
     * @param required Whether to throw an error if the option is not found
     */
    getChannel(name, required = false) {
      const option = this.getTypedOption(name, ApplicationCommandOptionType.Channel, required);
      return option && this.resolved && "channels" in this.resolved ? this.resolved.channels?.[option.value] ?? null : null;
    }
    /**
     * Gets a string option
     * @param name The name of the option
     * @param required Whether to throw an error if the option is not found
     */
    getString(name, required = false) {
      const option = this.getTypedOption(name, ApplicationCommandOptionType.String, required);
      return option?.value ?? null;
    }
    /**
     * Gets an integer option
     * @param name The name of the option
     * @param required Whether to throw an error if the option is not found
     */
    getInteger(name, required = false) {
      const option = this.getTypedOption(name, ApplicationCommandOptionType.Integer, required);
      return option?.value ?? null;
    }
    /**
     * Gets a number option
     * @param name The name of the option
     * @param required Whether to throw an error if the option is not found
     */
    getNumber(name, required = false) {
      const option = this.getTypedOption(name, ApplicationCommandOptionType.Number, required);
      return option?.value ?? null;
    }
    /**
     * Gets a user option
     * @param name The name of the option
     * @param required Whether to throw an error if the option is not found
     */
    getUser(name, required = false) {
      const option = this.getTypedOption(name, ApplicationCommandOptionType.User, required);
      return option && this.resolved && "users" in this.resolved ? this.resolved.users?.[option.value] ?? null : null;
    }
    /**
     * Gets a member option
     * @param name The name of the option
     * @param required Whether to throw an error if the option is not found
     */
    getMember(name, required = false) {
      const option = this.getTypedOption(name, ApplicationCommandOptionType.User, required);
      return option && this.resolved && "members" in this.resolved ? this.resolved.members?.[option.value] ?? null : null;
    }
    /**
     * Gets a role option
     * @param name The name of the option
     * @param required Whether to throw an error if the option is not found
     */
    getRole(name, required = false) {
      const option = this.getTypedOption(name, ApplicationCommandOptionType.Role, required);
      return option && this.resolved && "roles" in this.resolved ? this.resolved.roles?.[option.value] ?? null : null;
    }
    /**
     * Gets an attachment option
     * @param name The name of the option
     * @param required Whether to throw an error if the option is not found
     */
    getAttachment(name, required = false) {
      const option = this.getTypedOption(name, ApplicationCommandOptionType.Attachment, required);
      return option && this.resolved && "attachments" in this.resolved ? this.resolved.attachments?.[option.value] ?? null : null;
    }
    /**
     * Gets a mentionable option
     * @param name The name of the option
     * @param required Whether to throw an error if the option is not found
     */
    getMentionable(name, required = false) {
      const option = this.getTypedOption(name, ApplicationCommandOptionType.Mentionable, required);
      if (!option || !this.resolved) {
        return null;
      }
      if ("members" in this.resolved && this.resolved.members && option.value in this.resolved.members) {
        return this.resolved.members[option.value] ?? null;
      }
      if ("users" in this.resolved && this.resolved.users && option.value in this.resolved.users) {
        return this.resolved.users[option.value] ?? null;
      }
      if ("roles" in this.resolved && this.resolved.roles && option.value in this.resolved.roles) {
        return this.resolved.roles[option.value] ?? null;
      }
      return null;
    }
    /**
     * Gets the target user for a context menu interaction
     */
    getTargetUser() {
      if (this.interaction.type !== InteractionType.ApplicationCommand || this.interaction.data.type !== ApplicationCommandType.User) {
        throw new Error("This method can only be used on user context menu interactions");
      }
      return this.resolved.users[this.interaction.data.target_id];
    }
    /**
     * Gets the target member for a context menu interaction
     * @param required Whether to throw an error if the member data is not present
     */
    getTargetMember(required = false) {
      if (this.interaction.type !== InteractionType.ApplicationCommand || this.interaction.data.type !== ApplicationCommandType.User) {
        throw new Error("This method can only be used on user context menu interactions");
      }
      const member = this.resolved.members?.[this.interaction.data.target_id] ?? null;
      if (!member && required) {
        throw new Error("Member data is not present");
      }
      return member;
    }
    /**
     * Gets the target message for a context menu interaction
     */
    getTargetMessage() {
      if (this.interaction.type !== InteractionType.ApplicationCommand || this.interaction.data.type !== ApplicationCommandType.Message) {
        throw new Error("This method can only be used on message context menu interactions");
      }
      return this.resolved.messages[this.interaction.data.target_id];
    }
    /**
     * Gets the focused option for an autocomplete interaction
     */
    getFocusedOption() {
      if (this.interaction.type !== InteractionType.ApplicationCommandAutocomplete) {
        throw new Error("This method can only be used on autocomplete interactions");
      }
      const focusedOption = this.hoistedOptions?.find((option2) => "focused" in option2 && option2.focused);
      if (!focusedOption) {
        throw new Error("No focused option for autocomplete interaction");
      }
      const { focused, ...option } = focusedOption;
      return option;
    }
    getTypedOption(name, type, required) {
      const option = this.get(name, required);
      if (!option) {
        return null;
      } else if (option.type !== type) {
        throw new Error(`Option with name "${name}" is not of the correct type`);
      }
      return option;
    }
  };
  __name(_InteractionOptionResolver, "InteractionOptionResolver");
  var InteractionOptionResolver = _InteractionOptionResolver;

  // src/lib/limits.ts
  var ChannelLimits = {
    /**
     * Maximum characters allowed in a channel description.
     */
    MaximumDescriptionLength: 1024,
    /**
     * Maximum characters allowed in a channel name.
     */
    MaximumNameLength: 100,
    /**
     * Maximum viewers allowed per screen share.
     * @deprecated Use `VoiceChannelLimits.MaximumViewersPerScreenShare` instead.
     */
    MaximumViewersPerScreenShare: 50
  };
  var VoiceChannelLimits = {
    /**
     * Maximum viewers allowed per screen share.
     */
    MaximumViewersPerScreenShare: 50,
    /**
     * Maximum user limit of voice channel.
     */
    MaximumUserLimit: 99
  };
  var StageChannelLimits = {
    /**
     * Maximum user limit of stage channel.
     */
    MaximumUserLimit: 250
  };
  var TextChannelLimits = {
    /**
     * Maximum pins allowed in a text channel.
     */
    MaximumMessagePins: 50
  };
  var ThreadLimits = {
    /**
     * Minimum number of threads to return from the threads API.
     */
    MinimumThreadsToFetch: 1,
    /**
     * Maximum number of threads to return from the threads API.
     */
    MaximumThreadsToFetch: 100
  };
  var EmbedLimits = {
    /**
     * Maximum characters allowed in the author field of an embed.
     */
    MaximumAuthorNameLength: 256,
    /**
     * Maximum characters allowed in an embed description.
     */
    MaximumDescriptionLength: 4096,
    /**
     * Maximum characters allowed in the name of a field in an embed.
     */
    MaximumFieldNameLength: 256,
    /**
     * Maximum fields allowed in an embed.
     */
    MaximumFields: 25,
    /**
     * Maximum characters allowed in the value of a field in an embed.
     */
    MaximumFieldValueLength: 1024,
    /**
     * Maximum characters allowed in a footer of an embed.
     */
    MaximumFooterLength: 2048,
    /**
     * Maximum characters allowed in the title of an embed.
     */
    MaximumTitleLength: 256,
    /**
     * Maximum characters allowed in an embed, in total.
     */
    MaximumTotalCharacters: 6e3
  };
  var EmojiLimits = {
    /**
     * Maximum characters allowed in a custom guild emoji.
     */
    MaximumEmojiNameLength: 32,
    /**
     * Maximum size allowed for a custom guild emoji.
     * Size is in bytes, and corresponds to 256KB.
     */
    MaximumEmojiSize: 256e3
  };
  var GuildLimits = {
    /**
     * Maximum channels allowed per guild, including category channels.
     */
    MaximumChannels: 500,
    /**
     * Maximum roles allowed in a guild.
     */
    MaximumRoles: 250,
    /**
     * Maximum scheduled or active events allowed in a guild.
     */
    MaximumScheduledOrActiveEvents: 100,
    /**
     * Minimum number of user guilds to return from the user guilds API.
     */
    MinimumUserGuildsToFetch: 1,
    /**
     * Maximum number of user guilds to return from the user guilds API.
     */
    MaximumUserGuildsToFetch: 200
  };
  var GuildScheduledEventLimits = {
    /**
     * Maximum number of users to return from the guild scheduled event users API.
     */
    MaximumUsersToFetch: 100
  };
  var GuildMemberLimits = {
    /**
     * Maximum characters allowed in the display name of a guild member.
     */
    MaximumDisplayNameLength: 32,
    /**
     * Minimum number of members to return from the guild members API.
     */
    MinimumMembersToFetch: 1,
    /**
     * Maximum number of members to return from the guild members API.
     */
    MaximumMembersToFetch: 1e3
  };
  var GuildBansLimits = {
    /**
     * Minimum number of bans to return from the guild bans API.
     */
    MinimumBansToFetch: 1,
    /**
     * Maximum number of bans to return from the guild bans API.
     */
    MaximumBansToFetch: 1e3
  };
  var InteractionLimits = {
    /**
     * Maximum buttons allowed in a single action row.
     */
    MaximumButtonsPerActionRow: 5,
    /**
     * Maximum select menus allowed in a single action row.
     */
    MaximumSelectMenusPerActionRow: 1,
    /**
     * Maximum text inputs allowed in a single action row.
     */
    MaximumTextInputsPerActionRow: 1,
    /**
     * Maximum options allowed in a single select menu.
     */
    MaximumOptionsInSelectMenus: 25
  };
  var ApplicationCommandLimits = {
    /**
     * Maximum characters allowed in an application command name.
     */
    MaximumNameCharacters: 32,
    /**
     * Maximum characters allowed in an application command description.
     */
    MaximumDescriptionCharacters: 100,
    /**
     * Maximum options allowed in an application command.
     */
    MaximumOptionsLength: 25,
    /**
     * Maximum combined characters allowed in the name, description, and value properties of an application command, its options (including subcommands and groups), and choices.
     */
    MaximumCombinedCharacters: 4e3
  };
  var ApplicationCommandOptionLimits = {
    /**
     * Maximum characters allowed in the name of an option of an application command.
     */
    MaximumNameCharacters: 32,
    /**
     * Maximum characters allowed in the description of an option of an application command.
     */
    MaximumDescriptionCharacters: 100,
    /**
     * Maximum length of choices allowed in the option of an application command.
     */
    MaximumChoicesLength: 25,
    /**
     * Maximum length of string allowed in the string option of an application command.
     */
    MaximumStringLength: 6e3
  };
  var ApplicationCommandPermissionLimits = {
    /**
     * Maximum length of permissions allowed in the option of an application command.
     */
    MaximumPermissionsLength: 100
  };
  var ButtonLimits = {
    /**
     * Maximum characters allowed in a button label.
     */
    MaximumLabelCharacters: 80,
    /**
     * Maximum characters allowed in a button custom ID.
     */
    MaximumCustomIdCharacters: 100
  };
  var SelectMenuLimits = {
    /**
     * Maximum characters allowed in a select menu custom ID.
     */
    MaximumCustomIdCharacters: 100,
    /**
     * Maximum amount of options allowed in a select menu.
     */
    MaximumOptionsLength: 25,
    /**
     * Maximum characters allowed in a select menu placeholder.
     */
    MaximumPlaceholderCharacters: 150,
    /**
     * Maximum "minimum" values allowed in a select menu.
     */
    MaximumMinValuesSize: 25,
    /**
     * Maximum "maximum" values allowed in a select menu.
     */
    MaximumMaxValuesSize: 25,
    /**
     * Maximum characters allowed in a select menu option's name.
     */
    MaximumLengthOfNameOfOption: 100,
    /**
     * Maximum characters allowed in a select menu option's description.
     */
    MaximumLengthOfDescriptionOfOption: 100,
    /**
     * Maximum characters allowed in a select menu option's value.
     */
    MaximumLengthOfValueOfOption: 100
  };
  var MessageLimits = {
    /**
     * Maximum embeds allowed in a single message.
     */
    MaximumEmbeds: 10,
    /**
     * Maximum action rows allowed in a single message.
     */
    MaximumActionRows: 5,
    /**
     * Maximum characters allowed in a single message for a user.
     */
    MaximumLength: 2e3,
    /**
     * Maximum characters allowed in a single message for a nitro user.
     */
    MaximumNitroLength: 4e3,
    /**
     * Maximum numbers of reactions allowed for a message.
     */
    MaximumReactions: 20,
    /**
     * Maximum upload size for a free user in a guild of tier 1 or below, or in DMs.
     * Size is in bytes, and corresponds to 25MB.
     */
    MaximumUploadSize: 25e6,
    /**
     * Maximum upload size for a Nitro Basic user, in any guild or in DMs.
     * Size is in bytes, and corresponds to 50MB.
     */
    MaximumNitroBasicUploadSize: 5e7,
    /**
     * Maximum upload size for a Nitro user, in any guild or in DMs.
     * Size is in bytes, and corresponds to 500MB.
     */
    MaximumNitroUploadSize: 5e8,
    /**
     * Maximum upload size for a free user for all different boost levels available in a guild.
     * Sizes are in bytes, and correspond to 25MB, 25MB, 50MB, and 100MB.
     */
    MaximumUploadSizeInGuild: [25e6, 25e6, 5e7, 1e8],
    /**
     * Minimum number of messages to return from the channel messages API.
     */
    MinimumMessagesToFetch: 1,
    /**
     * Maximum number of messages to return from the channel messages API.
     */
    MaximumMessagesToFetch: 100,
    /**
     * Maximum request size when sending a messages.
     * Size is in bytes, and corresponds to 25MB.
     */
    MaximumRequestSize: 25e6,
    /**
     * Minimum number of messages to delete in a single bulk delete request.
     */
    MinimumMessagesToBulkDelete: 2,
    /**
     * Maximum number of messages to delete in a single bulk delete request.
     */
    MaximumMessagesToBulkDelete: 100
  };
  var ReactionLimits = {
    /**
     * Minimum number of reactions to fetch from the message reactions API.
     */
    MinimumReactionToFetch: 1,
    /**
     * Maximum number of reactions to fetch from the message reactions API.
     */
    MaximumReactionsToFetch: 100
  };
  var ModerationLimits = {
    /**
     * Maximum duration of a guild timeout, in seconds (corresponds to 28 days).
     */
    MaximumTimeoutDuration: 2419200
  };
  var RoleLimits = {
    /**
     * Maximum characters allowed in a role name.
     */
    MaximumNameLength: 100
  };
  var UserLimits = {
    /**
     * Maximum numbers of users in a DM group.
     */
    MaximumUsersPerDMGroup: 10,
    /**
     * Maximum characters allowed in a user's biography (the "About Me" section).
     */
    MaximumBiographyLength: 190
  };
  var AutoCompleteLimits = {
    /**
     * Maximum options allowed in a single autocomplete response.
     */
    MaximumAmountOfOptions: 25,
    /**
     * Maximum characters allowed in a select menu option's name.
     */
    MaximumLengthOfNameOfOption: 100
  };
  var ModalLimits = {
    /**
     * Maximum characters allowed in a modal custom ID.
     */
    MaximumCustomIdCharacters: 100,
    /**
     * Maximum characters allowed in a modal title.
     */
    MaximumTitleCharacters: 45,
    /**
     * Maximum components allowed in a modal.
     */
    MaximumComponents: 5
  };
  var TextInputLimits = {
    /**
     * Maximum characters allowed in a text input custom ID.
     */
    MaximumCustomIdCharacters: 100,
    /**
     * Maximum characters allowed in a text input label.
     */
    MaximumLabelCharacters: 45,
    /**
     * Maximum characters allowed in a text input placeholder.
     */
    MaximumPlaceholderCharacters: 100,
    /**
     * Maximum characters allowed in a text input value.
     */
    MaximumValueCharacters: 4e3
  };
  var ApplicationRoleConnectionLimits = {
    /**
     * Maximum application role connection metadata records an application can have.
     */
    MaximumMetadataRecords: 5,
    /**
     * Maximum characters allowed in metadata values.
     */
    MaximumMetadataValueLength: 100,
    /**
     * Maximum characters allowed in a platform name.
     */
    MaximumPlatformNameLength: 50,
    /**
     * Maximum characters allowed in a platform username.
     */
    MaximumPlatformUsernameLength: 100
  };
  var GuildAuditLogsLimits = {
    /**
     * Minimum number of entries to return from the guild audit log API.
     */
    MinimumEntriesToFetch: 1,
    /**
     * Maximum number of entries to return from the guild audit log API.
     */
    MaximumEntriesToFetch: 100
  };
  var AutoModerationRuleLimits = {
    /**
     * Maximum number of exempt roles a rule can have.
     */
    MaximumExemptRoles: 20,
    /**
     * Maximum number of exempt channels a rule can have.
     */
    MaximumExemptChannels: 50
  };
  var TriggerTypeLimits = {
    /**
     * Maximum number of keyword triggers a guild can have.
     */
    MaximumKeywordTriggersPerGuild: 6,
    /**
     * Maximum number of mention spam triggers a guild can have.
     */
    MaximumSpamTriggersPerGuild: 1,
    /**
     * Maximum number of keyword triggers a channel can have.
     */
    MaximumKeywordPresetTriggersPerChannel: 1,
    /**
     * Maximum number of mention spam triggers a channel can have.
     */
    MaximumMentionSpamTriggersPerChannel: 1
  };
  var TriggerMetadataLimits = {
    /**
     * Maximum number of substrings which will be searched for in content.
     */
    MaximumKeywordFilters: 1e3,
    /**
     * Maximum number of characters allowed in a keyword filter.
     */
    MaximumKeywordFilterLength: 60,
    /**
     * Maximum number of regular expression patterns which will be matched against content.
     */
    MaximumRegexPatterns: 10,
    /**
     * Maximum number of characters allowed in a regular expression pattern.
     */
    MaximumCharactersPerRegexPattern: 260,
    /**
     * Maximum number of substrings which should not trigger the keyword rule.
     */
    MaximumKeywordAllowListLength: 100,
    /**
     * Maximum characters per keyword that should not trigger the keyword rule.
     */
    MaximumKeywordAllowListKeywordLength: 60,
    /**
     * Maximum characters per keyword should not trigger the keyword preset rule.
     */
    MaximumKeywordPresetAllowListKeywordPresetLength: 60,
    /**
     * Maximum number of substrings which should not trigger the keyword preset rule.
     */
    MaximumKeywordPresetAllowListLength: 1e3,
    /**
     * Maximum number of unique role and user mentions allowed per message.
     */
    MaximumMentionSpamTotalMentions: 50
  };
  var ActionMetadataLimits = {
    /**
     * Maximum timeout duration in seconds.
     */
    MaximumTimeoutDurationSeconds: 2419200,
    /**
     * Maximum number of characters allowed in a custom block message.
     */
    MaximumCustomBlockMessageLength: 150
  };
  var AllowedMentionsLimits = {
    /**
     * Maximum number of users allowed in an allowed mentions object.
     */
    MaximumUsers: 100,
    /**
     * Maximum number of roles allowed in an allowed mentions object.
     */
    MaximumRoles: 100
  };
  var ChannelInviteLimits = {
    /**
     * Maximum age of an invite in seconds.
     */
    MaximumAgeSeconds: 604800,
    /**
     * Maximum number of uses allowed for an invite.
     */
    MaximumUses: 100
  };
  var GuildIntegrationLimits = {
    /**
     * Maximum number of integrations returned from the guild integrations API. Needs a more description name than "MaximumIntegrations".
     */
    MaximumIntegrationsToFetch: 50
  };
  var StickerLimits = {
    /**
     * Maximum number of characters allowed in the autocomplete/suggestion tags for the sticker.
     */
    MaximumTagsLength: 200,
    /**
     * Maximum size allowed for a sticker.
     * Size is in bytes, and corresponds to 512KB.
     */
    MaximumStickerSize: 512e3
  };

  // src/lib/regexes.ts
  var ChannelMentionRegex = /^<#(?<id>\d{17,20})>$/;
  var ChannelMessageRegex = /^(?<channelId>\d{17,20})-(?<messageId>\d{17,20})$/;
  var DiscordHostnameRegex = /(?<subdomain>\w+)\.?(?<hostname>dis(?:cord)?(?:app|merch|status)?)\.(?<tld>com|g(?:d|g|ift)|(?:de(?:sign|v))|media|new|store|net)/i;
  var DiscordInviteLinkRegex = /(?:^|\b)discord(?:(?:app)?\.com\/invite|\.gg(?:\/invite)?)\/(?<code>[\w-]{2,255})(?:$|\b)/gi;
  var EmojiRegex = /^(?:<(?<animated>a)?:(?<name>\w{2,32}):)?(?<id>\d{17,21})>?$/;
  var FormattedCustomEmoji = /<a?:\w{2,32}:\d{17,20}>/;
  var FormattedCustomEmojiWithGroups = /(?<animated>a?):(?<name>[^:]+):(?<id>\d{17,20})/;
  var HttpUrlRegex = /^https?:\/\//;
  var MessageLinkRegex = /^(?:https:\/\/)?(?:ptb\.|canary\.)?discord(?:app)?\.com\/channels\/(?<guildId>(?:\d{17,20}|@me))\/(?<channelId>\d{17,20})\/(?<messageId>\d{17,20})$/;
  var ParsedCustomEmoji = /a?:\w{2,32}:\d{17,20}/;
  var ParsedCustomEmojiWithGroups = /(?<animated>a?):(?<name>[^:]+):(?<id>\d{17,20})/;
  var RoleMentionRegex = /^<@&(?<id>\d{17,20})>$/;
  var SnowflakeRegex = /^(?<id>\d{17,20})$/;
  var TokenRegex = /(?<mfaToken>mfa\.[a-z0-9_-]{20,})|(?<basicToken>[a-z0-9_-]{23,28}\.[a-z0-9_-]{6,7}\.[a-z0-9_-]{27})/i;
  var UserOrMemberMentionRegex = /^<@!?(?<id>\d{17,20})>$/;
  var WebSocketUrlRegex = /^wss?:\/\//;
  var WebhookRegex = /(?<url>^https:\/\/(?:(?:canary|ptb).)?discord(?:app)?.com\/api(?:\/v\d+)?\/webhooks\/(?<id>\d+)\/(?<token>[\w-]+)\/?$)/;

  // src/lib/TwemojiRegex.ts
  var TwemojiRegex = /(?:\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffc-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb\udffd-\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb\udffc\udffe\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb-\udffd\udfff]|\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb-\udffe]|\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffc-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffd-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffd\udfff]|\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffe]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffc-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffc-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffd-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb\udffd-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc69\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffd\udfff]|\ud83d\udc69\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb-\udffd\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffe]|\ud83d\udc69\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb-\udffe]|\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffc-\udfff]|\ud83e\uddd1\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb\udffd-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb\udffc\udffe\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb-\udffd\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb-\udffe]|\ud83e\uddd1\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d[\udc68\udc69]|\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c[\udffc-\udfff]|\ud83e\udef1\ud83c\udffc\u200d\ud83e\udef2\ud83c[\udffb\udffd-\udfff]|\ud83e\udef1\ud83c\udffd\u200d\ud83e\udef2\ud83c[\udffb\udffc\udffe\udfff]|\ud83e\udef1\ud83c\udffe\u200d\ud83e\udef2\ud83c[\udffb-\udffd\udfff]|\ud83e\udef1\ud83c\udfff\u200d\ud83e\udef2\ud83c[\udffb-\udffe]|\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d[\udc68\udc69]|\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1|\ud83d\udc6b\ud83c[\udffb-\udfff]|\ud83d\udc6c\ud83c[\udffb-\udfff]|\ud83d\udc6d\ud83c[\udffb-\udfff]|\ud83d\udc8f\ud83c[\udffb-\udfff]|\ud83d\udc91\ud83c[\udffb-\udfff]|\ud83e\udd1d\ud83c[\udffb-\udfff]|\ud83d[\udc6b-\udc6d\udc8f\udc91]|\ud83e\udd1d)|(?:\ud83d[\udc68\udc69]|\ud83e\uddd1)(?:\ud83c[\udffb-\udfff])?\u200d(?:\u2695\ufe0f|\u2696\ufe0f|\u2708\ufe0f|\ud83c[\udf3e\udf73\udf7c\udf84\udf93\udfa4\udfa8\udfeb\udfed]|\ud83d[\udcbb\udcbc\udd27\udd2c\ude80\ude92]|\ud83e[\uddaf-\uddb3\uddbc\uddbd])|(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75]|\u26f9)((?:\ud83c[\udffb-\udfff]|\ufe0f)\u200d[\u2640\u2642]\ufe0f)|(?:\ud83c[\udfc3\udfc4\udfca]|\ud83d[\udc6e\udc70\udc71\udc73\udc77\udc81\udc82\udc86\udc87\ude45-\ude47\ude4b\ude4d\ude4e\udea3\udeb4-\udeb6]|\ud83e[\udd26\udd35\udd37-\udd39\udd3d\udd3e\uddb8\uddb9\uddcd-\uddcf\uddd4\uddd6-\udddd])(?:\ud83c[\udffb-\udfff])?\u200d[\u2640\u2642]\ufe0f|(?:\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f|\ud83c\udff3\ufe0f\u200d\ud83c\udf08|\ud83d\ude36\u200d\ud83c\udf2b\ufe0f|\u2764\ufe0f\u200d\ud83d\udd25|\u2764\ufe0f\u200d\ud83e\ude79|\ud83c\udff4\u200d\u2620\ufe0f|\ud83d\udc15\u200d\ud83e\uddba|\ud83d\udc3b\u200d\u2744\ufe0f|\ud83d\udc41\u200d\ud83d\udde8|\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc6f\u200d\u2640\ufe0f|\ud83d\udc6f\u200d\u2642\ufe0f|\ud83d\ude2e\u200d\ud83d\udca8|\ud83d\ude35\u200d\ud83d\udcab|\ud83e\udd3c\u200d\u2640\ufe0f|\ud83e\udd3c\u200d\u2642\ufe0f|\ud83e\uddde\u200d\u2640\ufe0f|\ud83e\uddde\u200d\u2642\ufe0f|\ud83e\udddf\u200d\u2640\ufe0f|\ud83e\udddf\u200d\u2642\ufe0f|\ud83d\udc08\u200d\u2b1b)|[#*0-9]\ufe0f?\u20e3|(?:[©®\u2122\u265f]\ufe0f)|(?:\ud83c[\udc04\udd70\udd71\udd7e\udd7f\ude02\ude1a\ude2f\ude37\udf21\udf24-\udf2c\udf36\udf7d\udf96\udf97\udf99-\udf9b\udf9e\udf9f\udfcd\udfce\udfd4-\udfdf\udff3\udff5\udff7]|\ud83d[\udc3f\udc41\udcfd\udd49\udd4a\udd6f\udd70\udd73\udd76-\udd79\udd87\udd8a-\udd8d\udda5\udda8\uddb1\uddb2\uddbc\uddc2-\uddc4\uddd1-\uddd3\udddc-\uddde\udde1\udde3\udde8\uddef\uddf3\uddfa\udecb\udecd-\udecf\udee0-\udee5\udee9\udef0\udef3]|[\u203c\u2049\u2139\u2194-\u2199\u21a9\u21aa\u231a\u231b\u2328\u23cf\u23ed-\u23ef\u23f1\u23f2\u23f8-\u23fa\u24c2\u25aa\u25ab\u25b6\u25c0\u25fb-\u25fe\u2600-\u2604\u260e\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262a\u262e\u262f\u2638-\u263a\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267b\u267f\u2692-\u2697\u2699\u269b\u269c\u26a0\u26a1\u26a7\u26aa\u26ab\u26b0\u26b1\u26bd\u26be\u26c4\u26c5\u26c8\u26cf\u26d1\u26d3\u26d4\u26e9\u26ea\u26f0-\u26f5\u26f8\u26fa\u26fd\u2702\u2708\u2709\u270f\u2712\u2714\u2716\u271d\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u2764\u27a1\u2934\u2935\u2b05-\u2b07\u2b1b\u2b1c\u2b50\u2b55\u3030\u303d\u3297\u3299])(?:\ufe0f|(?!\ufe0e))|(?:(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75\udd90]|[\u261d\u26f7\u26f9\u270c\u270d])(?:\ufe0f|(?!\ufe0e))|(?:\ud83c[\udf85\udfc2-\udfc4\udfc7\udfca]|\ud83d[\udc42\udc43\udc46-\udc50\udc66-\udc69\udc6e\udc70-\udc78\udc7c\udc81-\udc83\udc85-\udc87\udcaa\udd7a\udd95\udd96\ude45-\ude47\ude4b-\ude4f\udea3\udeb4-\udeb6\udec0\udecc]|\ud83e[\udd0c\udd0f\udd18-\udd1c\udd1e\udd1f\udd26\udd30-\udd39\udd3d\udd3e\udd77\uddb5\uddb6\uddb8\uddb9\uddbb\uddcd-\uddcf\uddd1-\udddd\udec3-\udec5\udef0-\udef6]|[\u270a\u270b]))(?:\ud83c[\udffb-\udfff])?|(?:\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f|\ud83c\udde6\ud83c[\udde8-\uddec\uddee\uddf1\uddf2\uddf4\uddf6-\uddfa\uddfc\uddfd\uddff]|\ud83c\udde7\ud83c[\udde6\udde7\udde9-\uddef\uddf1-\uddf4\uddf6-\uddf9\uddfb\uddfc\uddfe\uddff]|\ud83c\udde8\ud83c[\udde6\udde8\udde9\uddeb-\uddee\uddf0-\uddf5\uddf7\uddfa-\uddff]|\ud83c\udde9\ud83c[\uddea\uddec\uddef\uddf0\uddf2\uddf4\uddff]|\ud83c\uddea\ud83c[\udde6\udde8\uddea\uddec\udded\uddf7-\uddfa]|\ud83c\uddeb\ud83c[\uddee-\uddf0\uddf2\uddf4\uddf7]|\ud83c\uddec\ud83c[\udde6\udde7\udde9-\uddee\uddf1-\uddf3\uddf5-\uddfa\uddfc\uddfe]|\ud83c\udded\ud83c[\uddf0\uddf2\uddf3\uddf7\uddf9\uddfa]|\ud83c\uddee\ud83c[\udde8-\uddea\uddf1-\uddf4\uddf6-\uddf9]|\ud83c\uddef\ud83c[\uddea\uddf2\uddf4\uddf5]|\ud83c\uddf0\ud83c[\uddea\uddec-\uddee\uddf2\uddf3\uddf5\uddf7\uddfc\uddfe\uddff]|\ud83c\uddf1\ud83c[\udde6-\udde8\uddee\uddf0\uddf7-\uddfb\uddfe]|\ud83c\uddf2\ud83c[\udde6\udde8-\udded\uddf0-\uddff]|\ud83c\uddf3\ud83c[\udde6\udde8\uddea-\uddec\uddee\uddf1\uddf4\uddf5\uddf7\uddfa\uddff]|\ud83c\uddf4\ud83c\uddf2|\ud83c\uddf5\ud83c[\udde6\uddea-\udded\uddf0-\uddf3\uddf7-\uddf9\uddfc\uddfe]|\ud83c\uddf6\ud83c\udde6|\ud83c\uddf7\ud83c[\uddea\uddf4\uddf8\uddfa\uddfc]|\ud83c\uddf8\ud83c[\udde6-\uddea\uddec-\uddf4\uddf7-\uddf9\uddfb\uddfd-\uddff]|\ud83c\uddf9\ud83c[\udde6\udde8\udde9\uddeb-\udded\uddef-\uddf4\uddf7\uddf9\uddfb\uddfc\uddff]|\ud83c\uddfa\ud83c[\udde6\uddec\uddf2\uddf3\uddf8\uddfe\uddff]|\ud83c\uddfb\ud83c[\udde6\udde8\uddea\uddec\uddee\uddf3\uddfa]|\ud83c\uddfc\ud83c[\uddeb\uddf8]|\ud83c\uddfd\ud83c\uddf0|\ud83c\uddfe\ud83c[\uddea\uddf9]|\ud83c\uddff\ud83c[\udde6\uddf2\uddfc]|\ud83c[\udccf\udd8e\udd91-\udd9a\udde6-\uddff\ude01\ude32-\ude36\ude38-\ude3a\ude50\ude51\udf00-\udf20\udf2d-\udf35\udf37-\udf7c\udf7e-\udf84\udf86-\udf93\udfa0-\udfc1\udfc5\udfc6\udfc8\udfc9\udfcf-\udfd3\udfe0-\udff0\udff4\udff8-\udfff]|\ud83d[\udc00-\udc3e\udc40\udc44\udc45\udc51-\udc65\udc6a\udc6f\udc79-\udc7b\udc7d-\udc80\udc84\udc88-\udc8e\udc90\udc92-\udca9\udcab-\udcfc\udcff-\udd3d\udd4b-\udd4e\udd50-\udd67\udda4\uddfb-\ude44\ude48-\ude4a\ude80-\udea2\udea4-\udeb3\udeb7-\udebf\udec1-\udec5\uded0-\uded2\uded5-\uded7\udedd-\udedf\udeeb\udeec\udef4-\udefc\udfe0-\udfeb\udff0]|\ud83e[\udd0d\udd0e\udd10-\udd17\udd20-\udd25\udd27-\udd2f\udd3a\udd3c\udd3f-\udd45\udd47-\udd76\udd78-\uddb4\uddb7\uddba\uddbc-\uddcc\uddd0\uddde-\uddff\ude70-\ude74\ude78-\ude7c\ude80-\ude86\ude90-\udeac\udeb0-\udeba\udec0-\udec2\uded0-\uded9\udee0-\udee7]|[\u23e9-\u23ec\u23f0\u23f3\u267e\u26ce\u2705\u2728\u274c\u274e\u2753-\u2755\u2795-\u2797\u27b0\u27bf\ue50a])|\ufe0f/g;

  exports.ActionMetadataLimits = ActionMetadataLimits;
  exports.AllowedMentionsLimits = AllowedMentionsLimits;
  exports.ApplicationCommandLimits = ApplicationCommandLimits;
  exports.ApplicationCommandOptionLimits = ApplicationCommandOptionLimits;
  exports.ApplicationCommandPermissionLimits = ApplicationCommandPermissionLimits;
  exports.ApplicationRoleConnectionLimits = ApplicationRoleConnectionLimits;
  exports.AutoCompleteLimits = AutoCompleteLimits;
  exports.AutoModerationRuleLimits = AutoModerationRuleLimits;
  exports.ButtonLimits = ButtonLimits;
  exports.ChannelInviteLimits = ChannelInviteLimits;
  exports.ChannelLimits = ChannelLimits;
  exports.ChannelMentionRegex = ChannelMentionRegex;
  exports.ChannelMessageRegex = ChannelMessageRegex;
  exports.DiscordHostnameRegex = DiscordHostnameRegex;
  exports.DiscordInviteLinkRegex = DiscordInviteLinkRegex;
  exports.EmbedLimits = EmbedLimits;
  exports.EmojiLimits = EmojiLimits;
  exports.EmojiRegex = EmojiRegex;
  exports.FormattedCustomEmoji = FormattedCustomEmoji;
  exports.FormattedCustomEmojiWithGroups = FormattedCustomEmojiWithGroups;
  exports.GuildAuditLogsLimits = GuildAuditLogsLimits;
  exports.GuildBansLimits = GuildBansLimits;
  exports.GuildIntegrationLimits = GuildIntegrationLimits;
  exports.GuildLimits = GuildLimits;
  exports.GuildMemberLimits = GuildMemberLimits;
  exports.GuildScheduledEventLimits = GuildScheduledEventLimits;
  exports.HttpUrlRegex = HttpUrlRegex;
  exports.InteractionLimits = InteractionLimits;
  exports.InteractionOptionResolver = InteractionOptionResolver;
  exports.MessageLimits = MessageLimits;
  exports.MessageLinkRegex = MessageLinkRegex;
  exports.ModalLimits = ModalLimits;
  exports.ModerationLimits = ModerationLimits;
  exports.ParsedCustomEmoji = ParsedCustomEmoji;
  exports.ParsedCustomEmojiWithGroups = ParsedCustomEmojiWithGroups;
  exports.ReactionLimits = ReactionLimits;
  exports.RoleLimits = RoleLimits;
  exports.RoleMentionRegex = RoleMentionRegex;
  exports.SelectMenuLimits = SelectMenuLimits;
  exports.SnowflakeRegex = SnowflakeRegex;
  exports.StageChannelLimits = StageChannelLimits;
  exports.StickerLimits = StickerLimits;
  exports.TextChannelLimits = TextChannelLimits;
  exports.TextInputLimits = TextInputLimits;
  exports.ThreadLimits = ThreadLimits;
  exports.TokenRegex = TokenRegex;
  exports.TriggerMetadataLimits = TriggerMetadataLimits;
  exports.TriggerTypeLimits = TriggerTypeLimits;
  exports.TwemojiRegex = TwemojiRegex;
  exports.UserLimits = UserLimits;
  exports.UserOrMemberMentionRegex = UserOrMemberMentionRegex;
  exports.VoiceChannelLimits = VoiceChannelLimits;
  exports.WebSocketUrlRegex = WebSocketUrlRegex;
  exports.WebhookRegex = WebhookRegex;

  return exports;

})({});
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.global.js.map