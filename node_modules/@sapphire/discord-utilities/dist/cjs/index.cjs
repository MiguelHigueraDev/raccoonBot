'use strict';

var v10 = require('discord-api-types/v10');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var _InteractionOptionResolver = class _InteractionOptionResolver {
  constructor(interaction) {
    __publicField(this, "interaction");
    /**
     * The interaction options array
     */
    __publicField(this, "data", null);
    /**
     * The interaction resolved data
     */
    __publicField(this, "resolved", null);
    /**
     * Bottom-level options for the interaction
     * If there is a subcommand (or subcommand and group), this represents the options for the subcommand.
     */
    __publicField(this, "hoistedOptions", null);
    /**
     * The name of the subcommand group
     */
    __publicField(this, "group", null);
    /**
     * The name of the subcommand
     */
    __publicField(this, "subcommand", null);
    this.interaction = interaction;
    this.data = "options" in interaction.data ? interaction.data.options ?? null : null;
    this.resolved = "resolved" in interaction.data ? interaction.data.resolved ?? null : null;
    this.hoistedOptions = this.data;
    if (this.hoistedOptions?.[0]?.type === v10.ApplicationCommandOptionType.SubcommandGroup) {
      this.group = this.hoistedOptions[0].name;
      this.hoistedOptions = this.hoistedOptions[0].options ?? [];
    }
    if (this.hoistedOptions?.[0]?.type === v10.ApplicationCommandOptionType.Subcommand) {
      this.subcommand = this.hoistedOptions[0].name;
      this.hoistedOptions = this.hoistedOptions[0].options ?? [];
    }
  }
  /**
   * Gets an option by its name
   * @param name The name of the option
   * @param required Whether to throw an error if the option is not found
   */
  get(name, required = false) {
    const option = this.hoistedOptions?.find((opt) => opt.name === name);
    if (!option) {
      if (required) {
        throw new Error(`Missing required option "${name}"`);
      }
      return null;
    }
    return option;
  }
  /**
   * Gets the selected subcommand
   * @param required Whether to throw an error if there is no subcommand
   */
  getSubcommand(required = true) {
    if (required && !this.subcommand) {
      throw new Error("A subcommand was not selected");
    }
    return this.subcommand;
  }
  /**
   * Gets the selected subcommand group
   * @param required Whether to throw an error if there is no subcommand group
   */
  getSubcommandGroup(required = true) {
    if (required && !this.group) {
      throw new Error("A subcommand group was not selected");
    }
    return this.group;
  }
  /**
   * Gets a boolean option
   * @param name The name of the option
   * @param required Whether to throw an error if the option is not found
   */
  getBoolean(name, required = false) {
    const option = this.getTypedOption(name, v10.ApplicationCommandOptionType.Boolean, required);
    return option?.value ?? null;
  }
  /**
   * Gets a channel option
   * @param name The name of the option
   * @param required Whether to throw an error if the option is not found
   */
  getChannel(name, required = false) {
    const option = this.getTypedOption(name, v10.ApplicationCommandOptionType.Channel, required);
    return option && this.resolved && "channels" in this.resolved ? this.resolved.channels?.[option.value] ?? null : null;
  }
  /**
   * Gets a string option
   * @param name The name of the option
   * @param required Whether to throw an error if the option is not found
   */
  getString(name, required = false) {
    const option = this.getTypedOption(name, v10.ApplicationCommandOptionType.String, required);
    return option?.value ?? null;
  }
  /**
   * Gets an integer option
   * @param name The name of the option
   * @param required Whether to throw an error if the option is not found
   */
  getInteger(name, required = false) {
    const option = this.getTypedOption(name, v10.ApplicationCommandOptionType.Integer, required);
    return option?.value ?? null;
  }
  /**
   * Gets a number option
   * @param name The name of the option
   * @param required Whether to throw an error if the option is not found
   */
  getNumber(name, required = false) {
    const option = this.getTypedOption(name, v10.ApplicationCommandOptionType.Number, required);
    return option?.value ?? null;
  }
  /**
   * Gets a user option
   * @param name The name of the option
   * @param required Whether to throw an error if the option is not found
   */
  getUser(name, required = false) {
    const option = this.getTypedOption(name, v10.ApplicationCommandOptionType.User, required);
    return option && this.resolved && "users" in this.resolved ? this.resolved.users?.[option.value] ?? null : null;
  }
  /**
   * Gets a member option
   * @param name The name of the option
   * @param required Whether to throw an error if the option is not found
   */
  getMember(name, required = false) {
    const option = this.getTypedOption(name, v10.ApplicationCommandOptionType.User, required);
    return option && this.resolved && "members" in this.resolved ? this.resolved.members?.[option.value] ?? null : null;
  }
  /**
   * Gets a role option
   * @param name The name of the option
   * @param required Whether to throw an error if the option is not found
   */
  getRole(name, required = false) {
    const option = this.getTypedOption(name, v10.ApplicationCommandOptionType.Role, required);
    return option && this.resolved && "roles" in this.resolved ? this.resolved.roles?.[option.value] ?? null : null;
  }
  /**
   * Gets an attachment option
   * @param name The name of the option
   * @param required Whether to throw an error if the option is not found
   */
  getAttachment(name, required = false) {
    const option = this.getTypedOption(name, v10.ApplicationCommandOptionType.Attachment, required);
    return option && this.resolved && "attachments" in this.resolved ? this.resolved.attachments?.[option.value] ?? null : null;
  }
  /**
   * Gets a mentionable option
   * @param name The name of the option
   * @param required Whether to throw an error if the option is not found
   */
  getMentionable(name, required = false) {
    const option = this.getTypedOption(name, v10.ApplicationCommandOptionType.Mentionable, required);
    if (!option || !this.resolved) {
      return null;
    }
    if ("members" in this.resolved && this.resolved.members && option.value in this.resolved.members) {
      return this.resolved.members[option.value] ?? null;
    }
    if ("users" in this.resolved && this.resolved.users && option.value in this.resolved.users) {
      return this.resolved.users[option.value] ?? null;
    }
    if ("roles" in this.resolved && this.resolved.roles && option.value in this.resolved.roles) {
      return this.resolved.roles[option.value] ?? null;
    }
    return null;
  }
  /**
   * Gets the target user for a context menu interaction
   */
  getTargetUser() {
    if (this.interaction.type !== v10.InteractionType.ApplicationCommand || this.interaction.data.type !== v10.ApplicationCommandType.User) {
      throw new Error("This method can only be used on user context menu interactions");
    }
    return this.resolved.users[this.interaction.data.target_id];
  }
  /**
   * Gets the target member for a context menu interaction
   * @param required Whether to throw an error if the member data is not present
   */
  getTargetMember(required = false) {
    if (this.interaction.type !== v10.InteractionType.ApplicationCommand || this.interaction.data.type !== v10.ApplicationCommandType.User) {
      throw new Error("This method can only be used on user context menu interactions");
    }
    const member = this.resolved.members?.[this.interaction.data.target_id] ?? null;
    if (!member && required) {
      throw new Error("Member data is not present");
    }
    return member;
  }
  /**
   * Gets the target message for a context menu interaction
   */
  getTargetMessage() {
    if (this.interaction.type !== v10.InteractionType.ApplicationCommand || this.interaction.data.type !== v10.ApplicationCommandType.Message) {
      throw new Error("This method can only be used on message context menu interactions");
    }
    return this.resolved.messages[this.interaction.data.target_id];
  }
  /**
   * Gets the focused option for an autocomplete interaction
   */
  getFocusedOption() {
    if (this.interaction.type !== v10.InteractionType.ApplicationCommandAutocomplete) {
      throw new Error("This method can only be used on autocomplete interactions");
    }
    const focusedOption = this.hoistedOptions?.find((option2) => "focused" in option2 && option2.focused);
    if (!focusedOption) {
      throw new Error("No focused option for autocomplete interaction");
    }
    const { focused, ...option } = focusedOption;
    return option;
  }
  getTypedOption(name, type, required) {
    const option = this.get(name, required);
    if (!option) {
      return null;
    } else if (option.type !== type) {
      throw new Error(`Option with name "${name}" is not of the correct type`);
    }
    return option;
  }
};
__name(_InteractionOptionResolver, "InteractionOptionResolver");
var InteractionOptionResolver = _InteractionOptionResolver;

// src/lib/limits.ts
var ChannelLimits = {
  /**
   * Maximum characters allowed in a channel description.
   */
  MaximumDescriptionLength: 1024,
  /**
   * Maximum characters allowed in a channel name.
   */
  MaximumNameLength: 100,
  /**
   * Maximum viewers allowed per screen share.
   * @deprecated Use `VoiceChannelLimits.MaximumViewersPerScreenShare` instead.
   */
  MaximumViewersPerScreenShare: 50
};
var VoiceChannelLimits = {
  /**
   * Maximum viewers allowed per screen share.
   */
  MaximumViewersPerScreenShare: 50,
  /**
   * Maximum user limit of voice channel.
   */
  MaximumUserLimit: 99
};
var StageChannelLimits = {
  /**
   * Maximum user limit of stage channel.
   */
  MaximumUserLimit: 250
};
var TextChannelLimits = {
  /**
   * Maximum pins allowed in a text channel.
   */
  MaximumMessagePins: 50
};
var ThreadLimits = {
  /**
   * Minimum number of threads to return from the threads API.
   */
  MinimumThreadsToFetch: 1,
  /**
   * Maximum number of threads to return from the threads API.
   */
  MaximumThreadsToFetch: 100
};
var EmbedLimits = {
  /**
   * Maximum characters allowed in the author field of an embed.
   */
  MaximumAuthorNameLength: 256,
  /**
   * Maximum characters allowed in an embed description.
   */
  MaximumDescriptionLength: 4096,
  /**
   * Maximum characters allowed in the name of a field in an embed.
   */
  MaximumFieldNameLength: 256,
  /**
   * Maximum fields allowed in an embed.
   */
  MaximumFields: 25,
  /**
   * Maximum characters allowed in the value of a field in an embed.
   */
  MaximumFieldValueLength: 1024,
  /**
   * Maximum characters allowed in a footer of an embed.
   */
  MaximumFooterLength: 2048,
  /**
   * Maximum characters allowed in the title of an embed.
   */
  MaximumTitleLength: 256,
  /**
   * Maximum characters allowed in an embed, in total.
   */
  MaximumTotalCharacters: 6e3
};
var EmojiLimits = {
  /**
   * Maximum characters allowed in a custom guild emoji.
   */
  MaximumEmojiNameLength: 32,
  /**
   * Maximum size allowed for a custom guild emoji.
   * Size is in bytes, and corresponds to 256KB.
   */
  MaximumEmojiSize: 256e3
};
var GuildLimits = {
  /**
   * Maximum channels allowed per guild, including category channels.
   */
  MaximumChannels: 500,
  /**
   * Maximum roles allowed in a guild.
   */
  MaximumRoles: 250,
  /**
   * Maximum scheduled or active events allowed in a guild.
   */
  MaximumScheduledOrActiveEvents: 100,
  /**
   * Minimum number of user guilds to return from the user guilds API.
   */
  MinimumUserGuildsToFetch: 1,
  /**
   * Maximum number of user guilds to return from the user guilds API.
   */
  MaximumUserGuildsToFetch: 200
};
var GuildScheduledEventLimits = {
  /**
   * Maximum number of users to return from the guild scheduled event users API.
   */
  MaximumUsersToFetch: 100
};
var GuildMemberLimits = {
  /**
   * Maximum characters allowed in the display name of a guild member.
   */
  MaximumDisplayNameLength: 32,
  /**
   * Minimum number of members to return from the guild members API.
   */
  MinimumMembersToFetch: 1,
  /**
   * Maximum number of members to return from the guild members API.
   */
  MaximumMembersToFetch: 1e3
};
var GuildBansLimits = {
  /**
   * Minimum number of bans to return from the guild bans API.
   */
  MinimumBansToFetch: 1,
  /**
   * Maximum number of bans to return from the guild bans API.
   */
  MaximumBansToFetch: 1e3
};
var InteractionLimits = {
  /**
   * Maximum buttons allowed in a single action row.
   */
  MaximumButtonsPerActionRow: 5,
  /**
   * Maximum select menus allowed in a single action row.
   */
  MaximumSelectMenusPerActionRow: 1,
  /**
   * Maximum text inputs allowed in a single action row.
   */
  MaximumTextInputsPerActionRow: 1,
  /**
   * Maximum options allowed in a single select menu.
   */
  MaximumOptionsInSelectMenus: 25
};
var ApplicationCommandLimits = {
  /**
   * Maximum characters allowed in an application command name.
   */
  MaximumNameCharacters: 32,
  /**
   * Maximum characters allowed in an application command description.
   */
  MaximumDescriptionCharacters: 100,
  /**
   * Maximum options allowed in an application command.
   */
  MaximumOptionsLength: 25,
  /**
   * Maximum combined characters allowed in the name, description, and value properties of an application command, its options (including subcommands and groups), and choices.
   */
  MaximumCombinedCharacters: 4e3
};
var ApplicationCommandOptionLimits = {
  /**
   * Maximum characters allowed in the name of an option of an application command.
   */
  MaximumNameCharacters: 32,
  /**
   * Maximum characters allowed in the description of an option of an application command.
   */
  MaximumDescriptionCharacters: 100,
  /**
   * Maximum length of choices allowed in the option of an application command.
   */
  MaximumChoicesLength: 25,
  /**
   * Maximum length of string allowed in the string option of an application command.
   */
  MaximumStringLength: 6e3
};
var ApplicationCommandPermissionLimits = {
  /**
   * Maximum length of permissions allowed in the option of an application command.
   */
  MaximumPermissionsLength: 100
};
var ButtonLimits = {
  /**
   * Maximum characters allowed in a button label.
   */
  MaximumLabelCharacters: 80,
  /**
   * Maximum characters allowed in a button custom ID.
   */
  MaximumCustomIdCharacters: 100
};
var SelectMenuLimits = {
  /**
   * Maximum characters allowed in a select menu custom ID.
   */
  MaximumCustomIdCharacters: 100,
  /**
   * Maximum amount of options allowed in a select menu.
   */
  MaximumOptionsLength: 25,
  /**
   * Maximum characters allowed in a select menu placeholder.
   */
  MaximumPlaceholderCharacters: 150,
  /**
   * Maximum "minimum" values allowed in a select menu.
   */
  MaximumMinValuesSize: 25,
  /**
   * Maximum "maximum" values allowed in a select menu.
   */
  MaximumMaxValuesSize: 25,
  /**
   * Maximum characters allowed in a select menu option's name.
   */
  MaximumLengthOfNameOfOption: 100,
  /**
   * Maximum characters allowed in a select menu option's description.
   */
  MaximumLengthOfDescriptionOfOption: 100,
  /**
   * Maximum characters allowed in a select menu option's value.
   */
  MaximumLengthOfValueOfOption: 100
};
var MessageLimits = {
  /**
   * Maximum embeds allowed in a single message.
   */
  MaximumEmbeds: 10,
  /**
   * Maximum action rows allowed in a single message.
   */
  MaximumActionRows: 5,
  /**
   * Maximum characters allowed in a single message for a user.
   */
  MaximumLength: 2e3,
  /**
   * Maximum characters allowed in a single message for a nitro user.
   */
  MaximumNitroLength: 4e3,
  /**
   * Maximum numbers of reactions allowed for a message.
   */
  MaximumReactions: 20,
  /**
   * Maximum upload size for a free user in a guild of tier 1 or below, or in DMs.
   * Size is in bytes, and corresponds to 25MB.
   */
  MaximumUploadSize: 25e6,
  /**
   * Maximum upload size for a Nitro Basic user, in any guild or in DMs.
   * Size is in bytes, and corresponds to 50MB.
   */
  MaximumNitroBasicUploadSize: 5e7,
  /**
   * Maximum upload size for a Nitro user, in any guild or in DMs.
   * Size is in bytes, and corresponds to 500MB.
   */
  MaximumNitroUploadSize: 5e8,
  /**
   * Maximum upload size for a free user for all different boost levels available in a guild.
   * Sizes are in bytes, and correspond to 25MB, 25MB, 50MB, and 100MB.
   */
  MaximumUploadSizeInGuild: [25e6, 25e6, 5e7, 1e8],
  /**
   * Minimum number of messages to return from the channel messages API.
   */
  MinimumMessagesToFetch: 1,
  /**
   * Maximum number of messages to return from the channel messages API.
   */
  MaximumMessagesToFetch: 100,
  /**
   * Maximum request size when sending a messages.
   * Size is in bytes, and corresponds to 25MB.
   */
  MaximumRequestSize: 25e6,
  /**
   * Minimum number of messages to delete in a single bulk delete request.
   */
  MinimumMessagesToBulkDelete: 2,
  /**
   * Maximum number of messages to delete in a single bulk delete request.
   */
  MaximumMessagesToBulkDelete: 100
};
var ReactionLimits = {
  /**
   * Minimum number of reactions to fetch from the message reactions API.
   */
  MinimumReactionToFetch: 1,
  /**
   * Maximum number of reactions to fetch from the message reactions API.
   */
  MaximumReactionsToFetch: 100
};
var ModerationLimits = {
  /**
   * Maximum duration of a guild timeout, in seconds (corresponds to 28 days).
   */
  MaximumTimeoutDuration: 2419200
};
var RoleLimits = {
  /**
   * Maximum characters allowed in a role name.
   */
  MaximumNameLength: 100
};
var UserLimits = {
  /**
   * Maximum numbers of users in a DM group.
   */
  MaximumUsersPerDMGroup: 10,
  /**
   * Maximum characters allowed in a user's biography (the "About Me" section).
   */
  MaximumBiographyLength: 190
};
var AutoCompleteLimits = {
  /**
   * Maximum options allowed in a single autocomplete response.
   */
  MaximumAmountOfOptions: 25,
  /**
   * Maximum characters allowed in a select menu option's name.
   */
  MaximumLengthOfNameOfOption: 100
};
var ModalLimits = {
  /**
   * Maximum characters allowed in a modal custom ID.
   */
  MaximumCustomIdCharacters: 100,
  /**
   * Maximum characters allowed in a modal title.
   */
  MaximumTitleCharacters: 45,
  /**
   * Maximum components allowed in a modal.
   */
  MaximumComponents: 5
};
var TextInputLimits = {
  /**
   * Maximum characters allowed in a text input custom ID.
   */
  MaximumCustomIdCharacters: 100,
  /**
   * Maximum characters allowed in a text input label.
   */
  MaximumLabelCharacters: 45,
  /**
   * Maximum characters allowed in a text input placeholder.
   */
  MaximumPlaceholderCharacters: 100,
  /**
   * Maximum characters allowed in a text input value.
   */
  MaximumValueCharacters: 4e3
};
var ApplicationRoleConnectionLimits = {
  /**
   * Maximum application role connection metadata records an application can have.
   */
  MaximumMetadataRecords: 5,
  /**
   * Maximum characters allowed in metadata values.
   */
  MaximumMetadataValueLength: 100,
  /**
   * Maximum characters allowed in a platform name.
   */
  MaximumPlatformNameLength: 50,
  /**
   * Maximum characters allowed in a platform username.
   */
  MaximumPlatformUsernameLength: 100
};
var GuildAuditLogsLimits = {
  /**
   * Minimum number of entries to return from the guild audit log API.
   */
  MinimumEntriesToFetch: 1,
  /**
   * Maximum number of entries to return from the guild audit log API.
   */
  MaximumEntriesToFetch: 100
};
var AutoModerationRuleLimits = {
  /**
   * Maximum number of exempt roles a rule can have.
   */
  MaximumExemptRoles: 20,
  /**
   * Maximum number of exempt channels a rule can have.
   */
  MaximumExemptChannels: 50
};
var TriggerTypeLimits = {
  /**
   * Maximum number of keyword triggers a guild can have.
   */
  MaximumKeywordTriggersPerGuild: 6,
  /**
   * Maximum number of mention spam triggers a guild can have.
   */
  MaximumSpamTriggersPerGuild: 1,
  /**
   * Maximum number of keyword triggers a channel can have.
   */
  MaximumKeywordPresetTriggersPerChannel: 1,
  /**
   * Maximum number of mention spam triggers a channel can have.
   */
  MaximumMentionSpamTriggersPerChannel: 1
};
var TriggerMetadataLimits = {
  /**
   * Maximum number of substrings which will be searched for in content.
   */
  MaximumKeywordFilters: 1e3,
  /**
   * Maximum number of characters allowed in a keyword filter.
   */
  MaximumKeywordFilterLength: 60,
  /**
   * Maximum number of regular expression patterns which will be matched against content.
   */
  MaximumRegexPatterns: 10,
  /**
   * Maximum number of characters allowed in a regular expression pattern.
   */
  MaximumCharactersPerRegexPattern: 260,
  /**
   * Maximum number of substrings which should not trigger the keyword rule.
   */
  MaximumKeywordAllowListLength: 100,
  /**
   * Maximum characters per keyword that should not trigger the keyword rule.
   */
  MaximumKeywordAllowListKeywordLength: 60,
  /**
   * Maximum characters per keyword should not trigger the keyword preset rule.
   */
  MaximumKeywordPresetAllowListKeywordPresetLength: 60,
  /**
   * Maximum number of substrings which should not trigger the keyword preset rule.
   */
  MaximumKeywordPresetAllowListLength: 1e3,
  /**
   * Maximum number of unique role and user mentions allowed per message.
   */
  MaximumMentionSpamTotalMentions: 50
};
var ActionMetadataLimits = {
  /**
   * Maximum timeout duration in seconds.
   */
  MaximumTimeoutDurationSeconds: 2419200,
  /**
   * Maximum number of characters allowed in a custom block message.
   */
  MaximumCustomBlockMessageLength: 150
};
var AllowedMentionsLimits = {
  /**
   * Maximum number of users allowed in an allowed mentions object.
   */
  MaximumUsers: 100,
  /**
   * Maximum number of roles allowed in an allowed mentions object.
   */
  MaximumRoles: 100
};
var ChannelInviteLimits = {
  /**
   * Maximum age of an invite in seconds.
   */
  MaximumAgeSeconds: 604800,
  /**
   * Maximum number of uses allowed for an invite.
   */
  MaximumUses: 100
};
var GuildIntegrationLimits = {
  /**
   * Maximum number of integrations returned from the guild integrations API. Needs a more description name than "MaximumIntegrations".
   */
  MaximumIntegrationsToFetch: 50
};
var StickerLimits = {
  /**
   * Maximum number of characters allowed in the autocomplete/suggestion tags for the sticker.
   */
  MaximumTagsLength: 200,
  /**
   * Maximum size allowed for a sticker.
   * Size is in bytes, and corresponds to 512KB.
   */
  MaximumStickerSize: 512e3
};

// src/lib/regexes.ts
var ChannelMentionRegex = /^<#(?<id>\d{17,20})>$/;
var ChannelMessageRegex = /^(?<channelId>\d{17,20})-(?<messageId>\d{17,20})$/;
var DiscordHostnameRegex = /(?<subdomain>\w+)\.?(?<hostname>dis(?:cord)?(?:app|merch|status)?)\.(?<tld>com|g(?:d|g|ift)|(?:de(?:sign|v))|media|new|store|net)/i;
var DiscordInviteLinkRegex = /(?:^|\b)discord(?:(?:app)?\.com\/invite|\.gg(?:\/invite)?)\/(?<code>[\w-]{2,255})(?:$|\b)/gi;
var EmojiRegex = /^(?:<(?<animated>a)?:(?<name>\w{2,32}):)?(?<id>\d{17,21})>?$/;
var FormattedCustomEmoji = /<a?:\w{2,32}:\d{17,20}>/;
var FormattedCustomEmojiWithGroups = /(?<animated>a?):(?<name>[^:]+):(?<id>\d{17,20})/;
var HttpUrlRegex = /^https?:\/\//;
var MessageLinkRegex = /^(?:https:\/\/)?(?:ptb\.|canary\.)?discord(?:app)?\.com\/channels\/(?<guildId>(?:\d{17,20}|@me))\/(?<channelId>\d{17,20})\/(?<messageId>\d{17,20})$/;
var ParsedCustomEmoji = /a?:\w{2,32}:\d{17,20}/;
var ParsedCustomEmojiWithGroups = /(?<animated>a?):(?<name>[^:]+):(?<id>\d{17,20})/;
var RoleMentionRegex = /^<@&(?<id>\d{17,20})>$/;
var SnowflakeRegex = /^(?<id>\d{17,20})$/;
var TokenRegex = /(?<mfaToken>mfa\.[a-z0-9_-]{20,})|(?<basicToken>[a-z0-9_-]{23,28}\.[a-z0-9_-]{6,7}\.[a-z0-9_-]{27})/i;
var UserOrMemberMentionRegex = /^<@!?(?<id>\d{17,20})>$/;
var WebSocketUrlRegex = /^wss?:\/\//;
var WebhookRegex = /(?<url>^https:\/\/(?:(?:canary|ptb).)?discord(?:app)?.com\/api(?:\/v\d+)?\/webhooks\/(?<id>\d+)\/(?<token>[\w-]+)\/?$)/;

// src/lib/TwemojiRegex.ts
var TwemojiRegex = /(?:\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffc-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb\udffd-\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb\udffc\udffe\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb-\udffd\udfff]|\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb-\udffe]|\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffc-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffd-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffd\udfff]|\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffe]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffc-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffc-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffd-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb\udffd-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc69\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffd\udfff]|\ud83d\udc69\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb-\udffd\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffe]|\ud83d\udc69\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb-\udffe]|\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffc-\udfff]|\ud83e\uddd1\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb\udffd-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb\udffc\udffe\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb-\udffd\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb-\udffe]|\ud83e\uddd1\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d[\udc68\udc69]|\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c[\udffc-\udfff]|\ud83e\udef1\ud83c\udffc\u200d\ud83e\udef2\ud83c[\udffb\udffd-\udfff]|\ud83e\udef1\ud83c\udffd\u200d\ud83e\udef2\ud83c[\udffb\udffc\udffe\udfff]|\ud83e\udef1\ud83c\udffe\u200d\ud83e\udef2\ud83c[\udffb-\udffd\udfff]|\ud83e\udef1\ud83c\udfff\u200d\ud83e\udef2\ud83c[\udffb-\udffe]|\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d[\udc68\udc69]|\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1|\ud83d\udc6b\ud83c[\udffb-\udfff]|\ud83d\udc6c\ud83c[\udffb-\udfff]|\ud83d\udc6d\ud83c[\udffb-\udfff]|\ud83d\udc8f\ud83c[\udffb-\udfff]|\ud83d\udc91\ud83c[\udffb-\udfff]|\ud83e\udd1d\ud83c[\udffb-\udfff]|\ud83d[\udc6b-\udc6d\udc8f\udc91]|\ud83e\udd1d)|(?:\ud83d[\udc68\udc69]|\ud83e\uddd1)(?:\ud83c[\udffb-\udfff])?\u200d(?:\u2695\ufe0f|\u2696\ufe0f|\u2708\ufe0f|\ud83c[\udf3e\udf73\udf7c\udf84\udf93\udfa4\udfa8\udfeb\udfed]|\ud83d[\udcbb\udcbc\udd27\udd2c\ude80\ude92]|\ud83e[\uddaf-\uddb3\uddbc\uddbd])|(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75]|\u26f9)((?:\ud83c[\udffb-\udfff]|\ufe0f)\u200d[\u2640\u2642]\ufe0f)|(?:\ud83c[\udfc3\udfc4\udfca]|\ud83d[\udc6e\udc70\udc71\udc73\udc77\udc81\udc82\udc86\udc87\ude45-\ude47\ude4b\ude4d\ude4e\udea3\udeb4-\udeb6]|\ud83e[\udd26\udd35\udd37-\udd39\udd3d\udd3e\uddb8\uddb9\uddcd-\uddcf\uddd4\uddd6-\udddd])(?:\ud83c[\udffb-\udfff])?\u200d[\u2640\u2642]\ufe0f|(?:\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f|\ud83c\udff3\ufe0f\u200d\ud83c\udf08|\ud83d\ude36\u200d\ud83c\udf2b\ufe0f|\u2764\ufe0f\u200d\ud83d\udd25|\u2764\ufe0f\u200d\ud83e\ude79|\ud83c\udff4\u200d\u2620\ufe0f|\ud83d\udc15\u200d\ud83e\uddba|\ud83d\udc3b\u200d\u2744\ufe0f|\ud83d\udc41\u200d\ud83d\udde8|\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc6f\u200d\u2640\ufe0f|\ud83d\udc6f\u200d\u2642\ufe0f|\ud83d\ude2e\u200d\ud83d\udca8|\ud83d\ude35\u200d\ud83d\udcab|\ud83e\udd3c\u200d\u2640\ufe0f|\ud83e\udd3c\u200d\u2642\ufe0f|\ud83e\uddde\u200d\u2640\ufe0f|\ud83e\uddde\u200d\u2642\ufe0f|\ud83e\udddf\u200d\u2640\ufe0f|\ud83e\udddf\u200d\u2642\ufe0f|\ud83d\udc08\u200d\u2b1b)|[#*0-9]\ufe0f?\u20e3|(?:[©®\u2122\u265f]\ufe0f)|(?:\ud83c[\udc04\udd70\udd71\udd7e\udd7f\ude02\ude1a\ude2f\ude37\udf21\udf24-\udf2c\udf36\udf7d\udf96\udf97\udf99-\udf9b\udf9e\udf9f\udfcd\udfce\udfd4-\udfdf\udff3\udff5\udff7]|\ud83d[\udc3f\udc41\udcfd\udd49\udd4a\udd6f\udd70\udd73\udd76-\udd79\udd87\udd8a-\udd8d\udda5\udda8\uddb1\uddb2\uddbc\uddc2-\uddc4\uddd1-\uddd3\udddc-\uddde\udde1\udde3\udde8\uddef\uddf3\uddfa\udecb\udecd-\udecf\udee0-\udee5\udee9\udef0\udef3]|[\u203c\u2049\u2139\u2194-\u2199\u21a9\u21aa\u231a\u231b\u2328\u23cf\u23ed-\u23ef\u23f1\u23f2\u23f8-\u23fa\u24c2\u25aa\u25ab\u25b6\u25c0\u25fb-\u25fe\u2600-\u2604\u260e\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262a\u262e\u262f\u2638-\u263a\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267b\u267f\u2692-\u2697\u2699\u269b\u269c\u26a0\u26a1\u26a7\u26aa\u26ab\u26b0\u26b1\u26bd\u26be\u26c4\u26c5\u26c8\u26cf\u26d1\u26d3\u26d4\u26e9\u26ea\u26f0-\u26f5\u26f8\u26fa\u26fd\u2702\u2708\u2709\u270f\u2712\u2714\u2716\u271d\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u2764\u27a1\u2934\u2935\u2b05-\u2b07\u2b1b\u2b1c\u2b50\u2b55\u3030\u303d\u3297\u3299])(?:\ufe0f|(?!\ufe0e))|(?:(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75\udd90]|[\u261d\u26f7\u26f9\u270c\u270d])(?:\ufe0f|(?!\ufe0e))|(?:\ud83c[\udf85\udfc2-\udfc4\udfc7\udfca]|\ud83d[\udc42\udc43\udc46-\udc50\udc66-\udc69\udc6e\udc70-\udc78\udc7c\udc81-\udc83\udc85-\udc87\udcaa\udd7a\udd95\udd96\ude45-\ude47\ude4b-\ude4f\udea3\udeb4-\udeb6\udec0\udecc]|\ud83e[\udd0c\udd0f\udd18-\udd1c\udd1e\udd1f\udd26\udd30-\udd39\udd3d\udd3e\udd77\uddb5\uddb6\uddb8\uddb9\uddbb\uddcd-\uddcf\uddd1-\udddd\udec3-\udec5\udef0-\udef6]|[\u270a\u270b]))(?:\ud83c[\udffb-\udfff])?|(?:\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f|\ud83c\udde6\ud83c[\udde8-\uddec\uddee\uddf1\uddf2\uddf4\uddf6-\uddfa\uddfc\uddfd\uddff]|\ud83c\udde7\ud83c[\udde6\udde7\udde9-\uddef\uddf1-\uddf4\uddf6-\uddf9\uddfb\uddfc\uddfe\uddff]|\ud83c\udde8\ud83c[\udde6\udde8\udde9\uddeb-\uddee\uddf0-\uddf5\uddf7\uddfa-\uddff]|\ud83c\udde9\ud83c[\uddea\uddec\uddef\uddf0\uddf2\uddf4\uddff]|\ud83c\uddea\ud83c[\udde6\udde8\uddea\uddec\udded\uddf7-\uddfa]|\ud83c\uddeb\ud83c[\uddee-\uddf0\uddf2\uddf4\uddf7]|\ud83c\uddec\ud83c[\udde6\udde7\udde9-\uddee\uddf1-\uddf3\uddf5-\uddfa\uddfc\uddfe]|\ud83c\udded\ud83c[\uddf0\uddf2\uddf3\uddf7\uddf9\uddfa]|\ud83c\uddee\ud83c[\udde8-\uddea\uddf1-\uddf4\uddf6-\uddf9]|\ud83c\uddef\ud83c[\uddea\uddf2\uddf4\uddf5]|\ud83c\uddf0\ud83c[\uddea\uddec-\uddee\uddf2\uddf3\uddf5\uddf7\uddfc\uddfe\uddff]|\ud83c\uddf1\ud83c[\udde6-\udde8\uddee\uddf0\uddf7-\uddfb\uddfe]|\ud83c\uddf2\ud83c[\udde6\udde8-\udded\uddf0-\uddff]|\ud83c\uddf3\ud83c[\udde6\udde8\uddea-\uddec\uddee\uddf1\uddf4\uddf5\uddf7\uddfa\uddff]|\ud83c\uddf4\ud83c\uddf2|\ud83c\uddf5\ud83c[\udde6\uddea-\udded\uddf0-\uddf3\uddf7-\uddf9\uddfc\uddfe]|\ud83c\uddf6\ud83c\udde6|\ud83c\uddf7\ud83c[\uddea\uddf4\uddf8\uddfa\uddfc]|\ud83c\uddf8\ud83c[\udde6-\uddea\uddec-\uddf4\uddf7-\uddf9\uddfb\uddfd-\uddff]|\ud83c\uddf9\ud83c[\udde6\udde8\udde9\uddeb-\udded\uddef-\uddf4\uddf7\uddf9\uddfb\uddfc\uddff]|\ud83c\uddfa\ud83c[\udde6\uddec\uddf2\uddf3\uddf8\uddfe\uddff]|\ud83c\uddfb\ud83c[\udde6\udde8\uddea\uddec\uddee\uddf3\uddfa]|\ud83c\uddfc\ud83c[\uddeb\uddf8]|\ud83c\uddfd\ud83c\uddf0|\ud83c\uddfe\ud83c[\uddea\uddf9]|\ud83c\uddff\ud83c[\udde6\uddf2\uddfc]|\ud83c[\udccf\udd8e\udd91-\udd9a\udde6-\uddff\ude01\ude32-\ude36\ude38-\ude3a\ude50\ude51\udf00-\udf20\udf2d-\udf35\udf37-\udf7c\udf7e-\udf84\udf86-\udf93\udfa0-\udfc1\udfc5\udfc6\udfc8\udfc9\udfcf-\udfd3\udfe0-\udff0\udff4\udff8-\udfff]|\ud83d[\udc00-\udc3e\udc40\udc44\udc45\udc51-\udc65\udc6a\udc6f\udc79-\udc7b\udc7d-\udc80\udc84\udc88-\udc8e\udc90\udc92-\udca9\udcab-\udcfc\udcff-\udd3d\udd4b-\udd4e\udd50-\udd67\udda4\uddfb-\ude44\ude48-\ude4a\ude80-\udea2\udea4-\udeb3\udeb7-\udebf\udec1-\udec5\uded0-\uded2\uded5-\uded7\udedd-\udedf\udeeb\udeec\udef4-\udefc\udfe0-\udfeb\udff0]|\ud83e[\udd0d\udd0e\udd10-\udd17\udd20-\udd25\udd27-\udd2f\udd3a\udd3c\udd3f-\udd45\udd47-\udd76\udd78-\uddb4\uddb7\uddba\uddbc-\uddcc\uddd0\uddde-\uddff\ude70-\ude74\ude78-\ude7c\ude80-\ude86\ude90-\udeac\udeb0-\udeba\udec0-\udec2\uded0-\uded9\udee0-\udee7]|[\u23e9-\u23ec\u23f0\u23f3\u267e\u26ce\u2705\u2728\u274c\u274e\u2753-\u2755\u2795-\u2797\u27b0\u27bf\ue50a])|\ufe0f/g;

exports.ActionMetadataLimits = ActionMetadataLimits;
exports.AllowedMentionsLimits = AllowedMentionsLimits;
exports.ApplicationCommandLimits = ApplicationCommandLimits;
exports.ApplicationCommandOptionLimits = ApplicationCommandOptionLimits;
exports.ApplicationCommandPermissionLimits = ApplicationCommandPermissionLimits;
exports.ApplicationRoleConnectionLimits = ApplicationRoleConnectionLimits;
exports.AutoCompleteLimits = AutoCompleteLimits;
exports.AutoModerationRuleLimits = AutoModerationRuleLimits;
exports.ButtonLimits = ButtonLimits;
exports.ChannelInviteLimits = ChannelInviteLimits;
exports.ChannelLimits = ChannelLimits;
exports.ChannelMentionRegex = ChannelMentionRegex;
exports.ChannelMessageRegex = ChannelMessageRegex;
exports.DiscordHostnameRegex = DiscordHostnameRegex;
exports.DiscordInviteLinkRegex = DiscordInviteLinkRegex;
exports.EmbedLimits = EmbedLimits;
exports.EmojiLimits = EmojiLimits;
exports.EmojiRegex = EmojiRegex;
exports.FormattedCustomEmoji = FormattedCustomEmoji;
exports.FormattedCustomEmojiWithGroups = FormattedCustomEmojiWithGroups;
exports.GuildAuditLogsLimits = GuildAuditLogsLimits;
exports.GuildBansLimits = GuildBansLimits;
exports.GuildIntegrationLimits = GuildIntegrationLimits;
exports.GuildLimits = GuildLimits;
exports.GuildMemberLimits = GuildMemberLimits;
exports.GuildScheduledEventLimits = GuildScheduledEventLimits;
exports.HttpUrlRegex = HttpUrlRegex;
exports.InteractionLimits = InteractionLimits;
exports.InteractionOptionResolver = InteractionOptionResolver;
exports.MessageLimits = MessageLimits;
exports.MessageLinkRegex = MessageLinkRegex;
exports.ModalLimits = ModalLimits;
exports.ModerationLimits = ModerationLimits;
exports.ParsedCustomEmoji = ParsedCustomEmoji;
exports.ParsedCustomEmojiWithGroups = ParsedCustomEmojiWithGroups;
exports.ReactionLimits = ReactionLimits;
exports.RoleLimits = RoleLimits;
exports.RoleMentionRegex = RoleMentionRegex;
exports.SelectMenuLimits = SelectMenuLimits;
exports.SnowflakeRegex = SnowflakeRegex;
exports.StageChannelLimits = StageChannelLimits;
exports.StickerLimits = StickerLimits;
exports.TextChannelLimits = TextChannelLimits;
exports.TextInputLimits = TextInputLimits;
exports.ThreadLimits = ThreadLimits;
exports.TokenRegex = TokenRegex;
exports.TriggerMetadataLimits = TriggerMetadataLimits;
exports.TriggerTypeLimits = TriggerTypeLimits;
exports.TwemojiRegex = TwemojiRegex;
exports.UserLimits = UserLimits;
exports.UserOrMemberMentionRegex = UserOrMemberMentionRegex;
exports.VoiceChannelLimits = VoiceChannelLimits;
exports.WebSocketUrlRegex = WebSocketUrlRegex;
exports.WebhookRegex = WebhookRegex;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.cjs.map