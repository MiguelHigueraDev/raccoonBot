var SapphireDuration = (function (exports) {
  'use strict';

  var __defProp = Object.defineProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // src/lib/constants.ts
  var Time = /* @__PURE__ */ ((Time2) => {
    Time2[Time2["Nanosecond"] = 1e-6] = "Nanosecond";
    Time2[Time2["Microsecond"] = 1e-3] = "Microsecond";
    Time2[Time2["Millisecond"] = 1] = "Millisecond";
    Time2[Time2["Second"] = 1e3] = "Second";
    Time2[Time2["Minute"] = 6e4] = "Minute";
    Time2[Time2["Hour"] = 36e5] = "Hour";
    Time2[Time2["Day"] = 864e5] = "Day";
    Time2[Time2["Week"] = 6048e5] = "Week";
    Time2[Time2["Month"] = 2628e6] = "Month";
    Time2[Time2["Year"] = 31536e6] = "Year";
    return Time2;
  })(Time || {});
  var TimeTypes = /* @__PURE__ */ ((TimeTypes2) => {
    TimeTypes2["Second"] = "second";
    TimeTypes2["Minute"] = "minute";
    TimeTypes2["Hour"] = "hour";
    TimeTypes2["Day"] = "day";
    TimeTypes2["Week"] = "week";
    TimeTypes2["Month"] = "month";
    TimeTypes2["Year"] = "year";
    return TimeTypes2;
  })(TimeTypes || {});
  var DEFAULT_UNITS = {
    ["year" /* Year */]: {
      1: "year",
      DEFAULT: "years"
    },
    ["month" /* Month */]: {
      1: "month",
      DEFAULT: "months"
    },
    ["week" /* Week */]: {
      1: "week",
      DEFAULT: "weeks"
    },
    ["day" /* Day */]: {
      1: "day",
      DEFAULT: "days"
    },
    ["hour" /* Hour */]: {
      1: "hour",
      DEFAULT: "hours"
    },
    ["minute" /* Minute */]: {
      1: "minute",
      DEFAULT: "minutes"
    },
    ["second" /* Second */]: {
      1: "second",
      DEFAULT: "seconds"
    }
  };
  var DEFAULT_SEPARATORS = {
    left: " ",
    right: " "
  };

  // src/lib/Duration.ts
  var tokens = /* @__PURE__ */ new Map([
    ["nanosecond", 1e-6 /* Nanosecond */],
    ["nanoseconds", 1e-6 /* Nanosecond */],
    ["ns", 1e-6 /* Nanosecond */],
    ["microsecond", 1e-3 /* Microsecond */],
    ["microseconds", 1e-3 /* Microsecond */],
    ["\u03BCs", 1e-3 /* Microsecond */],
    ["us", 1e-3 /* Microsecond */],
    ["millisecond", 1 /* Millisecond */],
    ["milliseconds", 1 /* Millisecond */],
    ["ms", 1 /* Millisecond */],
    ["second", 1e3 /* Second */],
    ["seconds", 1e3 /* Second */],
    ["sec", 1e3 /* Second */],
    ["secs", 1e3 /* Second */],
    ["s", 1e3 /* Second */],
    ["minute", 6e4 /* Minute */],
    ["minutes", 6e4 /* Minute */],
    ["min", 6e4 /* Minute */],
    ["mins", 6e4 /* Minute */],
    ["m", 6e4 /* Minute */],
    ["hour", 36e5 /* Hour */],
    ["hours", 36e5 /* Hour */],
    ["hr", 36e5 /* Hour */],
    ["hrs", 36e5 /* Hour */],
    ["h", 36e5 /* Hour */],
    ["day", 864e5 /* Day */],
    ["days", 864e5 /* Day */],
    ["d", 864e5 /* Day */],
    ["week", 6048e5 /* Week */],
    ["weeks", 6048e5 /* Week */],
    ["wk", 6048e5 /* Week */],
    ["wks", 6048e5 /* Week */],
    ["w", 6048e5 /* Week */],
    ["month", 2628e6 /* Month */],
    ["months", 2628e6 /* Month */],
    ["b", 2628e6 /* Month */],
    ["mo", 2628e6 /* Month */],
    ["year", 31536e6 /* Year */],
    ["years", 31536e6 /* Year */],
    ["yr", 31536e6 /* Year */],
    ["yrs", 31536e6 /* Year */],
    ["y", 31536e6 /* Year */]
  ]);
  var mappings = /* @__PURE__ */ new Map([
    [1e-6 /* Nanosecond */, "nanoseconds"],
    [1e-3 /* Microsecond */, "microseconds"],
    [1 /* Millisecond */, "milliseconds"],
    [1e3 /* Second */, "seconds"],
    [6e4 /* Minute */, "minutes"],
    [36e5 /* Hour */, "hours"],
    [864e5 /* Day */, "days"],
    [6048e5 /* Week */, "weeks"],
    [2628e6 /* Month */, "months"],
    [31536e6 /* Year */, "years"]
  ]);
  var _Duration = class _Duration {
    /**
     * Create a new Duration instance
     * @param pattern The string to parse
     */
    constructor(pattern) {
      /**
       * The offset
       */
      __publicField(this, "offset");
      /**
       * The amount of nanoseconds extracted from the text.
       */
      __publicField(this, "nanoseconds", 0);
      /**
       * The amount of microseconds extracted from the text.
       */
      __publicField(this, "microseconds", 0);
      /**
       * The amount of milliseconds extracted from the text.
       */
      __publicField(this, "milliseconds", 0);
      /**
       * The amount of seconds extracted from the text.
       */
      __publicField(this, "seconds", 0);
      /**
       * The amount of minutes extracted from the text.
       */
      __publicField(this, "minutes", 0);
      /**
       * The amount of hours extracted from the text.
       */
      __publicField(this, "hours", 0);
      /**
       * The amount of days extracted from the text.
       */
      __publicField(this, "days", 0);
      /**
       * The amount of weeks extracted from the text.
       */
      __publicField(this, "weeks", 0);
      /**
       * The amount of months extracted from the text.
       */
      __publicField(this, "months", 0);
      /**
       * The amount of years extracted from the text.
       */
      __publicField(this, "years", 0);
      let result = 0;
      let valid = false;
      pattern.toLowerCase().replace(_Duration.commaRegex, "").replace(_Duration.aAndAnRegex, "1").replace(_Duration.patternRegex, (_, i, units) => {
        const token = tokens.get(units);
        if (token !== void 0) {
          const n = Number(i);
          result += n * token;
          this[mappings.get(token)] += n;
          valid = true;
        }
        return "";
      });
      this.offset = valid ? result : NaN;
    }
    /**
     * Get the date from now
     */
    get fromNow() {
      return this.dateFrom(/* @__PURE__ */ new Date());
    }
    /**
     * Get the date from
     * @param date The Date instance to get the date from
     */
    dateFrom(date) {
      return new Date(date.getTime() + this.offset);
    }
  };
  __name(_Duration, "Duration");
  /**
   * The RegExp used for the pattern parsing
   */
  __publicField(_Duration, "patternRegex", /(-?\d*\.?\d+(?:e[-+]?\d+)?)\s*([a-zÎ¼]*)/gi);
  /**
   * The RegExp used for removing commas
   */
  __publicField(_Duration, "commaRegex", /,/g);
  /**
   * The RegExp used for replacing a/an with 1
   */
  __publicField(_Duration, "aAndAnRegex", /\ban?\b/gi);
  var Duration = _Duration;

  // src/lib/DurationFormatter.ts
  var kTimeDurations = [
    ["year" /* Year */, 31536e6],
    // 29.53059 days is the official duration of a month: https://en.wikipedia.org/wiki/Month
    ["month" /* Month */, 2628e6],
    ["week" /* Week */, 1e3 * 60 * 60 * 24 * 7],
    ["day" /* Day */, 1e3 * 60 * 60 * 24],
    ["hour" /* Hour */, 1e3 * 60 * 60],
    ["minute" /* Minute */, 1e3 * 60],
    ["second" /* Second */, 1e3]
  ];
  var _DurationFormatter = class _DurationFormatter {
    constructor(units = DEFAULT_UNITS) {
      this.units = units;
    }
    format(duration, precision = 7, {
      left: leftSeparator = DEFAULT_SEPARATORS.left,
      right: rightSeparator = DEFAULT_SEPARATORS.right
    } = DEFAULT_SEPARATORS) {
      const output = [];
      const negative = duration < 0;
      if (negative)
        duration *= -1;
      for (const [type, timeDuration] of kTimeDurations) {
        const division = duration / timeDuration;
        if (division < 1)
          continue;
        const floored = Math.floor(division);
        duration -= floored * timeDuration;
        output.push(addUnit(floored, this.units[type], leftSeparator));
        if (output.length >= precision)
          break;
      }
      return `${negative ? "-" : ""}${output.join(rightSeparator) || addUnit(0, this.units.second, leftSeparator)}`;
    }
  };
  __name(_DurationFormatter, "DurationFormatter");
  var DurationFormatter = _DurationFormatter;
  function addUnit(time, unit, separator) {
    if (Reflect.has(unit, time))
      return `${time}${separator}${Reflect.get(unit, time)}`;
    return `${time}${separator}${unit.DEFAULT}`;
  }
  __name(addUnit, "addUnit");

  exports.DEFAULT_SEPARATORS = DEFAULT_SEPARATORS;
  exports.DEFAULT_UNITS = DEFAULT_UNITS;
  exports.Duration = Duration;
  exports.DurationFormatter = DurationFormatter;
  exports.Time = Time;
  exports.TimeTypes = TimeTypes;

  return exports;

})({});
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.global.js.map