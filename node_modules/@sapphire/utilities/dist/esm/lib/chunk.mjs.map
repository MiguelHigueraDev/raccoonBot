{"version":3,"sources":["../../../src/lib/chunk.ts"],"names":[],"mappings":";;;;;AAKO,SAAS,MAAS,OAAqB,WAA0B;AACvE,MAAI,CAAC,MAAM,QAAQ,KAAK;AAAG,UAAM,IAAI,UAAU,2BAA2B;AAC1E,MAAI,CAAC,OAAO,UAAU,SAAS;AAAG,UAAM,IAAI,UAAU,+BAA+B;AACrF,MAAI,YAAY;AAAG,UAAM,IAAI,WAAW,iCAAiC;AACzE,QAAM,SAAgB,CAAC;AACvB,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAAW,WAAO,KAAK,MAAM,MAAM,GAAG,IAAI,SAAS,CAAC;AAC3F,SAAO;AACR;AAPgB","sourcesContent":["/**\n * Splits up an array into chunks\n * @param array The array to chunk up\n * @param chunkSize The size of each individual chunk\n */\nexport function chunk<T>(array: readonly T[], chunkSize: number): T[][] {\n\tif (!Array.isArray(array)) throw new TypeError('entries must be an array.');\n\tif (!Number.isInteger(chunkSize)) throw new TypeError('chunkSize must be an integer.');\n\tif (chunkSize < 1) throw new RangeError('chunkSize must be 1 or greater.');\n\tconst chunks: T[][] = [];\n\tfor (let i = 0; i < array.length; i += chunkSize) chunks.push(array.slice(i, i + chunkSize));\n\treturn chunks;\n}\n"]}