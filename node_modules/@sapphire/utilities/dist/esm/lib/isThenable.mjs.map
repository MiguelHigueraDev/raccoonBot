{"version":3,"sources":["../../../src/lib/isThenable.ts"],"names":[],"mappings":";;;;;AACA,SAAS,kBAAkB;AAO3B,SAAS,QAAQ,OAAqC;AACrD,SAAO,QAAQ,IAAI,OAAO,MAAM,KAAK,WAAW,MAAM,IAAI;AAC3D;AAFS;AAIT,SAAS,SAAS,OAAsC;AACvD,SAAO,QAAQ,IAAI,OAAO,OAAO,KAAK,WAAW,MAAM,KAAK;AAC7D;AAFS;AAQF,SAAS,WAAW,OAAmC;AAC7D,MAAI,OAAO,UAAU,YAAY,UAAU;AAAM,WAAO;AACxD,SAAO,iBAAiB,WAAY,UAAU,QAAQ,aAAa,QAAQ,KAAK,KAAK,SAAS,KAAK;AACpG;AAHgB","sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport { isFunction } from './isFunction';\n\nexport interface Thenable {\n\tthen: Function;\n\tcatch: Function;\n}\n\nfunction hasThen(input: { then?: Function }): boolean {\n\treturn Reflect.has(input, 'then') && isFunction(input.then);\n}\n\nfunction hasCatch(input: { catch?: Function }): boolean {\n\treturn Reflect.has(input, 'catch') && isFunction(input.catch);\n}\n\n/**\n * Verify if an object is a promise.\n * @param input The promise to verify\n */\nexport function isThenable(input: unknown): input is Thenable {\n\tif (typeof input !== 'object' || input === null) return false;\n\treturn input instanceof Promise || (input !== Promise.prototype && hasThen(input) && hasCatch(input));\n}\n"]}