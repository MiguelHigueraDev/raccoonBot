import { __name } from '../chunk-G5GHKT7C.mjs';
import { deepClone } from './deepClone.mjs';
import { isObject } from './isObject.mjs';

function mergeDefault(base, overwrites) {
  if (!overwrites)
    return deepClone(base);
  for (const [baseKey, baseValue] of Object.entries(base)) {
    const overwritesValueAtBaseKey = Reflect.get(overwrites, baseKey);
    if (typeof overwritesValueAtBaseKey === "undefined") {
      Reflect.set(overwrites, baseKey, deepClone(baseValue));
    } else if (isObject(overwritesValueAtBaseKey)) {
      Reflect.set(overwrites, baseKey, mergeDefault(baseValue != null ? baseValue : {}, overwritesValueAtBaseKey));
    }
  }
  return overwrites;
}
__name(mergeDefault, "mergeDefault");

export { mergeDefault };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=mergeDefault.mjs.map