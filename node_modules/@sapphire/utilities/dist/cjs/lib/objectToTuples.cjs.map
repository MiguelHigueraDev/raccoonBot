{"version":3,"sources":["../../../src/lib/objectToTuples.ts"],"names":[],"mappings":";;;;AAAA,SAAS,gBAAgB;AAQlB,SAAS,eAAkB,KAAmB,SAAS,IAA6B;AAC1F,QAAM,UAAmC,CAAC;AAE1C,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,GAAG,GAAG;AAC/C,QAAI,SAAS,KAAK,GAAG;AACpB,cAAQ,KAAK,GAAG,eAAe,OAAO,GAAG,MAAM,GAAG,GAAG,GAAG,CAAC;AAAA,IAC1D,OAAO;AACN,cAAQ,KAAK,CAAC,GAAG,MAAM,GAAG,GAAG,IAAe,KAAmB,CAAC;AAAA,IACjE;AAAA,EACD;AAEA,SAAO;AACR;AAZgB","sourcesContent":["import { isObject } from './isObject';\nimport type { AnyObject } from './types';\n\n/**\n * Convert an object to a tuple\n * @param obj The object to convert\n * @param prefix The prefix for the key\n */\nexport function objectToTuples<T>(obj: AnyObject<T>, prefix = ''): [keyof T, T[keyof T]][] {\n\tconst entries: [keyof T, T[keyof T]][] = [];\n\n\tfor (const [key, value] of Object.entries(obj)) {\n\t\tif (isObject(value)) {\n\t\t\tentries.push(...objectToTuples(value, `${prefix}${key}.`));\n\t\t} else {\n\t\t\tentries.push([`${prefix}${key}` as keyof T, value as T[keyof T]]);\n\t\t}\n\t}\n\n\treturn entries;\n}\n"]}