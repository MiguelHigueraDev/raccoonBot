{"version":3,"sources":["../../../src/lib/pickRandom.ts"],"names":[],"mappings":";;;;AAOO,SAAS,WAAc,OAAqB,SAAS,GAAY;AACvE,QAAM,MAAM,CAAC,GAAG,KAAK;AAErB,MAAI,OAAO,WAAW,eAAe,WAAW,GAAG;AAClD,WAAO,IAAI,KAAK,MAAM,KAAK,OAAO,IAAI,IAAI,MAAM,CAAC;AAAA,EAClD;AAEA,MAAI,CAAC,IAAI,UAAU,CAAC,QAAQ;AAC3B,WAAO,CAAC;AAAA,EACT;AAEA,SAAO,MAAM,KAAK,EAAE,QAAQ,KAAK,IAAI,QAAQ,IAAI,MAAM,EAAE,GAAG,MAAM,IAAI,OAAO,KAAK,MAAM,KAAK,OAAO,IAAI,IAAI,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC;AAC3H;AAZgB","sourcesContent":["/**\n * Picks a random element from an array\n * @param array The array to pick a random element from\n * @param amount Amount of values to obtain randomly (default: 1)\n */\nexport function pickRandom<T>(array: readonly T[], amount?: 1): T;\nexport function pickRandom<T>(array: readonly T[], amount: number): T[];\nexport function pickRandom<T>(array: readonly T[], amount = 1): T | T[] {\n\tconst arr = [...array];\n\n\tif (typeof amount === 'undefined' || amount === 1) {\n\t\treturn arr[Math.floor(Math.random() * arr.length)];\n\t}\n\n\tif (!arr.length || !amount) {\n\t\treturn [];\n\t}\n\n\treturn Array.from({ length: Math.min(amount, arr.length) }, () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]);\n}\n"]}