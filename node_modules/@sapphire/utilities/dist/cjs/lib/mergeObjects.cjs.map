{"version":3,"sources":["../../../src/lib/mergeObjects.ts"],"names":[],"mappings":";;;;AAAA,SAAS,gBAAgB;AAOlB,SAAS,aAAiD,WAAc,WAA+B;AAC7G,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,SAAS,GAAG;AACrD,UAAM,cAAc,QAAQ,IAAI,WAAW,GAAG;AAC9C,QAAI,SAAS,KAAK,GAAG;AACpB,cAAQ,IAAI,WAAW,KAAK,SAAS,WAAW,IAAI,aAAa,aAAa,KAAe,IAAI,KAAK;AAAA,IACvG,WAAW,CAAC,SAAS,WAAW,GAAG;AAClC,cAAQ,IAAI,WAAW,KAAK,KAAK;AAAA,IAClC;AAAA,EACD;AAEA,SAAO;AACR;AAXgB","sourcesContent":["import { isObject } from './isObject';\n\n/**\n * Merges two objects\n * @param objTarget The object to be merged\n * @param objSource The object to merge\n */\nexport function mergeObjects<A extends object, B extends object>(objTarget: A, objSource: Readonly<B>): A & B {\n\tfor (const [key, value] of Object.entries(objSource)) {\n\t\tconst targetValue = Reflect.get(objTarget, key);\n\t\tif (isObject(value)) {\n\t\t\tReflect.set(objTarget, key, isObject(targetValue) ? mergeObjects(targetValue, value as object) : value);\n\t\t} else if (!isObject(targetValue)) {\n\t\t\tReflect.set(objTarget, key, value);\n\t\t}\n\t}\n\n\treturn objTarget as A & B;\n}\n"]}