{"version":3,"sources":["../../src/lib/toTitleCase.ts"],"names":[],"mappings":";;;;;AAAA,IAAM,gBAAgB;AAef,IAAM,eAAuC;AAAA,EACnD,aAAa;AAAA,EACb,cAAc;AAAA,EACd,iBAAiB;AAAA,EACjB,aAAa;AACd;AAcO,SAAS,YAAY,KAAa,UAA8B,CAAC,GAAW;AAClF,QAAM,EAAE,qBAAqB,CAAC,GAAG,cAAc,IAAI;AACnD,QAAM,oBAAoB;AAAA,IACzB,GAAG;AAAA,IACH,GAAI,gBACD,qBACA,OAAO,QAAQ,kBAAkB,EAAE;AAAA,MACnC,CAAC,UAAU,CAAC,KAAK,OAAO,OAAO,EAAE,GAAG,UAAU,CAAC,IAAI,YAAY,CAAC,GAAG,QAAQ;AAAA,MAC3E,CAAC;AAAA,IACD;AAAA,EACJ;AAEA,SAAO,IAAI;AAAA,IACV;AAAA,IACA,CAAC,QAAK;AAhDR;AAgDW,qCAAkB,gBAAgB,MAAM,IAAI,YAAY,CAAC,MAAzD,YAA8D,IAAI,OAAO,CAAC,EAAE,YAAY,IAAI,IAAI,UAAU,CAAC,EAAE,YAAY;AAAA;AAAA,EACnI;AACD;AAhBgB","sourcesContent":["const TO_TITLE_CASE = /[A-Za-zÀ-ÖØ-öø-ÿ]\\S*/g;\n\n/**\n * The variants that will not strictly follow the `toTitleCase` algorithm\n * and will instead return the value matched with the key.\n *\n * This table lists how certain terms are converted.\n * Any terms not included are converted to regular `Titlecase`.\n * |       Term       |   Converted To   |\n * |:---------------- |:---------------- |\n * | textchannel      | TextChannel      |\n * | voicechannel     | VoiceChannel     |\n * | categorychannel  | CategoryChannel  |\n * | guildmember      | GuildMember      |\n */\nexport const baseVariants: Record<string, string> = {\n\ttextchannel: 'TextChannel',\n\tvoicechannel: 'VoiceChannel',\n\tcategorychannel: 'CategoryChannel',\n\tguildmember: 'GuildMember'\n};\n\n/**\n * Converts a string to Title Case\n *\n * @description This is designed to also ensure common Discord PascalCased strings\n * are put in their TitleCase {@link baseVariants}.\n *\n * You can also provide your own variants to merge with the {@link baseVariants} for\n * your own functionality use.\n *\n * @param str The string to title case\n * @param options The options to use when converting the string\n */\nexport function toTitleCase(str: string, options: ToTitleCaseOptions = {}): string {\n\tconst { additionalVariants = {}, caseSensitive } = options;\n\tconst titleCaseVariants = {\n\t\t...baseVariants,\n\t\t...(caseSensitive\n\t\t\t? additionalVariants\n\t\t\t: Object.entries(additionalVariants).reduce<Record<string, string>>(\n\t\t\t\t\t(variants, [key, variant]) => ({ ...variants, [key.toLowerCase()]: variant }),\n\t\t\t\t\t{}\n\t\t\t  ))\n\t};\n\n\treturn str.replace(\n\t\tTO_TITLE_CASE,\n\t\t(txt) => titleCaseVariants[caseSensitive ? txt : txt.toLowerCase()] ?? txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase()\n\t);\n}\n\n/**\n * The options to use when converting a string to title case\n */\nexport interface ToTitleCaseOptions {\n\t/**\n\t * The optional additional variants to use when converting the string\n\t */\n\tadditionalVariants?: Record<string, string>;\n\n\t/**\n\t * Whether to convert the string to title case in a case sensitive manner.\n\t */\n\tcaseSensitive?: boolean;\n}\n"]}